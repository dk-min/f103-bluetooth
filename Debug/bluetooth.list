
C:\Users\wlghd\Desktop\stm_project\bluetooth\Debug\bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007650  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08007760  08007760  00017760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007a40  08007a40  00017a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007a48  08007a48  00017a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007a4c  08007a4c  00017a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000674  20000000  08007a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001c0  20000674  080080c4  00020674  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000834  080080c4  00020834  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e95b  00000000  00000000  0002069d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000020a8  00000000  00000000  0002eff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000710  00000000  00000000  000310a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000638  00000000  00000000  000317b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004a5f  00000000  00000000  00031de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000024ac  00000000  00000000  00036847  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00038cf3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002664  00000000  00000000  00038d70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000674 	.word	0x20000674
 800012c:	00000000 	.word	0x00000000
 8000130:	08007748 	.word	0x08007748

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000678 	.word	0x20000678
 800014c:	08007748 	.word	0x08007748

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_frsub>:
 8000a80:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a84:	e002      	b.n	8000a8c <__addsf3>
 8000a86:	bf00      	nop

08000a88 <__aeabi_fsub>:
 8000a88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a8c <__addsf3>:
 8000a8c:	0042      	lsls	r2, r0, #1
 8000a8e:	bf1f      	itttt	ne
 8000a90:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a94:	ea92 0f03 	teqne	r2, r3
 8000a98:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a9c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa0:	d06a      	beq.n	8000b78 <__addsf3+0xec>
 8000aa2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aa6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aaa:	bfc1      	itttt	gt
 8000aac:	18d2      	addgt	r2, r2, r3
 8000aae:	4041      	eorgt	r1, r0
 8000ab0:	4048      	eorgt	r0, r1
 8000ab2:	4041      	eorgt	r1, r0
 8000ab4:	bfb8      	it	lt
 8000ab6:	425b      	neglt	r3, r3
 8000ab8:	2b19      	cmp	r3, #25
 8000aba:	bf88      	it	hi
 8000abc:	4770      	bxhi	lr
 8000abe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ac2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ad6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ada:	bf18      	it	ne
 8000adc:	4249      	negne	r1, r1
 8000ade:	ea92 0f03 	teq	r2, r3
 8000ae2:	d03f      	beq.n	8000b64 <__addsf3+0xd8>
 8000ae4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae8:	fa41 fc03 	asr.w	ip, r1, r3
 8000aec:	eb10 000c 	adds.w	r0, r0, ip
 8000af0:	f1c3 0320 	rsb	r3, r3, #32
 8000af4:	fa01 f103 	lsl.w	r1, r1, r3
 8000af8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000afc:	d502      	bpl.n	8000b04 <__addsf3+0x78>
 8000afe:	4249      	negs	r1, r1
 8000b00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b08:	d313      	bcc.n	8000b32 <__addsf3+0xa6>
 8000b0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b0e:	d306      	bcc.n	8000b1e <__addsf3+0x92>
 8000b10:	0840      	lsrs	r0, r0, #1
 8000b12:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b16:	f102 0201 	add.w	r2, r2, #1
 8000b1a:	2afe      	cmp	r2, #254	; 0xfe
 8000b1c:	d251      	bcs.n	8000bc2 <__addsf3+0x136>
 8000b1e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b26:	bf08      	it	eq
 8000b28:	f020 0001 	biceq.w	r0, r0, #1
 8000b2c:	ea40 0003 	orr.w	r0, r0, r3
 8000b30:	4770      	bx	lr
 8000b32:	0049      	lsls	r1, r1, #1
 8000b34:	eb40 0000 	adc.w	r0, r0, r0
 8000b38:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	d1ed      	bne.n	8000b1e <__addsf3+0x92>
 8000b42:	fab0 fc80 	clz	ip, r0
 8000b46:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b4a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b4e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b52:	bfaa      	itet	ge
 8000b54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b58:	4252      	neglt	r2, r2
 8000b5a:	4318      	orrge	r0, r3
 8000b5c:	bfbc      	itt	lt
 8000b5e:	40d0      	lsrlt	r0, r2
 8000b60:	4318      	orrlt	r0, r3
 8000b62:	4770      	bx	lr
 8000b64:	f092 0f00 	teq	r2, #0
 8000b68:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b6c:	bf06      	itte	eq
 8000b6e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b72:	3201      	addeq	r2, #1
 8000b74:	3b01      	subne	r3, #1
 8000b76:	e7b5      	b.n	8000ae4 <__addsf3+0x58>
 8000b78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b80:	bf18      	it	ne
 8000b82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b86:	d021      	beq.n	8000bcc <__addsf3+0x140>
 8000b88:	ea92 0f03 	teq	r2, r3
 8000b8c:	d004      	beq.n	8000b98 <__addsf3+0x10c>
 8000b8e:	f092 0f00 	teq	r2, #0
 8000b92:	bf08      	it	eq
 8000b94:	4608      	moveq	r0, r1
 8000b96:	4770      	bx	lr
 8000b98:	ea90 0f01 	teq	r0, r1
 8000b9c:	bf1c      	itt	ne
 8000b9e:	2000      	movne	r0, #0
 8000ba0:	4770      	bxne	lr
 8000ba2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ba6:	d104      	bne.n	8000bb2 <__addsf3+0x126>
 8000ba8:	0040      	lsls	r0, r0, #1
 8000baa:	bf28      	it	cs
 8000bac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb0:	4770      	bx	lr
 8000bb2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bb6:	bf3c      	itt	cc
 8000bb8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bxcc	lr
 8000bbe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd0:	bf16      	itet	ne
 8000bd2:	4608      	movne	r0, r1
 8000bd4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd8:	4601      	movne	r1, r0
 8000bda:	0242      	lsls	r2, r0, #9
 8000bdc:	bf06      	itte	eq
 8000bde:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000be2:	ea90 0f01 	teqeq	r0, r1
 8000be6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bea:	4770      	bx	lr

08000bec <__aeabi_ui2f>:
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e004      	b.n	8000bfc <__aeabi_i2f+0x8>
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_i2f>:
 8000bf4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	bf48      	it	mi
 8000bfa:	4240      	negmi	r0, r0
 8000bfc:	ea5f 0c00 	movs.w	ip, r0
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c08:	4601      	mov	r1, r0
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	e01c      	b.n	8000c4a <__aeabi_l2f+0x2a>

08000c10 <__aeabi_ul2f>:
 8000c10:	ea50 0201 	orrs.w	r2, r0, r1
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e00a      	b.n	8000c34 <__aeabi_l2f+0x14>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_l2f>:
 8000c20:	ea50 0201 	orrs.w	r2, r0, r1
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c2c:	d502      	bpl.n	8000c34 <__aeabi_l2f+0x14>
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	ea5f 0c01 	movs.w	ip, r1
 8000c38:	bf02      	ittt	eq
 8000c3a:	4684      	moveq	ip, r0
 8000c3c:	4601      	moveq	r1, r0
 8000c3e:	2000      	moveq	r0, #0
 8000c40:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c44:	bf08      	it	eq
 8000c46:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c4e:	fabc f28c 	clz	r2, ip
 8000c52:	3a08      	subs	r2, #8
 8000c54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c58:	db10      	blt.n	8000c7c <__aeabi_l2f+0x5c>
 8000c5a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c5e:	4463      	add	r3, ip
 8000c60:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c64:	f1c2 0220 	rsb	r2, r2, #32
 8000c68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c70:	eb43 0002 	adc.w	r0, r3, r2
 8000c74:	bf08      	it	eq
 8000c76:	f020 0001 	biceq.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	f102 0220 	add.w	r2, r2, #32
 8000c80:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c84:	f1c2 0220 	rsb	r2, r2, #32
 8000c88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c8c:	fa21 f202 	lsr.w	r2, r1, r2
 8000c90:	eb43 0002 	adc.w	r0, r3, r2
 8000c94:	bf08      	it	eq
 8000c96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_fmul>:
 8000c9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ca4:	bf1e      	ittt	ne
 8000ca6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000caa:	ea92 0f0c 	teqne	r2, ip
 8000cae:	ea93 0f0c 	teqne	r3, ip
 8000cb2:	d06f      	beq.n	8000d94 <__aeabi_fmul+0xf8>
 8000cb4:	441a      	add	r2, r3
 8000cb6:	ea80 0c01 	eor.w	ip, r0, r1
 8000cba:	0240      	lsls	r0, r0, #9
 8000cbc:	bf18      	it	ne
 8000cbe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cc2:	d01e      	beq.n	8000d02 <__aeabi_fmul+0x66>
 8000cc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cc8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ccc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd0:	fba0 3101 	umull	r3, r1, r0, r1
 8000cd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cd8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cdc:	bf3e      	ittt	cc
 8000cde:	0049      	lslcc	r1, r1, #1
 8000ce0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ce4:	005b      	lslcc	r3, r3, #1
 8000ce6:	ea40 0001 	orr.w	r0, r0, r1
 8000cea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cee:	2afd      	cmp	r2, #253	; 0xfd
 8000cf0:	d81d      	bhi.n	8000d2e <__aeabi_fmul+0x92>
 8000cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	4770      	bx	lr
 8000d02:	f090 0f00 	teq	r0, #0
 8000d06:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d0a:	bf08      	it	eq
 8000d0c:	0249      	lsleq	r1, r1, #9
 8000d0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d16:	3a7f      	subs	r2, #127	; 0x7f
 8000d18:	bfc2      	ittt	gt
 8000d1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d22:	4770      	bxgt	lr
 8000d24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	3a01      	subs	r2, #1
 8000d2e:	dc5d      	bgt.n	8000dec <__aeabi_fmul+0x150>
 8000d30:	f112 0f19 	cmn.w	r2, #25
 8000d34:	bfdc      	itt	le
 8000d36:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d3a:	4770      	bxle	lr
 8000d3c:	f1c2 0200 	rsb	r2, r2, #0
 8000d40:	0041      	lsls	r1, r0, #1
 8000d42:	fa21 f102 	lsr.w	r1, r1, r2
 8000d46:	f1c2 0220 	rsb	r2, r2, #32
 8000d4a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d52:	f140 0000 	adc.w	r0, r0, #0
 8000d56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d5a:	bf08      	it	eq
 8000d5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d60:	4770      	bx	lr
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0040      	lsleq	r0, r0, #1
 8000d6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d72:	3a01      	subeq	r2, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fmul+0xce>
 8000d76:	ea40 000c 	orr.w	r0, r0, ip
 8000d7a:	f093 0f00 	teq	r3, #0
 8000d7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d82:	bf02      	ittt	eq
 8000d84:	0049      	lsleq	r1, r1, #1
 8000d86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d8a:	3b01      	subeq	r3, #1
 8000d8c:	d0f9      	beq.n	8000d82 <__aeabi_fmul+0xe6>
 8000d8e:	ea41 010c 	orr.w	r1, r1, ip
 8000d92:	e78f      	b.n	8000cb4 <__aeabi_fmul+0x18>
 8000d94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d98:	ea92 0f0c 	teq	r2, ip
 8000d9c:	bf18      	it	ne
 8000d9e:	ea93 0f0c 	teqne	r3, ip
 8000da2:	d00a      	beq.n	8000dba <__aeabi_fmul+0x11e>
 8000da4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000da8:	bf18      	it	ne
 8000daa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dae:	d1d8      	bne.n	8000d62 <__aeabi_fmul+0xc6>
 8000db0:	ea80 0001 	eor.w	r0, r0, r1
 8000db4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f090 0f00 	teq	r0, #0
 8000dbe:	bf17      	itett	ne
 8000dc0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dc4:	4608      	moveq	r0, r1
 8000dc6:	f091 0f00 	teqne	r1, #0
 8000dca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dce:	d014      	beq.n	8000dfa <__aeabi_fmul+0x15e>
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	d101      	bne.n	8000dda <__aeabi_fmul+0x13e>
 8000dd6:	0242      	lsls	r2, r0, #9
 8000dd8:	d10f      	bne.n	8000dfa <__aeabi_fmul+0x15e>
 8000dda:	ea93 0f0c 	teq	r3, ip
 8000dde:	d103      	bne.n	8000de8 <__aeabi_fmul+0x14c>
 8000de0:	024b      	lsls	r3, r1, #9
 8000de2:	bf18      	it	ne
 8000de4:	4608      	movne	r0, r1
 8000de6:	d108      	bne.n	8000dfa <__aeabi_fmul+0x15e>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	4770      	bx	lr
 8000dfa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_fdiv>:
 8000e04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e0c:	bf1e      	ittt	ne
 8000e0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e12:	ea92 0f0c 	teqne	r2, ip
 8000e16:	ea93 0f0c 	teqne	r3, ip
 8000e1a:	d069      	beq.n	8000ef0 <__aeabi_fdiv+0xec>
 8000e1c:	eba2 0203 	sub.w	r2, r2, r3
 8000e20:	ea80 0c01 	eor.w	ip, r0, r1
 8000e24:	0249      	lsls	r1, r1, #9
 8000e26:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e2a:	d037      	beq.n	8000e9c <__aeabi_fdiv+0x98>
 8000e2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	bf38      	it	cc
 8000e40:	005b      	lslcc	r3, r3, #1
 8000e42:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e46:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	bf24      	itt	cs
 8000e4e:	1a5b      	subcs	r3, r3, r1
 8000e50:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e58:	bf24      	itt	cs
 8000e5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e66:	bf24      	itt	cs
 8000e68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	bf18      	it	ne
 8000e82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e86:	d1e0      	bne.n	8000e4a <__aeabi_fdiv+0x46>
 8000e88:	2afd      	cmp	r2, #253	; 0xfd
 8000e8a:	f63f af50 	bhi.w	8000d2e <__aeabi_fmul+0x92>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e94:	bf08      	it	eq
 8000e96:	f020 0001 	biceq.w	r0, r0, #1
 8000e9a:	4770      	bx	lr
 8000e9c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ea4:	327f      	adds	r2, #127	; 0x7f
 8000ea6:	bfc2      	ittt	gt
 8000ea8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb0:	4770      	bxgt	lr
 8000eb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb6:	f04f 0300 	mov.w	r3, #0
 8000eba:	3a01      	subs	r2, #1
 8000ebc:	e737      	b.n	8000d2e <__aeabi_fmul+0x92>
 8000ebe:	f092 0f00 	teq	r2, #0
 8000ec2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0040      	lsleq	r0, r0, #1
 8000eca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ece:	3a01      	subeq	r2, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fdiv+0xc2>
 8000ed2:	ea40 000c 	orr.w	r0, r0, ip
 8000ed6:	f093 0f00 	teq	r3, #0
 8000eda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ede:	bf02      	ittt	eq
 8000ee0:	0049      	lsleq	r1, r1, #1
 8000ee2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ee6:	3b01      	subeq	r3, #1
 8000ee8:	d0f9      	beq.n	8000ede <__aeabi_fdiv+0xda>
 8000eea:	ea41 010c 	orr.w	r1, r1, ip
 8000eee:	e795      	b.n	8000e1c <__aeabi_fdiv+0x18>
 8000ef0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef4:	ea92 0f0c 	teq	r2, ip
 8000ef8:	d108      	bne.n	8000f0c <__aeabi_fdiv+0x108>
 8000efa:	0242      	lsls	r2, r0, #9
 8000efc:	f47f af7d 	bne.w	8000dfa <__aeabi_fmul+0x15e>
 8000f00:	ea93 0f0c 	teq	r3, ip
 8000f04:	f47f af70 	bne.w	8000de8 <__aeabi_fmul+0x14c>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e776      	b.n	8000dfa <__aeabi_fmul+0x15e>
 8000f0c:	ea93 0f0c 	teq	r3, ip
 8000f10:	d104      	bne.n	8000f1c <__aeabi_fdiv+0x118>
 8000f12:	024b      	lsls	r3, r1, #9
 8000f14:	f43f af4c 	beq.w	8000db0 <__aeabi_fmul+0x114>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e76e      	b.n	8000dfa <__aeabi_fmul+0x15e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	d1ca      	bne.n	8000ebe <__aeabi_fdiv+0xba>
 8000f28:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f2c:	f47f af5c 	bne.w	8000de8 <__aeabi_fmul+0x14c>
 8000f30:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f34:	f47f af3c 	bne.w	8000db0 <__aeabi_fmul+0x114>
 8000f38:	e75f      	b.n	8000dfa <__aeabi_fmul+0x15e>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_uldivmod>:
 8000f3c:	b953      	cbnz	r3, 8000f54 <__aeabi_uldivmod+0x18>
 8000f3e:	b94a      	cbnz	r2, 8000f54 <__aeabi_uldivmod+0x18>
 8000f40:	2900      	cmp	r1, #0
 8000f42:	bf08      	it	eq
 8000f44:	2800      	cmpeq	r0, #0
 8000f46:	bf1c      	itt	ne
 8000f48:	f04f 31ff 	movne.w	r1, #4294967295
 8000f4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000f50:	f000 b97a 	b.w	8001248 <__aeabi_idiv0>
 8000f54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f5c:	f000 f806 	bl	8000f6c <__udivmoddi4>
 8000f60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f68:	b004      	add	sp, #16
 8000f6a:	4770      	bx	lr

08000f6c <__udivmoddi4>:
 8000f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f70:	468c      	mov	ip, r1
 8000f72:	460e      	mov	r6, r1
 8000f74:	4604      	mov	r4, r0
 8000f76:	9d08      	ldr	r5, [sp, #32]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d150      	bne.n	800101e <__udivmoddi4+0xb2>
 8000f7c:	428a      	cmp	r2, r1
 8000f7e:	4617      	mov	r7, r2
 8000f80:	d96c      	bls.n	800105c <__udivmoddi4+0xf0>
 8000f82:	fab2 fe82 	clz	lr, r2
 8000f86:	f1be 0f00 	cmp.w	lr, #0
 8000f8a:	d00b      	beq.n	8000fa4 <__udivmoddi4+0x38>
 8000f8c:	f1ce 0c20 	rsb	ip, lr, #32
 8000f90:	fa01 f60e 	lsl.w	r6, r1, lr
 8000f94:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000f98:	fa02 f70e 	lsl.w	r7, r2, lr
 8000f9c:	ea4c 0c06 	orr.w	ip, ip, r6
 8000fa0:	fa00 f40e 	lsl.w	r4, r0, lr
 8000fa4:	0c3a      	lsrs	r2, r7, #16
 8000fa6:	fbbc f9f2 	udiv	r9, ip, r2
 8000faa:	b2bb      	uxth	r3, r7
 8000fac:	fb02 cc19 	mls	ip, r2, r9, ip
 8000fb0:	fb09 fa03 	mul.w	sl, r9, r3
 8000fb4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000fb8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000fbc:	45b2      	cmp	sl, r6
 8000fbe:	d90a      	bls.n	8000fd6 <__udivmoddi4+0x6a>
 8000fc0:	19f6      	adds	r6, r6, r7
 8000fc2:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fc6:	f080 8125 	bcs.w	8001214 <__udivmoddi4+0x2a8>
 8000fca:	45b2      	cmp	sl, r6
 8000fcc:	f240 8122 	bls.w	8001214 <__udivmoddi4+0x2a8>
 8000fd0:	f1a9 0902 	sub.w	r9, r9, #2
 8000fd4:	443e      	add	r6, r7
 8000fd6:	eba6 060a 	sub.w	r6, r6, sl
 8000fda:	fbb6 f0f2 	udiv	r0, r6, r2
 8000fde:	fb02 6610 	mls	r6, r2, r0, r6
 8000fe2:	fb00 f303 	mul.w	r3, r0, r3
 8000fe6:	b2a4      	uxth	r4, r4
 8000fe8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000fec:	42a3      	cmp	r3, r4
 8000fee:	d909      	bls.n	8001004 <__udivmoddi4+0x98>
 8000ff0:	19e4      	adds	r4, r4, r7
 8000ff2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ff6:	f080 810b 	bcs.w	8001210 <__udivmoddi4+0x2a4>
 8000ffa:	42a3      	cmp	r3, r4
 8000ffc:	f240 8108 	bls.w	8001210 <__udivmoddi4+0x2a4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	2100      	movs	r1, #0
 8001006:	1ae4      	subs	r4, r4, r3
 8001008:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800100c:	2d00      	cmp	r5, #0
 800100e:	d062      	beq.n	80010d6 <__udivmoddi4+0x16a>
 8001010:	2300      	movs	r3, #0
 8001012:	fa24 f40e 	lsr.w	r4, r4, lr
 8001016:	602c      	str	r4, [r5, #0]
 8001018:	606b      	str	r3, [r5, #4]
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	428b      	cmp	r3, r1
 8001020:	d907      	bls.n	8001032 <__udivmoddi4+0xc6>
 8001022:	2d00      	cmp	r5, #0
 8001024:	d055      	beq.n	80010d2 <__udivmoddi4+0x166>
 8001026:	2100      	movs	r1, #0
 8001028:	e885 0041 	stmia.w	r5, {r0, r6}
 800102c:	4608      	mov	r0, r1
 800102e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001032:	fab3 f183 	clz	r1, r3
 8001036:	2900      	cmp	r1, #0
 8001038:	f040 808f 	bne.w	800115a <__udivmoddi4+0x1ee>
 800103c:	42b3      	cmp	r3, r6
 800103e:	d302      	bcc.n	8001046 <__udivmoddi4+0xda>
 8001040:	4282      	cmp	r2, r0
 8001042:	f200 80fc 	bhi.w	800123e <__udivmoddi4+0x2d2>
 8001046:	1a84      	subs	r4, r0, r2
 8001048:	eb66 0603 	sbc.w	r6, r6, r3
 800104c:	2001      	movs	r0, #1
 800104e:	46b4      	mov	ip, r6
 8001050:	2d00      	cmp	r5, #0
 8001052:	d040      	beq.n	80010d6 <__udivmoddi4+0x16a>
 8001054:	e885 1010 	stmia.w	r5, {r4, ip}
 8001058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105c:	b912      	cbnz	r2, 8001064 <__udivmoddi4+0xf8>
 800105e:	2701      	movs	r7, #1
 8001060:	fbb7 f7f2 	udiv	r7, r7, r2
 8001064:	fab7 fe87 	clz	lr, r7
 8001068:	f1be 0f00 	cmp.w	lr, #0
 800106c:	d135      	bne.n	80010da <__udivmoddi4+0x16e>
 800106e:	2101      	movs	r1, #1
 8001070:	1bf6      	subs	r6, r6, r7
 8001072:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8001076:	fa1f f887 	uxth.w	r8, r7
 800107a:	fbb6 f2fc 	udiv	r2, r6, ip
 800107e:	fb0c 6612 	mls	r6, ip, r2, r6
 8001082:	fb08 f002 	mul.w	r0, r8, r2
 8001086:	0c23      	lsrs	r3, r4, #16
 8001088:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 800108c:	42b0      	cmp	r0, r6
 800108e:	d907      	bls.n	80010a0 <__udivmoddi4+0x134>
 8001090:	19f6      	adds	r6, r6, r7
 8001092:	f102 33ff 	add.w	r3, r2, #4294967295
 8001096:	d202      	bcs.n	800109e <__udivmoddi4+0x132>
 8001098:	42b0      	cmp	r0, r6
 800109a:	f200 80d2 	bhi.w	8001242 <__udivmoddi4+0x2d6>
 800109e:	461a      	mov	r2, r3
 80010a0:	1a36      	subs	r6, r6, r0
 80010a2:	fbb6 f0fc 	udiv	r0, r6, ip
 80010a6:	fb0c 6610 	mls	r6, ip, r0, r6
 80010aa:	fb08 f800 	mul.w	r8, r8, r0
 80010ae:	b2a3      	uxth	r3, r4
 80010b0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80010b4:	45a0      	cmp	r8, r4
 80010b6:	d907      	bls.n	80010c8 <__udivmoddi4+0x15c>
 80010b8:	19e4      	adds	r4, r4, r7
 80010ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80010be:	d202      	bcs.n	80010c6 <__udivmoddi4+0x15a>
 80010c0:	45a0      	cmp	r8, r4
 80010c2:	f200 80b9 	bhi.w	8001238 <__udivmoddi4+0x2cc>
 80010c6:	4618      	mov	r0, r3
 80010c8:	eba4 0408 	sub.w	r4, r4, r8
 80010cc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80010d0:	e79c      	b.n	800100c <__udivmoddi4+0xa0>
 80010d2:	4629      	mov	r1, r5
 80010d4:	4628      	mov	r0, r5
 80010d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010da:	fa07 f70e 	lsl.w	r7, r7, lr
 80010de:	f1ce 0320 	rsb	r3, lr, #32
 80010e2:	fa26 f203 	lsr.w	r2, r6, r3
 80010e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80010ea:	fbb2 f1fc 	udiv	r1, r2, ip
 80010ee:	fa1f f887 	uxth.w	r8, r7
 80010f2:	fb0c 2211 	mls	r2, ip, r1, r2
 80010f6:	fa06 f60e 	lsl.w	r6, r6, lr
 80010fa:	fa20 f303 	lsr.w	r3, r0, r3
 80010fe:	fb01 f908 	mul.w	r9, r1, r8
 8001102:	4333      	orrs	r3, r6
 8001104:	0c1e      	lsrs	r6, r3, #16
 8001106:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800110a:	45b1      	cmp	r9, r6
 800110c:	fa00 f40e 	lsl.w	r4, r0, lr
 8001110:	d909      	bls.n	8001126 <__udivmoddi4+0x1ba>
 8001112:	19f6      	adds	r6, r6, r7
 8001114:	f101 32ff 	add.w	r2, r1, #4294967295
 8001118:	f080 808c 	bcs.w	8001234 <__udivmoddi4+0x2c8>
 800111c:	45b1      	cmp	r9, r6
 800111e:	f240 8089 	bls.w	8001234 <__udivmoddi4+0x2c8>
 8001122:	3902      	subs	r1, #2
 8001124:	443e      	add	r6, r7
 8001126:	eba6 0609 	sub.w	r6, r6, r9
 800112a:	fbb6 f0fc 	udiv	r0, r6, ip
 800112e:	fb0c 6210 	mls	r2, ip, r0, r6
 8001132:	fb00 f908 	mul.w	r9, r0, r8
 8001136:	b29e      	uxth	r6, r3
 8001138:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800113c:	45b1      	cmp	r9, r6
 800113e:	d907      	bls.n	8001150 <__udivmoddi4+0x1e4>
 8001140:	19f6      	adds	r6, r6, r7
 8001142:	f100 33ff 	add.w	r3, r0, #4294967295
 8001146:	d271      	bcs.n	800122c <__udivmoddi4+0x2c0>
 8001148:	45b1      	cmp	r9, r6
 800114a:	d96f      	bls.n	800122c <__udivmoddi4+0x2c0>
 800114c:	3802      	subs	r0, #2
 800114e:	443e      	add	r6, r7
 8001150:	eba6 0609 	sub.w	r6, r6, r9
 8001154:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001158:	e78f      	b.n	800107a <__udivmoddi4+0x10e>
 800115a:	f1c1 0720 	rsb	r7, r1, #32
 800115e:	fa22 f807 	lsr.w	r8, r2, r7
 8001162:	408b      	lsls	r3, r1
 8001164:	ea48 0303 	orr.w	r3, r8, r3
 8001168:	fa26 f407 	lsr.w	r4, r6, r7
 800116c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001170:	fbb4 f9fe 	udiv	r9, r4, lr
 8001174:	fa1f fc83 	uxth.w	ip, r3
 8001178:	fb0e 4419 	mls	r4, lr, r9, r4
 800117c:	408e      	lsls	r6, r1
 800117e:	fa20 f807 	lsr.w	r8, r0, r7
 8001182:	fb09 fa0c 	mul.w	sl, r9, ip
 8001186:	ea48 0806 	orr.w	r8, r8, r6
 800118a:	ea4f 4618 	mov.w	r6, r8, lsr #16
 800118e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8001192:	45a2      	cmp	sl, r4
 8001194:	fa02 f201 	lsl.w	r2, r2, r1
 8001198:	fa00 f601 	lsl.w	r6, r0, r1
 800119c:	d908      	bls.n	80011b0 <__udivmoddi4+0x244>
 800119e:	18e4      	adds	r4, r4, r3
 80011a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80011a4:	d244      	bcs.n	8001230 <__udivmoddi4+0x2c4>
 80011a6:	45a2      	cmp	sl, r4
 80011a8:	d942      	bls.n	8001230 <__udivmoddi4+0x2c4>
 80011aa:	f1a9 0902 	sub.w	r9, r9, #2
 80011ae:	441c      	add	r4, r3
 80011b0:	eba4 040a 	sub.w	r4, r4, sl
 80011b4:	fbb4 f0fe 	udiv	r0, r4, lr
 80011b8:	fb0e 4410 	mls	r4, lr, r0, r4
 80011bc:	fb00 fc0c 	mul.w	ip, r0, ip
 80011c0:	fa1f f888 	uxth.w	r8, r8
 80011c4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80011c8:	45a4      	cmp	ip, r4
 80011ca:	d907      	bls.n	80011dc <__udivmoddi4+0x270>
 80011cc:	18e4      	adds	r4, r4, r3
 80011ce:	f100 3eff 	add.w	lr, r0, #4294967295
 80011d2:	d229      	bcs.n	8001228 <__udivmoddi4+0x2bc>
 80011d4:	45a4      	cmp	ip, r4
 80011d6:	d927      	bls.n	8001228 <__udivmoddi4+0x2bc>
 80011d8:	3802      	subs	r0, #2
 80011da:	441c      	add	r4, r3
 80011dc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011e0:	fba0 8902 	umull	r8, r9, r0, r2
 80011e4:	eba4 0c0c 	sub.w	ip, r4, ip
 80011e8:	45cc      	cmp	ip, r9
 80011ea:	46c2      	mov	sl, r8
 80011ec:	46ce      	mov	lr, r9
 80011ee:	d315      	bcc.n	800121c <__udivmoddi4+0x2b0>
 80011f0:	d012      	beq.n	8001218 <__udivmoddi4+0x2ac>
 80011f2:	b155      	cbz	r5, 800120a <__udivmoddi4+0x29e>
 80011f4:	ebb6 030a 	subs.w	r3, r6, sl
 80011f8:	eb6c 060e 	sbc.w	r6, ip, lr
 80011fc:	fa06 f707 	lsl.w	r7, r6, r7
 8001200:	40cb      	lsrs	r3, r1
 8001202:	431f      	orrs	r7, r3
 8001204:	40ce      	lsrs	r6, r1
 8001206:	602f      	str	r7, [r5, #0]
 8001208:	606e      	str	r6, [r5, #4]
 800120a:	2100      	movs	r1, #0
 800120c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001210:	4610      	mov	r0, r2
 8001212:	e6f7      	b.n	8001004 <__udivmoddi4+0x98>
 8001214:	4689      	mov	r9, r1
 8001216:	e6de      	b.n	8000fd6 <__udivmoddi4+0x6a>
 8001218:	4546      	cmp	r6, r8
 800121a:	d2ea      	bcs.n	80011f2 <__udivmoddi4+0x286>
 800121c:	ebb8 0a02 	subs.w	sl, r8, r2
 8001220:	eb69 0e03 	sbc.w	lr, r9, r3
 8001224:	3801      	subs	r0, #1
 8001226:	e7e4      	b.n	80011f2 <__udivmoddi4+0x286>
 8001228:	4670      	mov	r0, lr
 800122a:	e7d7      	b.n	80011dc <__udivmoddi4+0x270>
 800122c:	4618      	mov	r0, r3
 800122e:	e78f      	b.n	8001150 <__udivmoddi4+0x1e4>
 8001230:	4681      	mov	r9, r0
 8001232:	e7bd      	b.n	80011b0 <__udivmoddi4+0x244>
 8001234:	4611      	mov	r1, r2
 8001236:	e776      	b.n	8001126 <__udivmoddi4+0x1ba>
 8001238:	3802      	subs	r0, #2
 800123a:	443c      	add	r4, r7
 800123c:	e744      	b.n	80010c8 <__udivmoddi4+0x15c>
 800123e:	4608      	mov	r0, r1
 8001240:	e706      	b.n	8001050 <__udivmoddi4+0xe4>
 8001242:	3a02      	subs	r2, #2
 8001244:	443e      	add	r6, r7
 8001246:	e72b      	b.n	80010a0 <__udivmoddi4+0x134>

08001248 <__aeabi_idiv0>:
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop

0800124c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001250:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_Init+0x28>)
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_Init+0x28>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125c:	2003      	movs	r0, #3
 800125e:	f000 fdfd 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001262:	2000      	movs	r0, #0
 8001264:	f000 f808 	bl	8001278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001268:	f003 f986 	bl	8004578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40022000 	.word	0x40022000

08001278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001280:	f002 fab8 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 8001284:	4602      	mov	r2, r0
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_InitTick+0x34>)
 8001288:	fba3 2302 	umull	r2, r3, r3, r2
 800128c:	099b      	lsrs	r3, r3, #6
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fe19 	bl	8001ec6 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 fde9 	bl	8001e72 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	10624dd3 	.word	0x10624dd3

080012b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick++;
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <HAL_IncTick+0x18>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	4a03      	ldr	r2, [pc, #12]	; (80012c8 <HAL_IncTick+0x18>)
 80012bc:	6013      	str	r3, [r2, #0]
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000690 	.word	0x20000690

080012cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <HAL_GetTick+0x10>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	20000690 	.word	0x20000690

080012e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80012ec:	f7ff ffee 	bl	80012cc <HAL_GetTick>
 80012f0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80012f2:	bf00      	nop
 80012f4:	f7ff ffea 	bl	80012cc <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad2      	subs	r2, r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	d3f7      	bcc.n	80012f4 <HAL_Delay+0x14>
  {
  }
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint32_t tmp_cr1 = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t tmp_cr2 = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  uint32_t tmp_sqr1 = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_ADC_Init+0x24>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e0e3      	b.n	80014f8 <HAL_ADC_Init+0x1ec>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	2b00      	cmp	r3, #0
 800133c:	d109      	bne.n	8001352 <HAL_ADC_Init+0x46>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f003 f95f 	bl	8004610 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 fb80 	bl	8001a58 <ADC_ConversionStop_Disable>
 8001358:	4603      	mov	r3, r0
 800135a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	f040 80bb 	bne.w	80014e2 <HAL_ADC_Init+0x1d6>
 800136c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001370:	2b00      	cmp	r3, #0
 8001372:	f040 80b6 	bne.w	80014e2 <HAL_ADC_Init+0x1d6>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800137e:	f023 0302 	bic.w	r3, r3, #2
 8001382:	f043 0202 	orr.w	r2, r3, #2
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001392:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68d9      	ldr	r1, [r3, #12]
 8001398:	2302      	movs	r3, #2
 800139a:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	fa93 f3a3 	rbit	r3, r3
 80013a2:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	fab3 f383 	clz	r3, r3
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80013ae:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80013b0:	6a3a      	ldr	r2, [r7, #32]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	623b      	str	r3, [r7, #32]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013be:	d003      	beq.n	80013c8 <HAL_ADC_Init+0xbc>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d102      	bne.n	80013ce <HAL_ADC_Init+0xc2>
 80013c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013cc:	e000      	b.n	80013d0 <HAL_ADC_Init+0xc4>
 80013ce:	2300      	movs	r3, #0
 80013d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013d2:	4313      	orrs	r3, r2
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d124      	bne.n	8001428 <HAL_ADC_Init+0x11c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d114      	bne.n	8001410 <HAL_ADC_Init+0x104>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	1e5a      	subs	r2, r3, #1
 80013ec:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	fa93 f3a3 	rbit	r3, r3
 80013f8:	613b      	str	r3, [r7, #16]
  return(result);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	fab3 f383 	clz	r3, r3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800140a:	4313      	orrs	r3, r2
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
 800140e:	e00b      	b.n	8001428 <HAL_ADC_Init+0x11c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	f043 0220 	orr.w	r2, r3, #32
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	6852      	ldr	r2, [r2, #4]
 8001432:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 8001436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001438:	430a      	orrs	r2, r1
 800143a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6899      	ldr	r1, [r3, #8]
 8001446:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <HAL_ADC_Init+0x1f4>)
 8001448:	400b      	ands	r3, r1
 800144a:	6a39      	ldr	r1, [r7, #32]
 800144c:	430b      	orrs	r3, r1
 800144e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001458:	d003      	beq.n	8001462 <HAL_ADC_Init+0x156>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d10f      	bne.n	8001482 <HAL_ADC_Init+0x176>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	1e5a      	subs	r2, r3, #1
 8001468:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 800146c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	fa93 f3a3 	rbit	r3, r3
 8001474:	60bb      	str	r3, [r7, #8]
  return(result);
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	fab3 f383 	clz	r3, r3
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800148c:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8001490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001492:	430a      	orrs	r2, r1
 8001494:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_ADC_Init+0x1f8>)
 800149e:	4013      	ands	r3, r2
 80014a0:	6a3a      	ldr	r2, [r7, #32]
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d10b      	bne.n	80014be <HAL_ADC_Init+0x1b2>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	f023 0303 	bic.w	r3, r3, #3
 80014b4:	f043 0201 	orr.w	r2, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014bc:	e01a      	b.n	80014f4 <HAL_ADC_Init+0x1e8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c2:	f023 0312 	bic.w	r3, r3, #18
 80014c6:	f043 0210 	orr.w	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d2:	f043 0201 	orr.w	r2, r3, #1
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014e0:	e008      	b.n	80014f4 <HAL_ADC_Init+0x1e8>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	f043 0210 	orr.w	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3730      	adds	r7, #48	; 0x30
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	ffe1f7fd 	.word	0xffe1f7fd
 8001504:	ff1f0efe 	.word	0xff1f0efe

08001508 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a64      	ldr	r2, [pc, #400]	; (80016b0 <HAL_ADC_Start_DMA+0x1a8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d004      	beq.n	800152c <HAL_ADC_Start_DMA+0x24>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a63      	ldr	r2, [pc, #396]	; (80016b4 <HAL_ADC_Start_DMA+0x1ac>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d106      	bne.n	800153a <HAL_ADC_Start_DMA+0x32>
 800152c:	4b60      	ldr	r3, [pc, #384]	; (80016b0 <HAL_ADC_Start_DMA+0x1a8>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001534:	2b00      	cmp	r3, #0
 8001536:	f040 80b3 	bne.w	80016a0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_ADC_Start_DMA+0x40>
 8001544:	2302      	movs	r3, #2
 8001546:	e0ae      	b.n	80016a6 <HAL_ADC_Start_DMA+0x19e>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 fa2f 	bl	80019b4 <ADC_Enable>
 8001556:	4603      	mov	r3, r0
 8001558:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800155a:	7dfb      	ldrb	r3, [r7, #23]
 800155c:	2b00      	cmp	r3, #0
 800155e:	f040 809a 	bne.w	8001696 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a4e      	ldr	r2, [pc, #312]	; (80016b4 <HAL_ADC_Start_DMA+0x1ac>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d105      	bne.n	800158c <HAL_ADC_Start_DMA+0x84>
 8001580:	4b4b      	ldr	r3, [pc, #300]	; (80016b0 <HAL_ADC_Start_DMA+0x1a8>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d115      	bne.n	80015b8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d026      	beq.n	80015f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015b6:	e01d      	b.n	80015f4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a39      	ldr	r2, [pc, #228]	; (80016b0 <HAL_ADC_Start_DMA+0x1a8>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d004      	beq.n	80015d8 <HAL_ADC_Start_DMA+0xd0>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a38      	ldr	r2, [pc, #224]	; (80016b4 <HAL_ADC_Start_DMA+0x1ac>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d10d      	bne.n	80015f4 <HAL_ADC_Start_DMA+0xec>
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <HAL_ADC_Start_DMA+0x1a8>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	f023 0206 	bic.w	r2, r3, #6
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c
 800160c:	e002      	b.n	8001614 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4a25      	ldr	r2, [pc, #148]	; (80016b8 <HAL_ADC_Start_DMA+0x1b0>)
 8001622:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4a24      	ldr	r2, [pc, #144]	; (80016bc <HAL_ADC_Start_DMA+0x1b4>)
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4a23      	ldr	r2, [pc, #140]	; (80016c0 <HAL_ADC_Start_DMA+0x1b8>)
 8001632:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f06f 0202 	mvn.w	r2, #2
 800163c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	6892      	ldr	r2, [r2, #8]
 8001648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800164c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6a18      	ldr	r0, [r3, #32]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	334c      	adds	r3, #76	; 0x4c
 8001658:	4619      	mov	r1, r3
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f000 fcb1 	bl	8001fc4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800166c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001670:	d108      	bne.n	8001684 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	6892      	ldr	r2, [r2, #8]
 800167c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001680:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001682:	e00f      	b.n	80016a4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	6892      	ldr	r2, [r2, #8]
 800168e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001692:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001694:	e006      	b.n	80016a4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800169e:	e001      	b.n	80016a4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40012400 	.word	0x40012400
 80016b4:	40012800 	.word	0x40012800
 80016b8:	08001acd 	.word	0x08001acd
 80016bc:	08001b49 	.word	0x08001b49
 80016c0:	08001b65 	.word	0x08001b65

080016c4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
	...

080016fc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016fc:	b490      	push	{r4, r7}
 80016fe:	b098      	sub	sp, #96	; 0x60
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  __IO uint32_t wait_loop_index = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_ADC_ConfigChannel+0x22>
 800171a:	2302      	movs	r3, #2
 800171c:	e13e      	b.n	800199c <HAL_ADC_ConfigChannel+0x2a0>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b06      	cmp	r3, #6
 800172c:	d830      	bhi.n	8001790 <HAL_ADC_ConfigChannel+0x94>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001738:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800173c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001740:	fa92 f2a2 	rbit	r2, r2
 8001744:	64fa      	str	r2, [r7, #76]	; 0x4c
  return(result);
 8001746:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001748:	fab2 f282 	clz	r2, r2
 800174c:	4610      	mov	r0, r2
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	6852      	ldr	r2, [r2, #4]
 8001752:	3a01      	subs	r2, #1
 8001754:	fb02 f200 	mul.w	r2, r2, r0
 8001758:	201f      	movs	r0, #31
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	43d2      	mvns	r2, r2
 8001760:	4011      	ands	r1, r2
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	6810      	ldr	r0, [r2, #0]
 8001766:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800176a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800176e:	fa92 f2a2 	rbit	r2, r2
 8001772:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001774:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001776:	fab2 f282 	clz	r2, r2
 800177a:	4614      	mov	r4, r2
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	6852      	ldr	r2, [r2, #4]
 8001780:	3a01      	subs	r2, #1
 8001782:	fb02 f204 	mul.w	r2, r2, r4
 8001786:	fa00 f202 	lsl.w	r2, r0, r2
 800178a:	430a      	orrs	r2, r1
 800178c:	635a      	str	r2, [r3, #52]	; 0x34
 800178e:	e064      	b.n	800185a <HAL_ADC_ConfigChannel+0x15e>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b0c      	cmp	r3, #12
 8001796:	d830      	bhi.n	80017fa <HAL_ADC_ConfigChannel+0xfe>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80017a2:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80017a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017aa:	fa92 f2a2 	rbit	r2, r2
 80017ae:	63fa      	str	r2, [r7, #60]	; 0x3c
  return(result);
 80017b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017b2:	fab2 f282 	clz	r2, r2
 80017b6:	4610      	mov	r0, r2
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	6852      	ldr	r2, [r2, #4]
 80017bc:	3a07      	subs	r2, #7
 80017be:	fb02 f200 	mul.w	r2, r2, r0
 80017c2:	201f      	movs	r0, #31
 80017c4:	fa00 f202 	lsl.w	r2, r0, r2
 80017c8:	43d2      	mvns	r2, r2
 80017ca:	4011      	ands	r1, r2
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	6810      	ldr	r0, [r2, #0]
 80017d0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80017d4:	64ba      	str	r2, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017d8:	fa92 f2a2 	rbit	r2, r2
 80017dc:	647a      	str	r2, [r7, #68]	; 0x44
  return(result);
 80017de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017e0:	fab2 f282 	clz	r2, r2
 80017e4:	4614      	mov	r4, r2
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	6852      	ldr	r2, [r2, #4]
 80017ea:	3a07      	subs	r2, #7
 80017ec:	fb02 f204 	mul.w	r2, r2, r4
 80017f0:	fa00 f202 	lsl.w	r2, r0, r2
 80017f4:	430a      	orrs	r2, r1
 80017f6:	631a      	str	r2, [r3, #48]	; 0x30
 80017f8:	e02f      	b.n	800185a <HAL_ADC_ConfigChannel+0x15e>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001804:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8001808:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800180c:	fa92 f2a2 	rbit	r2, r2
 8001810:	62fa      	str	r2, [r7, #44]	; 0x2c
  return(result);
 8001812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001814:	fab2 f282 	clz	r2, r2
 8001818:	4610      	mov	r0, r2
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	6852      	ldr	r2, [r2, #4]
 800181e:	3a0d      	subs	r2, #13
 8001820:	fb02 f200 	mul.w	r2, r2, r0
 8001824:	201f      	movs	r0, #31
 8001826:	fa00 f202 	lsl.w	r2, r0, r2
 800182a:	43d2      	mvns	r2, r2
 800182c:	4011      	ands	r1, r2
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	6810      	ldr	r0, [r2, #0]
 8001832:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8001836:	63ba      	str	r2, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800183a:	fa92 f2a2 	rbit	r2, r2
 800183e:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001842:	fab2 f282 	clz	r2, r2
 8001846:	4614      	mov	r4, r2
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	6852      	ldr	r2, [r2, #4]
 800184c:	3a0d      	subs	r2, #13
 800184e:	fb02 f204 	mul.w	r2, r2, r4
 8001852:	fa00 f202 	lsl.w	r2, r0, r2
 8001856:	430a      	orrs	r2, r1
 8001858:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b09      	cmp	r3, #9
 8001860:	d92e      	bls.n	80018c0 <HAL_ADC_ConfigChannel+0x1c4>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	68d1      	ldr	r1, [r2, #12]
 800186c:	2238      	movs	r2, #56	; 0x38
 800186e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	6a3a      	ldr	r2, [r7, #32]
 8001872:	fa92 f2a2 	rbit	r2, r2
 8001876:	61fa      	str	r2, [r7, #28]
  return(result);
 8001878:	69fa      	ldr	r2, [r7, #28]
 800187a:	fab2 f282 	clz	r2, r2
 800187e:	4610      	mov	r0, r2
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	3a0a      	subs	r2, #10
 8001886:	fb02 f200 	mul.w	r2, r2, r0
 800188a:	2007      	movs	r0, #7
 800188c:	fa00 f202 	lsl.w	r2, r0, r2
 8001890:	43d2      	mvns	r2, r2
 8001892:	4011      	ands	r1, r2
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	6890      	ldr	r0, [r2, #8]
 8001898:	2238      	movs	r2, #56	; 0x38
 800189a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800189e:	fa92 f2a2 	rbit	r2, r2
 80018a2:	627a      	str	r2, [r7, #36]	; 0x24
  return(result);
 80018a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a6:	fab2 f282 	clz	r2, r2
 80018aa:	4614      	mov	r4, r2
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	3a0a      	subs	r2, #10
 80018b2:	fb02 f204 	mul.w	r2, r2, r4
 80018b6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ba:	430a      	orrs	r2, r1
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	e02b      	b.n	8001918 <HAL_ADC_ConfigChannel+0x21c>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	6911      	ldr	r1, [r2, #16]
 80018ca:	2238      	movs	r2, #56	; 0x38
 80018cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	fa92 f2a2 	rbit	r2, r2
 80018d4:	60fa      	str	r2, [r7, #12]
  return(result);
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	fab2 f282 	clz	r2, r2
 80018dc:	4610      	mov	r0, r2
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	fb02 f200 	mul.w	r2, r2, r0
 80018e6:	2007      	movs	r0, #7
 80018e8:	fa00 f202 	lsl.w	r2, r0, r2
 80018ec:	43d2      	mvns	r2, r2
 80018ee:	4011      	ands	r1, r2
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	6890      	ldr	r0, [r2, #8]
 80018f4:	2238      	movs	r2, #56	; 0x38
 80018f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	fa92 f2a2 	rbit	r2, r2
 80018fe:	617a      	str	r2, [r7, #20]
  return(result);
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	fab2 f282 	clz	r2, r2
 8001906:	4614      	mov	r4, r2
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	fb02 f204 	mul.w	r2, r2, r4
 8001910:	fa00 f202 	lsl.w	r2, r0, r2
 8001914:	430a      	orrs	r2, r1
 8001916:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b10      	cmp	r3, #16
 800191e:	d003      	beq.n	8001928 <HAL_ADC_ConfigChannel+0x22c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001924:	2b11      	cmp	r3, #17
 8001926:	d133      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x294>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1e      	ldr	r2, [pc, #120]	; (80019a8 <HAL_ADC_ConfigChannel+0x2ac>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d125      	bne.n	800197e <HAL_ADC_ConfigChannel+0x282>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d127      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x294>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	6892      	ldr	r2, [r2, #8]
 800194a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800194e:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b10      	cmp	r3, #16
 8001956:	d11b      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x294>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_ADC_ConfigChannel+0x2b0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <HAL_ADC_ConfigChannel+0x2b4>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0c9a      	lsrs	r2, r3, #18
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800196e:	e002      	b.n	8001976 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	3b01      	subs	r3, #1
 8001974:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f9      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x274>
 800197c:	e008      	b.n	8001990 <HAL_ADC_ConfigChannel+0x294>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001982:	f043 0220 	orr.w	r2, r3, #32
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001998:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800199c:	4618      	mov	r0, r3
 800199e:	3760      	adds	r7, #96	; 0x60
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc90      	pop	{r4, r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40012400 	.word	0x40012400
 80019ac:	20000000 	.word	0x20000000
 80019b0:	431bde83 	.word	0x431bde83

080019b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d039      	beq.n	8001a46 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	6892      	ldr	r2, [r2, #8]
 80019dc:	f042 0201 	orr.w	r2, r2, #1
 80019e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <ADC_Enable+0x9c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1b      	ldr	r2, [pc, #108]	; (8001a54 <ADC_Enable+0xa0>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	0c9b      	lsrs	r3, r3, #18
 80019ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80019f0:	e002      	b.n	80019f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f9      	bne.n	80019f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019fe:	f7ff fc65 	bl	80012cc <HAL_GetTick>
 8001a02:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a04:	e018      	b.n	8001a38 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a06:	f7ff fc61 	bl	80012cc <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d911      	bls.n	8001a38 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	f043 0210 	orr.w	r2, r3, #16
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	f043 0201 	orr.w	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e007      	b.n	8001a48 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d1df      	bne.n	8001a06 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000000 	.word	0x20000000
 8001a54:	431bde83 	.word	0x431bde83

08001a58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d127      	bne.n	8001ac2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	6892      	ldr	r2, [r2, #8]
 8001a7c:	f022 0201 	bic.w	r2, r2, #1
 8001a80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a82:	f7ff fc23 	bl	80012cc <HAL_GetTick>
 8001a86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a88:	e014      	b.n	8001ab4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a8a:	f7ff fc1f 	bl	80012cc <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d90d      	bls.n	8001ab4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	f043 0210 	orr.w	r2, r3, #16
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	f043 0201 	orr.w	r2, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e007      	b.n	8001ac4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d0e3      	beq.n	8001a8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d127      	bne.n	8001b36 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001afc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b00:	d115      	bne.n	8001b2e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	68db      	ldr	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d111      	bne.n	8001b2e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d105      	bne.n	8001b2e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f7ff fdc8 	bl	80016c4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b34:	e004      	b.n	8001b40 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
}
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7ff fdbd 	bl	80016d6 <HAL_ADC_ConvHalfCpltCallback>
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	f043 0204 	orr.w	r2, r3, #4
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f7ff fdac 	bl	80016e8 <HAL_ADC_ErrorCallback>
}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001b98:	b590      	push	{r4, r7, lr}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADCEx_Calibration_Start+0x1e>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e086      	b.n	8001cc4 <HAL_ADCEx_Calibration_Start+0x12c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ff4a 	bl	8001a58 <ADC_ConversionStop_Disable>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001bc8:	7dfb      	ldrb	r3, [r7, #23]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d175      	bne.n	8001cba <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bd6:	f023 0302 	bic.w	r3, r3, #2
 8001bda:	f043 0202 	orr.w	r2, r3, #2
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001be2:	4b3a      	ldr	r3, [pc, #232]	; (8001ccc <HAL_ADCEx_Calibration_Start+0x134>)
 8001be4:	681c      	ldr	r4, [r3, #0]
 8001be6:	2002      	movs	r0, #2
 8001be8:	f001 ff36 	bl	8003a58 <HAL_RCCEx_GetPeriphCLKFreq>
 8001bec:	4603      	mov	r3, r0
 8001bee:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001bf2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001bf4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0)
 8001bf6:	e002      	b.n	8001bfe <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f9      	bne.n	8001bf8 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff fed5 	bl	80019b4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	6892      	ldr	r2, [r2, #8]
 8001c14:	f042 0208 	orr.w	r2, r2, #8
 8001c18:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001c1a:	f7ff fb57 	bl	80012cc <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c20:	e014      	b.n	8001c4c <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c22:	f7ff fb53 	bl	80012cc <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b0a      	cmp	r3, #10
 8001c2e:	d90d      	bls.n	8001c4c <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f023 0312 	bic.w	r3, r3, #18
 8001c38:	f043 0210 	orr.w	r2, r3, #16
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e03b      	b.n	8001cc4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1e3      	bne.n	8001c22 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	6892      	ldr	r2, [r2, #8]
 8001c64:	f042 0204 	orr.w	r2, r2, #4
 8001c68:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001c6a:	f7ff fb2f 	bl	80012cc <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c70:	e014      	b.n	8001c9c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c72:	f7ff fb2b 	bl	80012cc <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b0a      	cmp	r3, #10
 8001c7e:	d90d      	bls.n	8001c9c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	f023 0312 	bic.w	r3, r3, #18
 8001c88:	f043 0210 	orr.w	r2, r3, #16
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e013      	b.n	8001cc4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1e3      	bne.n	8001c72 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	f023 0303 	bic.w	r3, r3, #3
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	371c      	adds	r7, #28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd90      	pop	{r4, r7, pc}
 8001ccc:	20000000 	.word	0x20000000

08001cd0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001d3e:	4908      	ldr	r1, [pc, #32]	; (8001d60 <NVIC_EnableIRQ+0x2c>)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	79fa      	ldrb	r2, [r7, #7]
 8001d48:	f002 021f 	and.w	r2, r2, #31
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	da0b      	bge.n	8001d90 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	490d      	ldr	r1, [pc, #52]	; (8001db0 <NVIC_SetPriority+0x4c>)
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	3b04      	subs	r3, #4
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d8e:	e009      	b.n	8001da4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d90:	4908      	ldr	r1, [pc, #32]	; (8001db4 <NVIC_SetPriority+0x50>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	0112      	lsls	r2, r2, #4
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00
 8001db4:	e000e100 	.word	0xe000e100

08001db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	2201      	movs	r2, #1
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	1e5a      	subs	r2, r3, #1
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	401a      	ands	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfe:	2101      	movs	r1, #1
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	1e59      	subs	r1, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e28:	d301      	bcc.n	8001e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00f      	b.n	8001e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <SysTick_Config+0x40>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e36:	210f      	movs	r1, #15
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f7ff ff92 	bl	8001d64 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <SysTick_Config+0x40>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <SysTick_Config+0x40>)
 8001e48:	2207      	movs	r2, #7
 8001e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	e000e010 	.word	0xe000e010

08001e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff33 	bl	8001cd0 <NVIC_SetPriorityGrouping>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e84:	f7ff ff48 	bl	8001d18 <NVIC_GetPriorityGrouping>
 8001e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f7ff ff92 	bl	8001db8 <NVIC_EncodePriority>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff61 	bl	8001d64 <NVIC_SetPriority>
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff3b 	bl	8001d34 <NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ffa2 	bl	8001e18 <SysTick_Config>
 8001ed4:	4603      	mov	r3, r0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d106      	bne.n	8001efc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001eee:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001efa:	e005      	b.n	8001f08 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001efc:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 0304 	bic.w	r3, r3, #4
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f1c:	f000 f802 	bl	8001f24 <HAL_SYSTICK_Callback>
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e039      	b.n	8001fba <HAL_DMA_Init+0x8a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d103      	bne.n	8001f58 <HAL_DMA_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2020 	strb.w	r2, [r3, #32]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	601a      	str	r2, [r3, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_DMA_Start_IT+0x1c>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e036      	b.n	800204e <HAL_DMA_Start_IT+0x8a>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
  
  /* Configure the source, destination address and the data length */
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fa16 	bl	8002438 <DMA_SetConfig>
  
  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	f042 0202 	orr.w	r2, r2, #2
 800201a:	601a      	str	r2, [r3, #0]

  /* Enable the Half transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	f042 0204 	orr.w	r2, r2, #4
 800202a:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	f042 0208 	orr.w	r2, r2, #8
 800203a:	601a      	str	r2, [r3, #0]
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
} 
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8002060:	4b8f      	ldr	r3, [pc, #572]	; (80022a0 <HAL_DMA_IRQHandler+0x248>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	4b8e      	ldr	r3, [pc, #568]	; (80022a4 <HAL_DMA_IRQHandler+0x24c>)
 800206c:	4299      	cmp	r1, r3
 800206e:	d02e      	beq.n	80020ce <HAL_DMA_IRQHandler+0x76>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	4b8c      	ldr	r3, [pc, #560]	; (80022a8 <HAL_DMA_IRQHandler+0x250>)
 8002078:	4299      	cmp	r1, r3
 800207a:	d026      	beq.n	80020ca <HAL_DMA_IRQHandler+0x72>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4619      	mov	r1, r3
 8002082:	4b8a      	ldr	r3, [pc, #552]	; (80022ac <HAL_DMA_IRQHandler+0x254>)
 8002084:	4299      	cmp	r1, r3
 8002086:	d01d      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x6c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <HAL_DMA_IRQHandler+0x258>)
 8002090:	4299      	cmp	r1, r3
 8002092:	d014      	beq.n	80020be <HAL_DMA_IRQHandler+0x66>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4619      	mov	r1, r3
 800209a:	4b86      	ldr	r3, [pc, #536]	; (80022b4 <HAL_DMA_IRQHandler+0x25c>)
 800209c:	4299      	cmp	r1, r3
 800209e:	d00b      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x60>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	4b84      	ldr	r3, [pc, #528]	; (80022b8 <HAL_DMA_IRQHandler+0x260>)
 80020a8:	4299      	cmp	r1, r3
 80020aa:	d102      	bne.n	80020b2 <HAL_DMA_IRQHandler+0x5a>
 80020ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80020b0:	e00e      	b.n	80020d0 <HAL_DMA_IRQHandler+0x78>
 80020b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80020b6:	e00b      	b.n	80020d0 <HAL_DMA_IRQHandler+0x78>
 80020b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80020bc:	e008      	b.n	80020d0 <HAL_DMA_IRQHandler+0x78>
 80020be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020c2:	e005      	b.n	80020d0 <HAL_DMA_IRQHandler+0x78>
 80020c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020c8:	e002      	b.n	80020d0 <HAL_DMA_IRQHandler+0x78>
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	e000      	b.n	80020d0 <HAL_DMA_IRQHandler+0x78>
 80020ce:	2308      	movs	r3, #8
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d05c      	beq.n	8002190 <HAL_DMA_IRQHandler+0x138>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d155      	bne.n	8002190 <HAL_DMA_IRQHandler+0x138>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	f022 0208 	bic.w	r2, r2, #8
 80020f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80020f4:	4a6a      	ldr	r2, [pc, #424]	; (80022a0 <HAL_DMA_IRQHandler+0x248>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	4b69      	ldr	r3, [pc, #420]	; (80022a4 <HAL_DMA_IRQHandler+0x24c>)
 80020fe:	4299      	cmp	r1, r3
 8002100:	d02e      	beq.n	8002160 <HAL_DMA_IRQHandler+0x108>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4619      	mov	r1, r3
 8002108:	4b67      	ldr	r3, [pc, #412]	; (80022a8 <HAL_DMA_IRQHandler+0x250>)
 800210a:	4299      	cmp	r1, r3
 800210c:	d026      	beq.n	800215c <HAL_DMA_IRQHandler+0x104>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4619      	mov	r1, r3
 8002114:	4b65      	ldr	r3, [pc, #404]	; (80022ac <HAL_DMA_IRQHandler+0x254>)
 8002116:	4299      	cmp	r1, r3
 8002118:	d01d      	beq.n	8002156 <HAL_DMA_IRQHandler+0xfe>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4619      	mov	r1, r3
 8002120:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <HAL_DMA_IRQHandler+0x258>)
 8002122:	4299      	cmp	r1, r3
 8002124:	d014      	beq.n	8002150 <HAL_DMA_IRQHandler+0xf8>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4619      	mov	r1, r3
 800212c:	4b61      	ldr	r3, [pc, #388]	; (80022b4 <HAL_DMA_IRQHandler+0x25c>)
 800212e:	4299      	cmp	r1, r3
 8002130:	d00b      	beq.n	800214a <HAL_DMA_IRQHandler+0xf2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4619      	mov	r1, r3
 8002138:	4b5f      	ldr	r3, [pc, #380]	; (80022b8 <HAL_DMA_IRQHandler+0x260>)
 800213a:	4299      	cmp	r1, r3
 800213c:	d102      	bne.n	8002144 <HAL_DMA_IRQHandler+0xec>
 800213e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002142:	e00e      	b.n	8002162 <HAL_DMA_IRQHandler+0x10a>
 8002144:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002148:	e00b      	b.n	8002162 <HAL_DMA_IRQHandler+0x10a>
 800214a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800214e:	e008      	b.n	8002162 <HAL_DMA_IRQHandler+0x10a>
 8002150:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002154:	e005      	b.n	8002162 <HAL_DMA_IRQHandler+0x10a>
 8002156:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800215a:	e002      	b.n	8002162 <HAL_DMA_IRQHandler+0x10a>
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	e000      	b.n	8002162 <HAL_DMA_IRQHandler+0x10a>
 8002160:	2308      	movs	r3, #8
 8002162:	6053      	str	r3, [r2, #4]
      
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002168:	f043 0201 	orr.w	r2, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2204      	movs	r2, #4
 8002174:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2020 	strb.w	r2, [r3, #32]
      
      if (hdma->XferErrorCallback != NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_DMA_IRQHandler+0x138>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8002190:	4b43      	ldr	r3, [pc, #268]	; (80022a0 <HAL_DMA_IRQHandler+0x248>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	4b42      	ldr	r3, [pc, #264]	; (80022a4 <HAL_DMA_IRQHandler+0x24c>)
 800219c:	4299      	cmp	r1, r3
 800219e:	d02e      	beq.n	80021fe <HAL_DMA_IRQHandler+0x1a6>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	4b40      	ldr	r3, [pc, #256]	; (80022a8 <HAL_DMA_IRQHandler+0x250>)
 80021a8:	4299      	cmp	r1, r3
 80021aa:	d026      	beq.n	80021fa <HAL_DMA_IRQHandler+0x1a2>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4619      	mov	r1, r3
 80021b2:	4b3e      	ldr	r3, [pc, #248]	; (80022ac <HAL_DMA_IRQHandler+0x254>)
 80021b4:	4299      	cmp	r1, r3
 80021b6:	d01d      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x19c>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4619      	mov	r1, r3
 80021be:	4b3c      	ldr	r3, [pc, #240]	; (80022b0 <HAL_DMA_IRQHandler+0x258>)
 80021c0:	4299      	cmp	r1, r3
 80021c2:	d014      	beq.n	80021ee <HAL_DMA_IRQHandler+0x196>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	4b3a      	ldr	r3, [pc, #232]	; (80022b4 <HAL_DMA_IRQHandler+0x25c>)
 80021cc:	4299      	cmp	r1, r3
 80021ce:	d00b      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x190>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4619      	mov	r1, r3
 80021d6:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <HAL_DMA_IRQHandler+0x260>)
 80021d8:	4299      	cmp	r1, r3
 80021da:	d102      	bne.n	80021e2 <HAL_DMA_IRQHandler+0x18a>
 80021dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021e0:	e00e      	b.n	8002200 <HAL_DMA_IRQHandler+0x1a8>
 80021e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021e6:	e00b      	b.n	8002200 <HAL_DMA_IRQHandler+0x1a8>
 80021e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021ec:	e008      	b.n	8002200 <HAL_DMA_IRQHandler+0x1a8>
 80021ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021f2:	e005      	b.n	8002200 <HAL_DMA_IRQHandler+0x1a8>
 80021f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f8:	e002      	b.n	8002200 <HAL_DMA_IRQHandler+0x1a8>
 80021fa:	2340      	movs	r3, #64	; 0x40
 80021fc:	e000      	b.n	8002200 <HAL_DMA_IRQHandler+0x1a8>
 80021fe:	2304      	movs	r3, #4
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d068      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x280>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b04      	cmp	r3, #4
 8002212:	d161      	bne.n	80022d8 <HAL_DMA_IRQHandler+0x280>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d107      	bne.n	8002232 <HAL_DMA_IRQHandler+0x1da>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	f022 0204 	bic.w	r2, r2, #4
 8002230:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002232:	4a1b      	ldr	r2, [pc, #108]	; (80022a0 <HAL_DMA_IRQHandler+0x248>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4619      	mov	r1, r3
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <HAL_DMA_IRQHandler+0x24c>)
 800223c:	4299      	cmp	r1, r3
 800223e:	d03d      	beq.n	80022bc <HAL_DMA_IRQHandler+0x264>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <HAL_DMA_IRQHandler+0x250>)
 8002248:	4299      	cmp	r1, r3
 800224a:	d026      	beq.n	800229a <HAL_DMA_IRQHandler+0x242>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <HAL_DMA_IRQHandler+0x254>)
 8002254:	4299      	cmp	r1, r3
 8002256:	d01d      	beq.n	8002294 <HAL_DMA_IRQHandler+0x23c>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4619      	mov	r1, r3
 800225e:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <HAL_DMA_IRQHandler+0x258>)
 8002260:	4299      	cmp	r1, r3
 8002262:	d014      	beq.n	800228e <HAL_DMA_IRQHandler+0x236>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_DMA_IRQHandler+0x25c>)
 800226c:	4299      	cmp	r1, r3
 800226e:	d00b      	beq.n	8002288 <HAL_DMA_IRQHandler+0x230>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_DMA_IRQHandler+0x260>)
 8002278:	4299      	cmp	r1, r3
 800227a:	d102      	bne.n	8002282 <HAL_DMA_IRQHandler+0x22a>
 800227c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002280:	e01d      	b.n	80022be <HAL_DMA_IRQHandler+0x266>
 8002282:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002286:	e01a      	b.n	80022be <HAL_DMA_IRQHandler+0x266>
 8002288:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800228c:	e017      	b.n	80022be <HAL_DMA_IRQHandler+0x266>
 800228e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002292:	e014      	b.n	80022be <HAL_DMA_IRQHandler+0x266>
 8002294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002298:	e011      	b.n	80022be <HAL_DMA_IRQHandler+0x266>
 800229a:	2340      	movs	r3, #64	; 0x40
 800229c:	e00f      	b.n	80022be <HAL_DMA_IRQHandler+0x266>
 800229e:	bf00      	nop
 80022a0:	40020000 	.word	0x40020000
 80022a4:	40020008 	.word	0x40020008
 80022a8:	4002001c 	.word	0x4002001c
 80022ac:	40020030 	.word	0x40020030
 80022b0:	40020044 	.word	0x40020044
 80022b4:	40020058 	.word	0x40020058
 80022b8:	4002006c 	.word	0x4002006c
 80022bc:	2304      	movs	r3, #4
 80022be:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2211      	movs	r2, #17
 80022c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x280>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80022d8:	4b50      	ldr	r3, [pc, #320]	; (800241c <HAL_DMA_IRQHandler+0x3c4>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	4b4f      	ldr	r3, [pc, #316]	; (8002420 <HAL_DMA_IRQHandler+0x3c8>)
 80022e4:	4299      	cmp	r1, r3
 80022e6:	d02e      	beq.n	8002346 <HAL_DMA_IRQHandler+0x2ee>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4619      	mov	r1, r3
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <HAL_DMA_IRQHandler+0x3cc>)
 80022f0:	4299      	cmp	r1, r3
 80022f2:	d026      	beq.n	8002342 <HAL_DMA_IRQHandler+0x2ea>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4619      	mov	r1, r3
 80022fa:	4b4b      	ldr	r3, [pc, #300]	; (8002428 <HAL_DMA_IRQHandler+0x3d0>)
 80022fc:	4299      	cmp	r1, r3
 80022fe:	d01d      	beq.n	800233c <HAL_DMA_IRQHandler+0x2e4>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	4b49      	ldr	r3, [pc, #292]	; (800242c <HAL_DMA_IRQHandler+0x3d4>)
 8002308:	4299      	cmp	r1, r3
 800230a:	d014      	beq.n	8002336 <HAL_DMA_IRQHandler+0x2de>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	4b47      	ldr	r3, [pc, #284]	; (8002430 <HAL_DMA_IRQHandler+0x3d8>)
 8002314:	4299      	cmp	r1, r3
 8002316:	d00b      	beq.n	8002330 <HAL_DMA_IRQHandler+0x2d8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	4b45      	ldr	r3, [pc, #276]	; (8002434 <HAL_DMA_IRQHandler+0x3dc>)
 8002320:	4299      	cmp	r1, r3
 8002322:	d102      	bne.n	800232a <HAL_DMA_IRQHandler+0x2d2>
 8002324:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002328:	e00e      	b.n	8002348 <HAL_DMA_IRQHandler+0x2f0>
 800232a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800232e:	e00b      	b.n	8002348 <HAL_DMA_IRQHandler+0x2f0>
 8002330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002334:	e008      	b.n	8002348 <HAL_DMA_IRQHandler+0x2f0>
 8002336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800233a:	e005      	b.n	8002348 <HAL_DMA_IRQHandler+0x2f0>
 800233c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002340:	e002      	b.n	8002348 <HAL_DMA_IRQHandler+0x2f0>
 8002342:	2320      	movs	r3, #32
 8002344:	e000      	b.n	8002348 <HAL_DMA_IRQHandler+0x2f0>
 8002346:	2302      	movs	r3, #2
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d061      	beq.n	8002412 <HAL_DMA_IRQHandler+0x3ba>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b02      	cmp	r3, #2
 800235a:	d15a      	bne.n	8002412 <HAL_DMA_IRQHandler+0x3ba>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	2b00      	cmp	r3, #0
 8002368:	d107      	bne.n	800237a <HAL_DMA_IRQHandler+0x322>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	f022 0202 	bic.w	r2, r2, #2
 8002378:	601a      	str	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800237a:	4a28      	ldr	r2, [pc, #160]	; (800241c <HAL_DMA_IRQHandler+0x3c4>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4619      	mov	r1, r3
 8002382:	4b27      	ldr	r3, [pc, #156]	; (8002420 <HAL_DMA_IRQHandler+0x3c8>)
 8002384:	4299      	cmp	r1, r3
 8002386:	d02e      	beq.n	80023e6 <HAL_DMA_IRQHandler+0x38e>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4619      	mov	r1, r3
 800238e:	4b25      	ldr	r3, [pc, #148]	; (8002424 <HAL_DMA_IRQHandler+0x3cc>)
 8002390:	4299      	cmp	r1, r3
 8002392:	d026      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x38a>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4619      	mov	r1, r3
 800239a:	4b23      	ldr	r3, [pc, #140]	; (8002428 <HAL_DMA_IRQHandler+0x3d0>)
 800239c:	4299      	cmp	r1, r3
 800239e:	d01d      	beq.n	80023dc <HAL_DMA_IRQHandler+0x384>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	4b21      	ldr	r3, [pc, #132]	; (800242c <HAL_DMA_IRQHandler+0x3d4>)
 80023a8:	4299      	cmp	r1, r3
 80023aa:	d014      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x37e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <HAL_DMA_IRQHandler+0x3d8>)
 80023b4:	4299      	cmp	r1, r3
 80023b6:	d00b      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x378>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_DMA_IRQHandler+0x3dc>)
 80023c0:	4299      	cmp	r1, r3
 80023c2:	d102      	bne.n	80023ca <HAL_DMA_IRQHandler+0x372>
 80023c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023c8:	e00e      	b.n	80023e8 <HAL_DMA_IRQHandler+0x390>
 80023ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ce:	e00b      	b.n	80023e8 <HAL_DMA_IRQHandler+0x390>
 80023d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023d4:	e008      	b.n	80023e8 <HAL_DMA_IRQHandler+0x390>
 80023d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023da:	e005      	b.n	80023e8 <HAL_DMA_IRQHandler+0x390>
 80023dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e0:	e002      	b.n	80023e8 <HAL_DMA_IRQHandler+0x390>
 80023e2:	2320      	movs	r3, #32
 80023e4:	e000      	b.n	80023e8 <HAL_DMA_IRQHandler+0x390>
 80023e6:	2302      	movs	r3, #2
 80023e8:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2020 	strb.w	r2, [r3, #32]
    
      if(hdma->XferCpltCallback != NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_DMA_IRQHandler+0x3ba>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	4798      	blx	r3
      }
    }
  }
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40020000 	.word	0x40020000
 8002420:	40020008 	.word	0x40020008
 8002424:	4002001c 	.word	0x4002001c
 8002428:	40020030 	.word	0x40020030
 800242c:	40020044 	.word	0x40020044
 8002430:	40020058 	.word	0x40020058
 8002434:	4002006c 	.word	0x4002006c

08002438 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	603b      	str	r3, [r7, #0]
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b10      	cmp	r3, #16
 8002454:	d108      	bne.n	8002468 <DMA_SetConfig+0x30>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002466:	e007      	b.n	8002478 <DMA_SetConfig+0x40>
    hdma->Instance->CPAR = SrcAddress;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	60da      	str	r2, [r3, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
	...

08002484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002484:	b480      	push	{r7}
 8002486:	b08b      	sub	sp, #44	; 0x2c
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
 80024a6:	e127      	b.n	80026f8 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024a8:	2201      	movs	r2, #1
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	f040 8116 	bne.w	80026f2 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b12      	cmp	r3, #18
 80024cc:	d034      	beq.n	8002538 <HAL_GPIO_Init+0xb4>
 80024ce:	2b12      	cmp	r3, #18
 80024d0:	d80d      	bhi.n	80024ee <HAL_GPIO_Init+0x6a>
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d02b      	beq.n	800252e <HAL_GPIO_Init+0xaa>
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d804      	bhi.n	80024e4 <HAL_GPIO_Init+0x60>
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d031      	beq.n	8002542 <HAL_GPIO_Init+0xbe>
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d01c      	beq.n	800251c <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 80024e2:	e048      	b.n	8002576 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d043      	beq.n	8002570 <HAL_GPIO_Init+0xec>
 80024e8:	2b11      	cmp	r3, #17
 80024ea:	d01b      	beq.n	8002524 <HAL_GPIO_Init+0xa0>
          break;
 80024ec:	e043      	b.n	8002576 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80024ee:	4a87      	ldr	r2, [pc, #540]	; (800270c <HAL_GPIO_Init+0x288>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d026      	beq.n	8002542 <HAL_GPIO_Init+0xbe>
 80024f4:	4a85      	ldr	r2, [pc, #532]	; (800270c <HAL_GPIO_Init+0x288>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d806      	bhi.n	8002508 <HAL_GPIO_Init+0x84>
 80024fa:	4a85      	ldr	r2, [pc, #532]	; (8002710 <HAL_GPIO_Init+0x28c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d020      	beq.n	8002542 <HAL_GPIO_Init+0xbe>
 8002500:	4a84      	ldr	r2, [pc, #528]	; (8002714 <HAL_GPIO_Init+0x290>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d01d      	beq.n	8002542 <HAL_GPIO_Init+0xbe>
          break;
 8002506:	e036      	b.n	8002576 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002508:	4a83      	ldr	r2, [pc, #524]	; (8002718 <HAL_GPIO_Init+0x294>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d019      	beq.n	8002542 <HAL_GPIO_Init+0xbe>
 800250e:	4a83      	ldr	r2, [pc, #524]	; (800271c <HAL_GPIO_Init+0x298>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d016      	beq.n	8002542 <HAL_GPIO_Init+0xbe>
 8002514:	4a82      	ldr	r2, [pc, #520]	; (8002720 <HAL_GPIO_Init+0x29c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d013      	beq.n	8002542 <HAL_GPIO_Init+0xbe>
          break;
 800251a:	e02c      	b.n	8002576 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	623b      	str	r3, [r7, #32]
          break;
 8002522:	e028      	b.n	8002576 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	3304      	adds	r3, #4
 800252a:	623b      	str	r3, [r7, #32]
          break;
 800252c:	e023      	b.n	8002576 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	3308      	adds	r3, #8
 8002534:	623b      	str	r3, [r7, #32]
          break;
 8002536:	e01e      	b.n	8002576 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	330c      	adds	r3, #12
 800253e:	623b      	str	r3, [r7, #32]
          break;
 8002540:	e019      	b.n	8002576 <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800254a:	2304      	movs	r3, #4
 800254c:	623b      	str	r3, [r7, #32]
          break; 
 800254e:	e012      	b.n	8002576 <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d105      	bne.n	8002564 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002558:	2308      	movs	r3, #8
 800255a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69fa      	ldr	r2, [r7, #28]
 8002560:	611a      	str	r2, [r3, #16]
          break; 
 8002562:	e008      	b.n	8002576 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002564:	2308      	movs	r3, #8
 8002566:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	615a      	str	r2, [r3, #20]
          break; 
 800256e:	e002      	b.n	8002576 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002570:	2300      	movs	r3, #0
 8002572:	623b      	str	r3, [r7, #32]
          break;
 8002574:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2bff      	cmp	r3, #255	; 0xff
 800257a:	d801      	bhi.n	8002580 <HAL_GPIO_Init+0xfc>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	e001      	b.n	8002584 <HAL_GPIO_Init+0x100>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3304      	adds	r3, #4
 8002584:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	2bff      	cmp	r3, #255	; 0xff
 800258a:	d802      	bhi.n	8002592 <HAL_GPIO_Init+0x10e>
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	e002      	b.n	8002598 <HAL_GPIO_Init+0x114>
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	3b08      	subs	r3, #8
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	210f      	movs	r1, #15
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	401a      	ands	r2, r3
 80025aa:	6a39      	ldr	r1, [r7, #32]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	431a      	orrs	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8096 	beq.w	80026f2 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025c6:	4a57      	ldr	r2, [pc, #348]	; (8002724 <HAL_GPIO_Init+0x2a0>)
 80025c8:	4b56      	ldr	r3, [pc, #344]	; (8002724 <HAL_GPIO_Init+0x2a0>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6193      	str	r3, [r2, #24]
 80025d2:	4b54      	ldr	r3, [pc, #336]	; (8002724 <HAL_GPIO_Init+0x2a0>)
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2];
 80025de:	4a52      	ldr	r2, [pc, #328]	; (8002728 <HAL_GPIO_Init+0x2a4>)
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	089b      	lsrs	r3, r3, #2
 80025e4:	3302      	adds	r3, #2
 80025e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ea:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	220f      	movs	r2, #15
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4013      	ands	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a49      	ldr	r2, [pc, #292]	; (800272c <HAL_GPIO_Init+0x2a8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_Init+0x1ae>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a48      	ldr	r2, [pc, #288]	; (8002730 <HAL_GPIO_Init+0x2ac>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00d      	beq.n	800262e <HAL_GPIO_Init+0x1aa>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a47      	ldr	r2, [pc, #284]	; (8002734 <HAL_GPIO_Init+0x2b0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <HAL_GPIO_Init+0x1a6>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a46      	ldr	r2, [pc, #280]	; (8002738 <HAL_GPIO_Init+0x2b4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_GPIO_Init+0x1a2>
 8002622:	2303      	movs	r3, #3
 8002624:	e006      	b.n	8002634 <HAL_GPIO_Init+0x1b0>
 8002626:	2304      	movs	r3, #4
 8002628:	e004      	b.n	8002634 <HAL_GPIO_Init+0x1b0>
 800262a:	2302      	movs	r3, #2
 800262c:	e002      	b.n	8002634 <HAL_GPIO_Init+0x1b0>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_GPIO_Init+0x1b0>
 8002632:	2300      	movs	r3, #0
 8002634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002636:	f002 0203 	and.w	r2, r2, #3
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	4093      	lsls	r3, r2
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2] = temp;
 8002644:	4938      	ldr	r1, [pc, #224]	; (8002728 <HAL_GPIO_Init+0x2a4>)
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	3302      	adds	r3, #2
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800265e:	4937      	ldr	r1, [pc, #220]	; (800273c <HAL_GPIO_Init+0x2b8>)
 8002660:	4b36      	ldr	r3, [pc, #216]	; (800273c <HAL_GPIO_Init+0x2b8>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
 800266a:	e006      	b.n	800267a <HAL_GPIO_Init+0x1f6>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800266c:	4933      	ldr	r1, [pc, #204]	; (800273c <HAL_GPIO_Init+0x2b8>)
 800266e:	4b33      	ldr	r3, [pc, #204]	; (800273c <HAL_GPIO_Init+0x2b8>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	43db      	mvns	r3, r3
 8002676:	4013      	ands	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8002686:	492d      	ldr	r1, [pc, #180]	; (800273c <HAL_GPIO_Init+0x2b8>)
 8002688:	4b2c      	ldr	r3, [pc, #176]	; (800273c <HAL_GPIO_Init+0x2b8>)
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
 8002692:	e006      	b.n	80026a2 <HAL_GPIO_Init+0x21e>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8002694:	4929      	ldr	r1, [pc, #164]	; (800273c <HAL_GPIO_Init+0x2b8>)
 8002696:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_GPIO_Init+0x2b8>)
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	43db      	mvns	r3, r3
 800269e:	4013      	ands	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80026ae:	4923      	ldr	r1, [pc, #140]	; (800273c <HAL_GPIO_Init+0x2b8>)
 80026b0:	4b22      	ldr	r3, [pc, #136]	; (800273c <HAL_GPIO_Init+0x2b8>)
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
 80026ba:	e006      	b.n	80026ca <HAL_GPIO_Init+0x246>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80026bc:	491f      	ldr	r1, [pc, #124]	; (800273c <HAL_GPIO_Init+0x2b8>)
 80026be:	4b1f      	ldr	r3, [pc, #124]	; (800273c <HAL_GPIO_Init+0x2b8>)
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	4013      	ands	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d006      	beq.n	80026e4 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80026d6:	4919      	ldr	r1, [pc, #100]	; (800273c <HAL_GPIO_Init+0x2b8>)
 80026d8:	4b18      	ldr	r3, [pc, #96]	; (800273c <HAL_GPIO_Init+0x2b8>)
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60cb      	str	r3, [r1, #12]
 80026e2:	e006      	b.n	80026f2 <HAL_GPIO_Init+0x26e>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80026e4:	4915      	ldr	r1, [pc, #84]	; (800273c <HAL_GPIO_Init+0x2b8>)
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_GPIO_Init+0x2b8>)
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	4013      	ands	r3, r2
 80026f0:	60cb      	str	r3, [r1, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	3301      	adds	r3, #1
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	f67f aed4 	bls.w	80024a8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8002700:	bf00      	nop
 8002702:	372c      	adds	r7, #44	; 0x2c
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	10210000 	.word	0x10210000
 8002710:	10110000 	.word	0x10110000
 8002714:	10120000 	.word	0x10120000
 8002718:	10310000 	.word	0x10310000
 800271c:	10320000 	.word	0x10320000
 8002720:	10220000 	.word	0x10220000
 8002724:	40021000 	.word	0x40021000
 8002728:	40010000 	.word	0x40010000
 800272c:	40010800 	.word	0x40010800
 8002730:	40010c00 	.word	0x40010c00
 8002734:	40011000 	.word	0x40011000
 8002738:	40011400 	.word	0x40011400
 800273c:	40010400 	.word	0x40010400

08002740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
 800274c:	4613      	mov	r3, r2
 800274e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002750:	787b      	ldrb	r3, [r7, #1]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002756:	887a      	ldrh	r2, [r7, #2]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800275c:	e003      	b.n	8002766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800275e:	887b      	ldrh	r3, [r7, #2]
 8002760:	041a      	lsls	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	611a      	str	r2, [r3, #16]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief This function handles EXTI interrupt request.
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d006      	beq.n	8002794 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f806 	bl	80027a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b0e4      	sub	sp, #400	; 0x190
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8140 	beq.w	8002a54 <HAL_RCC_OscConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027d4:	4bb8      	ldr	r3, [pc, #736]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d00c      	beq.n	80027fa <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027e0:	4bb5      	ldr	r3, [pc, #724]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d14f      	bne.n	800288c <HAL_RCC_OscConfig+0xd8>
 80027ec:	4bb2      	ldr	r3, [pc, #712]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f8:	d148      	bne.n	800288c <HAL_RCC_OscConfig+0xd8>
 80027fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  return(result);
 800280e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b01      	cmp	r3, #1
 8002824:	d102      	bne.n	800282c <HAL_RCC_OscConfig+0x78>
 8002826:	4ba4      	ldr	r3, [pc, #656]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0x90>
 800282c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002830:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002840:	4b9d      	ldr	r3, [pc, #628]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002848:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800284c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002850:	fa92 f2a2 	rbit	r2, r2
 8002854:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return(result);
 8002858:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800285c:	fab2 f282 	clz	r2, r2
 8002860:	b252      	sxtb	r2, r2
 8002862:	f042 0220 	orr.w	r2, r2, #32
 8002866:	b252      	sxtb	r2, r2
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f002 021f 	and.w	r2, r2, #31
 800286e:	40d3      	lsrs	r3, r2
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80ec 	beq.w	8002a52 <HAL_RCC_OscConfig+0x29e>
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	f040 80e6 	bne.w	8002a52 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	f000 bdab 	b.w	80033e2 <HAL_RCC_OscConfig+0xc2e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002896:	d106      	bne.n	80028a6 <HAL_RCC_OscConfig+0xf2>
 8002898:	4a87      	ldr	r2, [pc, #540]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 800289a:	4b87      	ldr	r3, [pc, #540]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	e030      	b.n	8002908 <HAL_RCC_OscConfig+0x154>
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10c      	bne.n	80028ca <HAL_RCC_OscConfig+0x116>
 80028b0:	4a81      	ldr	r2, [pc, #516]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 80028b2:	4b81      	ldr	r3, [pc, #516]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	4a7e      	ldr	r2, [pc, #504]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 80028be:	4b7e      	ldr	r3, [pc, #504]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	e01e      	b.n	8002908 <HAL_RCC_OscConfig+0x154>
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x13c>
 80028d6:	4a78      	ldr	r2, [pc, #480]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 80028d8:	4b77      	ldr	r3, [pc, #476]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4a75      	ldr	r2, [pc, #468]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 80028e4:	4b74      	ldr	r3, [pc, #464]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e00b      	b.n	8002908 <HAL_RCC_OscConfig+0x154>
 80028f0:	4a71      	ldr	r2, [pc, #452]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 80028f2:	4b71      	ldr	r3, [pc, #452]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4a6e      	ldr	r2, [pc, #440]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 80028fe:	4b6e      	ldr	r3, [pc, #440]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002906:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002908:	1d3b      	adds	r3, r7, #4
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d04f      	beq.n	80029b2 <HAL_RCC_OscConfig+0x1fe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002912:	f7fe fcdb 	bl	80012cc <HAL_GetTick>
 8002916:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	e00a      	b.n	8002932 <HAL_RCC_OscConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800291c:	f7fe fcd6 	bl	80012cc <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b64      	cmp	r3, #100	; 0x64
 800292a:	d902      	bls.n	8002932 <HAL_RCC_OscConfig+0x17e>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	f000 bd58 	b.w	80033e2 <HAL_RCC_OscConfig+0xc2e>
 8002932:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002936:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  return(result);
 8002946:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d102      	bne.n	8002964 <HAL_RCC_OscConfig+0x1b0>
 800295e:	4b56      	ldr	r3, [pc, #344]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	e00b      	b.n	800297c <HAL_RCC_OscConfig+0x1c8>
 8002964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002968:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002978:	4b4f      	ldr	r3, [pc, #316]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002980:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8002984:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002988:	fa92 f2a2 	rbit	r2, r2
 800298c:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
  return(result);
 8002990:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002994:	fab2 f282 	clz	r2, r2
 8002998:	b252      	sxtb	r2, r2
 800299a:	f042 0220 	orr.w	r2, r2, #32
 800299e:	b252      	sxtb	r2, r2
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	f002 021f 	and.w	r2, r2, #31
 80029a6:	40d3      	lsrs	r3, r2
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0b5      	beq.n	800291c <HAL_RCC_OscConfig+0x168>
 80029b0:	e050      	b.n	8002a54 <HAL_RCC_OscConfig+0x2a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7fe fc8b 	bl	80012cc <HAL_GetTick>
 80029b6:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_OscConfig+0x21e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029bc:	f7fe fc86 	bl	80012cc <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b64      	cmp	r3, #100	; 0x64
 80029ca:	d902      	bls.n	80029d2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	f000 bd08 	b.w	80033e2 <HAL_RCC_OscConfig+0xc2e>
 80029d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  return(result);
 80029e6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d102      	bne.n	8002a04 <HAL_RCC_OscConfig+0x250>
 80029fe:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	e00b      	b.n	8002a1c <HAL_RCC_OscConfig+0x268>
 8002a04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a08:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a18:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a20:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a24:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a28:	fa92 f2a2 	rbit	r2, r2
 8002a2c:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return(result);
 8002a30:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a34:	fab2 f282 	clz	r2, r2
 8002a38:	b252      	sxtb	r2, r2
 8002a3a:	f042 0220 	orr.w	r2, r2, #32
 8002a3e:	b252      	sxtb	r2, r2
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	f002 021f 	and.w	r2, r2, #31
 8002a46:	40d3      	lsrs	r3, r2
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1b5      	bne.n	80029bc <HAL_RCC_OscConfig+0x208>
 8002a50:	e000      	b.n	8002a54 <HAL_RCC_OscConfig+0x2a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a54:	1d3b      	adds	r3, r7, #4
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8152 	beq.w	8002d08 <HAL_RCC_OscConfig+0x554>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00b      	beq.n	8002a88 <HAL_RCC_OscConfig+0x2d4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d165      	bne.n	8002b48 <HAL_RCC_OscConfig+0x394>
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d15f      	bne.n	8002b48 <HAL_RCC_OscConfig+0x394>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  return(result);
 8002a9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d104      	bne.n	8002abc <HAL_RCC_OscConfig+0x308>
 8002ab2:	4b01      	ldr	r3, [pc, #4]	; (8002ab8 <HAL_RCC_OscConfig+0x304>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	e00c      	b.n	8002ad2 <HAL_RCC_OscConfig+0x31e>
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	2302      	movs	r3, #2
 8002abe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002ace:	4bd1      	ldr	r3, [pc, #836]	; (8002e14 <HAL_RCC_OscConfig+0x660>)
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8002ad8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8002adc:	fa92 f2a2 	rbit	r2, r2
 8002ae0:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
  return(result);
 8002ae4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002ae8:	fab2 f282 	clz	r2, r2
 8002aec:	b252      	sxtb	r2, r2
 8002aee:	f042 0220 	orr.w	r2, r2, #32
 8002af2:	b252      	sxtb	r2, r2
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	f002 021f 	and.w	r2, r2, #31
 8002afa:	40d3      	lsrs	r3, r2
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <HAL_RCC_OscConfig+0x360>
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d002      	beq.n	8002b14 <HAL_RCC_OscConfig+0x360>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f000 bc67 	b.w	80033e2 <HAL_RCC_OscConfig+0xc2e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b14:	48bf      	ldr	r0, [pc, #764]	; (8002e14 <HAL_RCC_OscConfig+0x660>)
 8002b16:	4bbf      	ldr	r3, [pc, #764]	; (8002e14 <HAL_RCC_OscConfig+0x660>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6959      	ldr	r1, [r3, #20]
 8002b24:	23f8      	movs	r3, #248	; 0xf8
 8002b26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  return(result);
 8002b36:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b42:	4313      	orrs	r3, r2
 8002b44:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b46:	e0df      	b.n	8002d08 <HAL_RCC_OscConfig+0x554>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b48:	1d3b      	adds	r3, r7, #4
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d07a      	beq.n	8002c48 <HAL_RCC_OscConfig+0x494>
 8002b52:	2301      	movs	r3, #1
 8002b54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  return(result);
 8002b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002b72:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002b76:	461a      	mov	r2, r3
 8002b78:	2301      	movs	r3, #1
 8002b7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fba6 	bl	80012cc <HAL_GetTick>
 8002b80:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x3e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b86:	f7fe fba1 	bl	80012cc <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d902      	bls.n	8002b9c <HAL_RCC_OscConfig+0x3e8>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	f000 bc23 	b.w	80033e2 <HAL_RCC_OscConfig+0xc2e>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  return(result);
 8002bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d102      	bne.n	8002bcc <HAL_RCC_OscConfig+0x418>
 8002bc6:	4b93      	ldr	r3, [pc, #588]	; (8002e14 <HAL_RCC_OscConfig+0x660>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	e00a      	b.n	8002be2 <HAL_RCC_OscConfig+0x42e>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002bde:	4b8d      	ldr	r3, [pc, #564]	; (8002e14 <HAL_RCC_OscConfig+0x660>)
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	2202      	movs	r2, #2
 8002be4:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8002be8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002bec:	fa92 f2a2 	rbit	r2, r2
 8002bf0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
  return(result);
 8002bf4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002bf8:	fab2 f282 	clz	r2, r2
 8002bfc:	b252      	sxtb	r2, r2
 8002bfe:	f042 0220 	orr.w	r2, r2, #32
 8002c02:	b252      	sxtb	r2, r2
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	f002 021f 	and.w	r2, r2, #31
 8002c0a:	40d3      	lsrs	r3, r2
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0b8      	beq.n	8002b86 <HAL_RCC_OscConfig+0x3d2>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c14:	487f      	ldr	r0, [pc, #508]	; (8002e14 <HAL_RCC_OscConfig+0x660>)
 8002c16:	4b7f      	ldr	r3, [pc, #508]	; (8002e14 <HAL_RCC_OscConfig+0x660>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6959      	ldr	r1, [r3, #20]
 8002c24:	23f8      	movs	r3, #248	; 0xf8
 8002c26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  return(result);
 8002c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	4313      	orrs	r3, r2
 8002c44:	6003      	str	r3, [r0, #0]
 8002c46:	e05f      	b.n	8002d08 <HAL_RCC_OscConfig+0x554>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  return(result);
 8002c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002c68:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2300      	movs	r3, #0
 8002c70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c72:	f7fe fb2b 	bl	80012cc <HAL_GetTick>
 8002c76:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7a:	e009      	b.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fb26 	bl	80012cc <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e3a8      	b.n	80033e2 <HAL_RCC_OscConfig+0xc2e>
 8002c90:	2302      	movs	r3, #2
 8002c92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  return(result);
 8002ca2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x50c>
 8002cba:	4b56      	ldr	r3, [pc, #344]	; (8002e14 <HAL_RCC_OscConfig+0x660>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x522>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cd2:	4b50      	ldr	r3, [pc, #320]	; (8002e14 <HAL_RCC_OscConfig+0x660>)
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8002cdc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ce0:	fa92 f2a2 	rbit	r2, r2
 8002ce4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
  return(result);
 8002ce8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002cec:	fab2 f282 	clz	r2, r2
 8002cf0:	b252      	sxtb	r2, r2
 8002cf2:	f042 0220 	orr.w	r2, r2, #32
 8002cf6:	b252      	sxtb	r2, r2
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	f002 021f 	and.w	r2, r2, #31
 8002cfe:	40d3      	lsrs	r3, r2
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1b9      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4c8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d08:	1d3b      	adds	r3, r7, #4
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80b0 	beq.w	8002e78 <HAL_RCC_OscConfig+0x6c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d18:	1d3b      	adds	r3, r7, #4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d054      	beq.n	8002dcc <HAL_RCC_OscConfig+0x618>
 8002d22:	2301      	movs	r3, #1
 8002d24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8002d34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <HAL_RCC_OscConfig+0x664>)
 8002d42:	4413      	add	r3, r2
 8002d44:	461a      	mov	r2, r3
 8002d46:	2301      	movs	r3, #1
 8002d48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4a:	f7fe fabf 	bl	80012cc <HAL_GetTick>
 8002d4e:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	e009      	b.n	8002d68 <HAL_RCC_OscConfig+0x5b4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d54:	f7fe faba 	bl	80012cc <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x5b4>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e33c      	b.n	80033e2 <HAL_RCC_OscConfig+0xc2e>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8c:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <HAL_RCC_OscConfig+0x660>)
 8002d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d90:	2302      	movs	r3, #2
 8002d92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return(result);
 8002da2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b25b      	sxtb	r3, r3
 8002dac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002db0:	b25b      	sxtb	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0c7      	beq.n	8002d54 <HAL_RCC_OscConfig+0x5a0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	f7fe fa8b 	bl	80012e0 <HAL_Delay>
 8002dca:	e055      	b.n	8002e78 <HAL_RCC_OscConfig+0x6c4>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 8002dde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_OscConfig+0x664>)
 8002dec:	4413      	add	r3, r2
 8002dee:	461a      	mov	r2, r3
 8002df0:	2300      	movs	r3, #0
 8002df2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df4:	f7fe fa6a 	bl	80012cc <HAL_GetTick>
 8002df8:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	e00e      	b.n	8002e1c <HAL_RCC_OscConfig+0x668>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dfe:	f7fe fa65 	bl	80012cc <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d906      	bls.n	8002e1c <HAL_RCC_OscConfig+0x668>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e2e7      	b.n	80033e2 <HAL_RCC_OscConfig+0xc2e>
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000
 8002e18:	42420480 	.word	0x42420480
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e2e:	2302      	movs	r3, #2
 8002e30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e40:	4bb7      	ldr	r3, [pc, #732]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e44:	2302      	movs	r3, #2
 8002e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 8002e56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b25b      	sxtb	r3, r3
 8002e60:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e64:	b25b      	sxtb	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1c2      	bne.n	8002dfe <HAL_RCC_OscConfig+0x64a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 811a 	beq.w	80030bc <HAL_RCC_OscConfig+0x908>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e88:	4aa5      	ldr	r2, [pc, #660]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002e8a:	4ba5      	ldr	r3, [pc, #660]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e92:	61d3      	str	r3, [r2, #28]
 8002e94:	4ba2      	ldr	r3, [pc, #648]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e9c:	f107 0308 	add.w	r3, r7, #8
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	f107 0308 	add.w	r3, r7, #8
 8002ea6:	681b      	ldr	r3, [r3, #0]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea8:	4a9e      	ldr	r2, [pc, #632]	; (8003124 <HAL_RCC_OscConfig+0x970>)
 8002eaa:	4b9e      	ldr	r3, [pc, #632]	; (8003124 <HAL_RCC_OscConfig+0x970>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb4:	f7fe fa0a 	bl	80012cc <HAL_GetTick>
 8002eb8:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ebc:	e009      	b.n	8002ed2 <HAL_RCC_OscConfig+0x71e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ebe:	f7fe fa05 	bl	80012cc <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x71e>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e287      	b.n	80033e2 <HAL_RCC_OscConfig+0xc2e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ed2:	4b94      	ldr	r3, [pc, #592]	; (8003124 <HAL_RCC_OscConfig+0x970>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0ef      	beq.n	8002ebe <HAL_RCC_OscConfig+0x70a>
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x742>
 8002ee8:	4a8d      	ldr	r2, [pc, #564]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002eea:	4b8d      	ldr	r3, [pc, #564]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6213      	str	r3, [r2, #32]
 8002ef4:	e02f      	b.n	8002f56 <HAL_RCC_OscConfig+0x7a2>
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10c      	bne.n	8002f1a <HAL_RCC_OscConfig+0x766>
 8002f00:	4a87      	ldr	r2, [pc, #540]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002f02:	4b87      	ldr	r3, [pc, #540]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	6213      	str	r3, [r2, #32]
 8002f0c:	4a84      	ldr	r2, [pc, #528]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002f0e:	4b84      	ldr	r3, [pc, #528]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f023 0304 	bic.w	r3, r3, #4
 8002f16:	6213      	str	r3, [r2, #32]
 8002f18:	e01d      	b.n	8002f56 <HAL_RCC_OscConfig+0x7a2>
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	d10c      	bne.n	8002f3e <HAL_RCC_OscConfig+0x78a>
 8002f24:	4a7e      	ldr	r2, [pc, #504]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002f26:	4b7e      	ldr	r3, [pc, #504]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f043 0304 	orr.w	r3, r3, #4
 8002f2e:	6213      	str	r3, [r2, #32]
 8002f30:	4a7b      	ldr	r2, [pc, #492]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002f32:	4b7b      	ldr	r3, [pc, #492]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6213      	str	r3, [r2, #32]
 8002f3c:	e00b      	b.n	8002f56 <HAL_RCC_OscConfig+0x7a2>
 8002f3e:	4a78      	ldr	r2, [pc, #480]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002f40:	4b77      	ldr	r3, [pc, #476]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	6213      	str	r3, [r2, #32]
 8002f4a:	4a75      	ldr	r2, [pc, #468]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002f4c:	4b74      	ldr	r3, [pc, #464]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f023 0304 	bic.w	r3, r3, #4
 8002f54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f56:	1d3b      	adds	r3, r7, #4
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d055      	beq.n	800300c <HAL_RCC_OscConfig+0x858>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f60:	f7fe f9b4 	bl	80012cc <HAL_GetTick>
 8002f64:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f68:	e00b      	b.n	8002f82 <HAL_RCC_OscConfig+0x7ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fe f9af 	bl	80012cc <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x7ce>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e22f      	b.n	80033e2 <HAL_RCC_OscConfig+0xc2e>
 8002f82:	2302      	movs	r3, #2
 8002f84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f94:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f98:	2202      	movs	r2, #2
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	fa93 f2a3 	rbit	r2, r3
 8002fa6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002faa:	601a      	str	r2, [r3, #0]
  return(result);
 8002fac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002fb0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f043 0302 	orr.w	r3, r3, #2
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d102      	bne.n	8002fcc <HAL_RCC_OscConfig+0x818>
 8002fc6:	4b56      	ldr	r3, [pc, #344]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	e001      	b.n	8002fd0 <HAL_RCC_OscConfig+0x81c>
 8002fcc:	4b54      	ldr	r3, [pc, #336]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002fd4:	2102      	movs	r1, #2
 8002fd6:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	fa92 f1a2 	rbit	r1, r2
 8002fe2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002fe6:	6011      	str	r1, [r2, #0]
  return(result);
 8002fe8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	fab2 f282 	clz	r2, r2
 8002ff2:	b252      	sxtb	r2, r2
 8002ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff8:	b252      	sxtb	r2, r2
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	f002 021f 	and.w	r2, r2, #31
 8003000:	40d3      	lsrs	r3, r2
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0af      	beq.n	8002f6a <HAL_RCC_OscConfig+0x7b6>
 800300a:	e057      	b.n	80030bc <HAL_RCC_OscConfig+0x908>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300c:	f7fe f95e 	bl	80012cc <HAL_GetTick>
 8003010:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003014:	e00b      	b.n	800302e <HAL_RCC_OscConfig+0x87a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe f959 	bl	80012cc <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f241 3288 	movw	r2, #5000	; 0x1388
 8003026:	4293      	cmp	r3, r2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x87a>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e1d9      	b.n	80033e2 <HAL_RCC_OscConfig+0xc2e>
 800302e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003032:	2202      	movs	r2, #2
 8003034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fa93 f2a3 	rbit	r2, r3
 8003040:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800304a:	2202      	movs	r2, #2
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	fa93 f2a3 	rbit	r2, r3
 8003058:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800305c:	601a      	str	r2, [r3, #0]
  return(result);
 800305e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003062:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003064:	fab3 f383 	clz	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f043 0302 	orr.w	r3, r3, #2
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d102      	bne.n	800307e <HAL_RCC_OscConfig+0x8ca>
 8003078:	4b29      	ldr	r3, [pc, #164]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	e001      	b.n	8003082 <HAL_RCC_OscConfig+0x8ce>
 800307e:	4b28      	ldr	r3, [pc, #160]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003086:	2102      	movs	r1, #2
 8003088:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	fa92 f1a2 	rbit	r1, r2
 8003094:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003098:	6011      	str	r1, [r2, #0]
  return(result);
 800309a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	fab2 f282 	clz	r2, r2
 80030a4:	b252      	sxtb	r2, r2
 80030a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030aa:	b252      	sxtb	r2, r2
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	f002 021f 	and.w	r2, r2, #31
 80030b2:	40d3      	lsrs	r3, r2
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1ac      	bne.n	8003016 <HAL_RCC_OscConfig+0x862>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030bc:	1d3b      	adds	r3, r7, #4
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 818c 	beq.w	80033e0 <HAL_RCC_OscConfig+0xc2c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c8:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_RCC_OscConfig+0x96c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	f000 8183 	beq.w	80033dc <HAL_RCC_OscConfig+0xc28>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	f040 8109 	bne.w	80032f4 <HAL_RCC_OscConfig+0xb40>
 80030e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	fa93 f2a3 	rbit	r2, r3
 80030f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80030fa:	601a      	str	r2, [r3, #0]
  return(result);
 80030fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003100:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800310c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8003110:	461a      	mov	r2, r3
 8003112:	2300      	movs	r3, #0
 8003114:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fe f8d9 	bl	80012cc <HAL_GetTick>
 800311a:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311e:	e00d      	b.n	800313c <HAL_RCC_OscConfig+0x988>
 8003120:	40021000 	.word	0x40021000
 8003124:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003128:	f7fe f8d0 	bl	80012cc <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x988>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e152      	b.n	80033e2 <HAL_RCC_OscConfig+0xc2e>
 800313c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003140:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003144:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	fa93 f2a3 	rbit	r2, r3
 8003150:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003154:	601a      	str	r2, [r3, #0]
  return(result);
 8003156:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800315a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b01      	cmp	r3, #1
 800316e:	d102      	bne.n	8003176 <HAL_RCC_OscConfig+0x9c2>
 8003170:	4b9e      	ldr	r3, [pc, #632]	; (80033ec <HAL_RCC_OscConfig+0xc38>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	e00e      	b.n	8003194 <HAL_RCC_OscConfig+0x9e0>
 8003176:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800317a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800317e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	fa93 f2a3 	rbit	r2, r3
 800318a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	4b96      	ldr	r3, [pc, #600]	; (80033ec <HAL_RCC_OscConfig+0xc38>)
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003198:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800319c:	6011      	str	r1, [r2, #0]
 800319e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	fa92 f1a2 	rbit	r1, r2
 80031a8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80031ac:	6011      	str	r1, [r2, #0]
  return(result);
 80031ae:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	fab2 f282 	clz	r2, r2
 80031b8:	b252      	sxtb	r2, r2
 80031ba:	f042 0220 	orr.w	r2, r2, #32
 80031be:	b252      	sxtb	r2, r2
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	f002 021f 	and.w	r2, r2, #31
 80031c6:	40d3      	lsrs	r3, r2
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1ab      	bne.n	8003128 <HAL_RCC_OscConfig+0x974>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031da:	d109      	bne.n	80031f0 <HAL_RCC_OscConfig+0xa3c>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031dc:	4983      	ldr	r1, [pc, #524]	; (80033ec <HAL_RCC_OscConfig+0xc38>)
 80031de:	4b83      	ldr	r3, [pc, #524]	; (80033ec <HAL_RCC_OscConfig+0xc38>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031e6:	1d3b      	adds	r3, r7, #4
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031f0:	487e      	ldr	r0, [pc, #504]	; (80033ec <HAL_RCC_OscConfig+0xc38>)
 80031f2:	4b7e      	ldr	r3, [pc, #504]	; (80033ec <HAL_RCC_OscConfig+0xc38>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031fa:	1d3b      	adds	r3, r7, #4
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6a19      	ldr	r1, [r3, #32]
 8003200:	1d3b      	adds	r3, r7, #4
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	430b      	orrs	r3, r1
 8003208:	4313      	orrs	r3, r2
 800320a:	6043      	str	r3, [r0, #4]
 800320c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003210:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	fa93 f2a3 	rbit	r2, r3
 8003220:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003224:	601a      	str	r2, [r3, #0]
  return(result);
 8003226:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800322a:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8003236:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800323a:	461a      	mov	r2, r3
 800323c:	2301      	movs	r3, #1
 800323e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7fe f844 	bl	80012cc <HAL_GetTick>
 8003244:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003248:	e009      	b.n	800325e <HAL_RCC_OscConfig+0xaaa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800324a:	f7fe f83f 	bl	80012cc <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0xaaa>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e0c1      	b.n	80033e2 <HAL_RCC_OscConfig+0xc2e>
 800325e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003262:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003266:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003268:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	fa93 f2a3 	rbit	r2, r3
 8003272:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003276:	601a      	str	r2, [r3, #0]
  return(result);
 8003278:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800327c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d102      	bne.n	8003298 <HAL_RCC_OscConfig+0xae4>
 8003292:	4b56      	ldr	r3, [pc, #344]	; (80033ec <HAL_RCC_OscConfig+0xc38>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	e00e      	b.n	80032b6 <HAL_RCC_OscConfig+0xb02>
 8003298:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800329c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	fa93 f2a3 	rbit	r2, r3
 80032ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	4b4e      	ldr	r3, [pc, #312]	; (80033ec <HAL_RCC_OscConfig+0xc38>)
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80032ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032be:	6011      	str	r1, [r2, #0]
 80032c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	fa92 f1a2 	rbit	r1, r2
 80032ca:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80032ce:	6011      	str	r1, [r2, #0]
  return(result);
 80032d0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	fab2 f282 	clz	r2, r2
 80032da:	b252      	sxtb	r2, r2
 80032dc:	f042 0220 	orr.w	r2, r2, #32
 80032e0:	b252      	sxtb	r2, r2
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	f002 021f 	and.w	r2, r2, #31
 80032e8:	40d3      	lsrs	r3, r2
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0ab      	beq.n	800324a <HAL_RCC_OscConfig+0xa96>
 80032f2:	e075      	b.n	80033e0 <HAL_RCC_OscConfig+0xc2c>
 80032f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	fa93 f2a3 	rbit	r2, r3
 8003308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800330c:	601a      	str	r2, [r3, #0]
  return(result);
 800330e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003312:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800331e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8003322:	461a      	mov	r2, r3
 8003324:	2300      	movs	r3, #0
 8003326:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003328:	f7fd ffd0 	bl	80012cc <HAL_GetTick>
 800332c:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003330:	e009      	b.n	8003346 <HAL_RCC_OscConfig+0xb92>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003332:	f7fd ffcb 	bl	80012cc <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0xb92>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e04d      	b.n	80033e2 <HAL_RCC_OscConfig+0xc2e>
 8003346:	f107 0320 	add.w	r3, r7, #32
 800334a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800334e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003350:	f107 0320 	add.w	r3, r7, #32
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	fa93 f2a3 	rbit	r2, r3
 800335a:	f107 031c 	add.w	r3, r7, #28
 800335e:	601a      	str	r2, [r3, #0]
  return(result);
 8003360:	f107 031c 	add.w	r3, r7, #28
 8003364:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d102      	bne.n	8003380 <HAL_RCC_OscConfig+0xbcc>
 800337a:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <HAL_RCC_OscConfig+0xc38>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	e00e      	b.n	800339e <HAL_RCC_OscConfig+0xbea>
 8003380:	f107 0318 	add.w	r3, r7, #24
 8003384:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	f107 0318 	add.w	r3, r7, #24
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	fa93 f2a3 	rbit	r2, r3
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	4b14      	ldr	r3, [pc, #80]	; (80033ec <HAL_RCC_OscConfig+0xc38>)
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	f107 0210 	add.w	r2, r7, #16
 80033a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033a6:	6011      	str	r1, [r2, #0]
 80033a8:	f107 0210 	add.w	r2, r7, #16
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	fa92 f1a2 	rbit	r1, r2
 80033b2:	f107 020c 	add.w	r2, r7, #12
 80033b6:	6011      	str	r1, [r2, #0]
  return(result);
 80033b8:	f107 020c 	add.w	r2, r7, #12
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	fab2 f282 	clz	r2, r2
 80033c2:	b252      	sxtb	r2, r2
 80033c4:	f042 0220 	orr.w	r2, r2, #32
 80033c8:	b252      	sxtb	r2, r2
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	f002 021f 	and.w	r2, r2, #31
 80033d0:	40d3      	lsrs	r3, r2
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1ab      	bne.n	8003332 <HAL_RCC_OscConfig+0xb7e>
 80033da:	e001      	b.n	80033e0 <HAL_RCC_OscConfig+0xc2c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <HAL_RCC_OscConfig+0xc2e>
    }
  }
  
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40021000 	.word	0x40021000

080033f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b098      	sub	sp, #96	; 0x60
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80033fe:	4b9c      	ldr	r3, [pc, #624]	; (8003670 <HAL_RCC_ClockConfig+0x280>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0207 	and.w	r2, r3, #7
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d210      	bcs.n	800342e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340c:	4998      	ldr	r1, [pc, #608]	; (8003670 <HAL_RCC_ClockConfig+0x280>)
 800340e:	4b98      	ldr	r3, [pc, #608]	; (8003670 <HAL_RCC_ClockConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 0207 	bic.w	r2, r3, #7
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	4313      	orrs	r3, r2
 800341a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800341c:	4b94      	ldr	r3, [pc, #592]	; (8003670 <HAL_RCC_ClockConfig+0x280>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0207 	and.w	r2, r3, #7
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d001      	beq.n	800342e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e15f      	b.n	80036ee <HAL_RCC_ClockConfig+0x2fe>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800343a:	498e      	ldr	r1, [pc, #568]	; (8003674 <HAL_RCC_ClockConfig+0x284>)
 800343c:	4b8d      	ldr	r3, [pc, #564]	; (8003674 <HAL_RCC_ClockConfig+0x284>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80f2 	beq.w	800363e <HAL_RCC_ClockConfig+0x24e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d135      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
 8003462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003466:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d102      	bne.n	800348c <HAL_RCC_ClockConfig+0x9c>
 8003486:	4b7b      	ldr	r3, [pc, #492]	; (8003674 <HAL_RCC_ClockConfig+0x284>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	e008      	b.n	800349e <HAL_RCC_ClockConfig+0xae>
 800348c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003490:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	64fb      	str	r3, [r7, #76]	; 0x4c
 800349a:	4b76      	ldr	r3, [pc, #472]	; (8003674 <HAL_RCC_ClockConfig+0x284>)
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80034a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034a6:	fa92 f2a2 	rbit	r2, r2
 80034aa:	647a      	str	r2, [r7, #68]	; 0x44
  return(result);
 80034ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034ae:	fab2 f282 	clz	r2, r2
 80034b2:	b252      	sxtb	r2, r2
 80034b4:	f042 0220 	orr.w	r2, r2, #32
 80034b8:	b252      	sxtb	r2, r2
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	f002 021f 	and.w	r2, r2, #31
 80034c0:	40d3      	lsrs	r3, r2
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d16e      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x1b8>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e10f      	b.n	80036ee <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d135      	bne.n	8003542 <HAL_RCC_ClockConfig+0x152>
 80034d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034da:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80034e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e6:	fab3 f383 	clz	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	095b      	lsrs	r3, r3, #5
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d102      	bne.n	8003500 <HAL_RCC_ClockConfig+0x110>
 80034fa:	4b5e      	ldr	r3, [pc, #376]	; (8003674 <HAL_RCC_ClockConfig+0x284>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	e008      	b.n	8003512 <HAL_RCC_ClockConfig+0x122>
 8003500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003504:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003508:	fa93 f3a3 	rbit	r3, r3
 800350c:	637b      	str	r3, [r7, #52]	; 0x34
 800350e:	4b59      	ldr	r3, [pc, #356]	; (8003674 <HAL_RCC_ClockConfig+0x284>)
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003516:	633a      	str	r2, [r7, #48]	; 0x30
 8003518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800351a:	fa92 f2a2 	rbit	r2, r2
 800351e:	62fa      	str	r2, [r7, #44]	; 0x2c
  return(result);
 8003520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003522:	fab2 f282 	clz	r2, r2
 8003526:	b252      	sxtb	r2, r2
 8003528:	f042 0220 	orr.w	r2, r2, #32
 800352c:	b252      	sxtb	r2, r2
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	f002 021f 	and.w	r2, r2, #31
 8003534:	40d3      	lsrs	r3, r2
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d134      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x1b8>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0d5      	b.n	80036ee <HAL_RCC_ClockConfig+0x2fe>
 8003542:	2302      	movs	r3, #2
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003550:	fab3 f383 	clz	r3, r3
 8003554:	b2db      	uxtb	r3, r3
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	d102      	bne.n	800356a <HAL_RCC_ClockConfig+0x17a>
 8003564:	4b43      	ldr	r3, [pc, #268]	; (8003674 <HAL_RCC_ClockConfig+0x284>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	e007      	b.n	800357a <HAL_RCC_ClockConfig+0x18a>
 800356a:	2302      	movs	r3, #2
 800356c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	fa93 f3a3 	rbit	r3, r3
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	4b3f      	ldr	r3, [pc, #252]	; (8003674 <HAL_RCC_ClockConfig+0x284>)
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	2202      	movs	r2, #2
 800357c:	61ba      	str	r2, [r7, #24]
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	fa92 f2a2 	rbit	r2, r2
 8003584:	617a      	str	r2, [r7, #20]
  return(result);
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	fab2 f282 	clz	r2, r2
 800358c:	b252      	sxtb	r2, r2
 800358e:	f042 0220 	orr.w	r2, r2, #32
 8003592:	b252      	sxtb	r2, r2
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	f002 021f 	and.w	r2, r2, #31
 800359a:	40d3      	lsrs	r3, r2
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x1b8>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0a2      	b.n	80036ee <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a8:	4932      	ldr	r1, [pc, #200]	; (8003674 <HAL_RCC_ClockConfig+0x284>)
 80035aa:	4b32      	ldr	r3, [pc, #200]	; (8003674 <HAL_RCC_ClockConfig+0x284>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f023 0203 	bic.w	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ba:	f7fd fe87 	bl	80012cc <HAL_GetTick>
 80035be:	65f8      	str	r0, [r7, #92]	; 0x5c
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d112      	bne.n	80035ee <HAL_RCC_ClockConfig+0x1fe>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035c8:	e00a      	b.n	80035e0 <HAL_RCC_ClockConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ca:	f7fd fe7f 	bl	80012cc <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d8:	4293      	cmp	r3, r2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_ClockConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e086      	b.n	80036ee <HAL_RCC_ClockConfig+0x2fe>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e0:	4b24      	ldr	r3, [pc, #144]	; (8003674 <HAL_RCC_ClockConfig+0x284>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d1ee      	bne.n	80035ca <HAL_RCC_ClockConfig+0x1da>
 80035ec:	e027      	b.n	800363e <HAL_RCC_ClockConfig+0x24e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d11d      	bne.n	8003632 <HAL_RCC_ClockConfig+0x242>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_ClockConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f8:	f7fd fe68 	bl	80012cc <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_ClockConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e06f      	b.n	80036ee <HAL_RCC_ClockConfig+0x2fe>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800360e:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCC_ClockConfig+0x284>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b08      	cmp	r3, #8
 8003618:	d1ee      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x208>
 800361a:	e010      	b.n	800363e <HAL_RCC_ClockConfig+0x24e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800361c:	f7fd fe56 	bl	80012cc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	; 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_ClockConfig+0x242>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e05d      	b.n	80036ee <HAL_RCC_ClockConfig+0x2fe>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_RCC_ClockConfig+0x284>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ee      	bne.n	800361c <HAL_RCC_ClockConfig+0x22c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <HAL_RCC_ClockConfig+0x280>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0207 	and.w	r2, r3, #7
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d915      	bls.n	8003678 <HAL_RCC_ClockConfig+0x288>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364c:	4908      	ldr	r1, [pc, #32]	; (8003670 <HAL_RCC_ClockConfig+0x280>)
 800364e:	4b08      	ldr	r3, [pc, #32]	; (8003670 <HAL_RCC_ClockConfig+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 0207 	bic.w	r2, r3, #7
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	4313      	orrs	r3, r2
 800365a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <HAL_RCC_ClockConfig+0x280>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0207 	and.w	r2, r3, #7
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d006      	beq.n	8003678 <HAL_RCC_ClockConfig+0x288>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e03f      	b.n	80036ee <HAL_RCC_ClockConfig+0x2fe>
 800366e:	bf00      	nop
 8003670:	40022000 	.word	0x40022000
 8003674:	40021000 	.word	0x40021000
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCC_ClockConfig+0x2a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003684:	491c      	ldr	r1, [pc, #112]	; (80036f8 <HAL_RCC_ClockConfig+0x308>)
 8003686:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <HAL_RCC_ClockConfig+0x308>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x2c6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036a2:	4915      	ldr	r1, [pc, #84]	; (80036f8 <HAL_RCC_ClockConfig+0x308>)
 80036a4:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <HAL_RCC_ClockConfig+0x308>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036b6:	f000 f825 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 80036ba:	4601      	mov	r1, r0
 80036bc:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <HAL_RCC_ClockConfig+0x308>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036c4:	23f0      	movs	r3, #240	; 0xf0
 80036c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	fa22 f303 	lsr.w	r3, r2, r3
 80036da:	4a08      	ldr	r2, [pc, #32]	; (80036fc <HAL_RCC_ClockConfig+0x30c>)
 80036dc:	5cd3      	ldrb	r3, [r2, r3]
 80036de:	fa21 f303 	lsr.w	r3, r1, r3
 80036e2:	4a07      	ldr	r2, [pc, #28]	; (8003700 <HAL_RCC_ClockConfig+0x310>)
 80036e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80036e6:	2000      	movs	r0, #0
 80036e8:	f7fd fdc6 	bl	8001278 <HAL_InitTick>
  
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3760      	adds	r7, #96	; 0x60
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000
 80036fc:	080077bc 	.word	0x080077bc
 8003700:	20000000 	.word	0x20000000

08003704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003704:	b490      	push	{r4, r7}
 8003706:	b08e      	sub	sp, #56	; 0x38
 8003708:	af00      	add	r7, sp, #0
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 800370a:	4b35      	ldr	r3, [pc, #212]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xdc>)
 800370c:	1d3c      	adds	r4, r7, #4
 800370e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003710:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8003714:	4b33      	ldr	r3, [pc, #204]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800371e:	2300      	movs	r3, #0
 8003720:	62bb      	str	r3, [r7, #40]	; 0x28
 8003722:	2300      	movs	r3, #0
 8003724:	637b      	str	r3, [r7, #52]	; 0x34
 8003726:	2300      	movs	r3, #0
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 800372e:	4b2e      	ldr	r3, [pc, #184]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xe4>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b04      	cmp	r3, #4
 800373c:	d002      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x40>
 800373e:	2b08      	cmp	r3, #8
 8003740:	d003      	beq.n	800374a <HAL_RCC_GetSysClockFreq+0x46>
 8003742:	e043      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0xc8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003744:	4b29      	ldr	r3, [pc, #164]	; (80037ec <HAL_RCC_GetSysClockFreq+0xe8>)
 8003746:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003748:	e043      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003750:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8003754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	61fb      	str	r3, [r7, #28]
  return(result);
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fab3 f383 	clz	r3, r3
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
 8003768:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800376c:	4413      	add	r3, r2
 800376e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01e      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0xb8>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 800377e:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xe4>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8003786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800378a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	617b      	str	r3, [r7, #20]
  return(result);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	fa22 f303 	lsr.w	r3, r2, r3
 800379e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037a2:	4413      	add	r3, r2
 80037a4:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80037a8:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80037aa:	4a10      	ldr	r2, [pc, #64]	; (80037ec <HAL_RCC_GetSysClockFreq+0xe8>)
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b4:	fb02 f303 	mul.w	r3, r2, r3
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
 80037ba:	e004      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0xc2>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	4a0c      	ldr	r2, [pc, #48]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xec>)
 80037c0:	fb02 f303 	mul.w	r3, r2, r3
 80037c4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80037c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b07      	ldr	r3, [pc, #28]	; (80037ec <HAL_RCC_GetSysClockFreq+0xe8>)
 80037ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3738      	adds	r7, #56	; 0x38
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc90      	pop	{r4, r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	08007760 	.word	0x08007760
 80037e4:	08007770 	.word	0x08007770
 80037e8:	40021000 	.word	0x40021000
 80037ec:	007a1200 	.word	0x007a1200
 80037f0:	003d0900 	.word	0x003d0900

080037f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f8:	4b02      	ldr	r3, [pc, #8]	; (8003804 <HAL_RCC_GetHCLKFreq+0x10>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	20000000 	.word	0x20000000

08003808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800380e:	f7ff fff1 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 8003812:	4601      	mov	r1, r0
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800381c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003820:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	603b      	str	r3, [r7, #0]
  return(result);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	fab3 f383 	clz	r3, r3
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
 8003834:	4a04      	ldr	r2, [pc, #16]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003836:	5cd3      	ldrb	r3, [r2, r3]
 8003838:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	080077cc 	.word	0x080077cc

0800384c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003852:	f7ff ffcf 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 8003856:	4601      	mov	r1, r0
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8003860:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003864:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	603b      	str	r3, [r7, #0]
  return(result);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	fab3 f383 	clz	r3, r3
 8003874:	fa22 f303 	lsr.w	r3, r2, r3
 8003878:	4a04      	ldr	r2, [pc, #16]	; (800388c <HAL_RCC_GetPCLK2Freq+0x40>)
 800387a:	5cd3      	ldrb	r3, [r2, r3]
 800387c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000
 800388c:	080077cc 	.word	0x080077cc

08003890 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b090      	sub	sp, #64	; 0x40
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0, temp_reg = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800389c:	2300      	movs	r3, #0
 800389e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80ac 	beq.w	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	4a67      	ldr	r2, [pc, #412]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038b0:	4b66      	ldr	r3, [pc, #408]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b8:	61d3      	str	r3, [r2, #28]
 80038ba:	4b64      	ldr	r3, [pc, #400]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80038c6:	4a62      	ldr	r2, [pc, #392]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038c8:	4b61      	ldr	r3, [pc, #388]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d0:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038d2:	f7fd fcfb 	bl	80012cc <HAL_GetTick>
 80038d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038d8:	e008      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038da:	f7fd fcf7 	bl	80012cc <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b64      	cmp	r3, #100	; 0x64
 80038e6:	d901      	bls.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
      {
        return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e0ab      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038ec:	4b58      	ldr	r3, [pc, #352]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0f0      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4a>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038f8:	4b54      	ldr	r3, [pc, #336]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003900:	63bb      	str	r3, [r7, #56]	; 0x38
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003904:	2b00      	cmp	r3, #0
 8003906:	d075      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003912:	429a      	cmp	r2, r3
 8003914:	d06e      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003916:	4b4d      	ldr	r3, [pc, #308]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003928:	fa93 f3a3 	rbit	r3, r3
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003930:	fab3 f383 	clz	r3, r3
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	461a      	mov	r2, r3
 8003938:	4b46      	ldr	r3, [pc, #280]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800393a:	4413      	add	r3, r2
 800393c:	461a      	mov	r2, r3
 800393e:	2301      	movs	r3, #1
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003946:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394a:	fa93 f3a3 	rbit	r3, r3
 800394e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003952:	fab3 f383 	clz	r3, r3
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	461a      	mov	r2, r3
 800395a:	4b3e      	ldr	r3, [pc, #248]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800395c:	4413      	add	r3, r2
 800395e:	461a      	mov	r2, r3
 8003960:	2300      	movs	r3, #0
 8003962:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003964:	4a39      	ldr	r2, [pc, #228]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003968:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d03f      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 8003974:	f7fd fcaa 	bl	80012cc <HAL_GetTick>
 8003978:	63f8      	str	r0, [r7, #60]	; 0x3c
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397a:	e00a      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x102>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397c:	f7fd fca6 	bl	80012cc <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	; 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x102>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e058      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003992:	2302      	movs	r3, #2
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	623b      	str	r3, [r7, #32]
 800399e:	2302      	movs	r3, #2
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	fa93 f3a3 	rbit	r3, r3
 80039a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80039aa:	69bb      	ldr	r3, [r7, #24]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f043 0302 	orr.w	r3, r3, #2
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d102      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80039c0:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	e001      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x13a>
 80039c6:	4b21      	ldr	r3, [pc, #132]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	2202      	movs	r2, #2
 80039cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	fa92 f2a2 	rbit	r2, r2
 80039d4:	613a      	str	r2, [r7, #16]
  return(result);
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	fab2 f282 	clz	r2, r2
 80039dc:	b252      	sxtb	r2, r2
 80039de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039e2:	b252      	sxtb	r2, r2
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	f002 021f 	and.w	r2, r2, #31
 80039ea:	40d3      	lsrs	r3, r2
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0c3      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xec>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039f4:	4915      	ldr	r1, [pc, #84]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039f6:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	620b      	str	r3, [r1, #32]
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a12:	490e      	ldr	r1, [pc, #56]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a14:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a30:	4906      	ldr	r1, [pc, #24]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3740      	adds	r7, #64	; 0x40
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	40007000 	.word	0x40007000
 8003a54:	42420400 	.word	0x42420400

08003a58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b093      	sub	sp, #76	; 0x4c
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 || defined(STM32F105xC) || defined(STM32F107xC)
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a60:	4b67      	ldr	r3, [pc, #412]	; (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8003a62:	f107 040c 	add.w	r4, r7, #12
 8003a66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8003a6c:	4b65      	ldr	r3, [pc, #404]	; (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	813b      	strh	r3, [r7, #8]
#endif
#endif
  uint32_t temp_reg = 0, frequency = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a76:	2300      	movs	r3, #0
 8003a78:	647b      	str	r3, [r7, #68]	; 0x44
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t prediv1 = 0, pllclk = 0, pllmul = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a7e:	2300      	movs	r3, #0
 8003a80:	643b      	str	r3, [r7, #64]	; 0x40
 8003a82:	2300      	movs	r3, #0
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	f000 809a 	beq.w	8003bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d002      	beq.n	8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d05f      	beq.n	8003b56 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
      break;
    }
  default: 
    {
      break;
 8003a96:	e0ae      	b.n	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
      temp_reg = RCC->CFGR;
 8003a98:	4b5b      	ldr	r3, [pc, #364]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8003a9e:	4b5a      	ldr	r3, [pc, #360]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 80a4 	beq.w	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8003aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ab2:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8003ab6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	fa93 f3a3 	rbit	r3, r3
 8003abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ace:	4413      	add	r3, r2
 8003ad0:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003ad4:	637b      	str	r3, [r7, #52]	; 0x34
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d023      	beq.n	8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8003ae0:	4b49      	ldr	r3, [pc, #292]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8003ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	fa93 f3a3 	rbit	r3, r3
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	fab3 f383 	clz	r3, r3
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
 8003b00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b04:	4413      	add	r3, r2
 8003b06:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8003b0a:	63bb      	str	r3, [r7, #56]	; 0x38
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00d      	beq.n	8003b32 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003b16:	4a3d      	ldr	r2, [pc, #244]	; (8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b20:	fb02 f303 	mul.w	r3, r2, r3
 8003b24:	643b      	str	r3, [r7, #64]	; 0x40
 8003b26:	e004      	b.n	8003b32 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2a:	4a39      	ldr	r2, [pc, #228]	; (8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003b2c:	fb02 f303 	mul.w	r3, r2, r3
 8003b30:	643b      	str	r3, [r7, #64]	; 0x40
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003b32:	4b35      	ldr	r3, [pc, #212]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b3e:	d102      	bne.n	8003b46 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          frequency = pllclk;
 8003b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b42:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 8003b44:	e056      	b.n	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
          frequency = (pllclk * 2) / 3;
 8003b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4a32      	ldr	r2, [pc, #200]	; (8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	085b      	lsrs	r3, r3, #1
 8003b52:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 8003b54:	e04e      	b.n	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
      temp_reg = RCC->BDCR;
 8003b56:	4b2c      	ldr	r3, [pc, #176]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b66:	d108      	bne.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8003b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
        frequency = LSE_VALUE;
 8003b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b76:	647b      	str	r3, [r7, #68]	; 0x44
 8003b78:	e022      	b.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b84:	d109      	bne.n	8003b9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8003b86:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        frequency = LSI_VALUE;
 8003b92:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003b96:	647b      	str	r3, [r7, #68]	; 0x44
 8003b98:	e012      	b.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ba4:	d109      	bne.n	8003bba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8003ba6:	4b18      	ldr	r3, [pc, #96]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        frequency = HSE_VALUE / 128;
 8003bb2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb8:	e002      	b.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        frequency = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 8003bbe:	e01a      	b.n	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8003bc0:	e019      	b.n	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
 8003bc2:	f7ff fe43 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8003bc6:	4601      	mov	r1, r0
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8003bd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	fa93 f3a3 	rbit	r3, r3
 8003bdc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
 8003be8:	3301      	adds	r3, #1
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bf0:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
      break;
 8003bf4:	bf00      	nop
    }
  }
  return(frequency);
 8003bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	374c      	adds	r7, #76	; 0x4c
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd90      	pop	{r4, r7, pc}
 8003c00:	08007774 	.word	0x08007774
 8003c04:	08007784 	.word	0x08007784
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	007a1200 	.word	0x007a1200
 8003c10:	003d0900 	.word	0x003d0900
 8003c14:	aaaaaaab 	.word	0xaaaaaaab

08003c18 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e03b      	b.n	8003ca2 <HAL_UART_Init+0x8a>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fd40 	bl	80046c4 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	68d2      	ldr	r2, [r2, #12]
 8003c56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c5a:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f90f 	bl	8003e80 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	6912      	ldr	r2, [r2, #16]
 8003c6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	6952      	ldr	r2, [r2, #20]
 8003c7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c80:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	68d2      	ldr	r2, [r2, #12]
 8003c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c90:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  uint32_t tmp_state = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]

  tmp_state = huart->State;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d002      	beq.n	8003cd4 <HAL_UART_Transmit_DMA+0x28>
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b22      	cmp	r3, #34	; 0x22
 8003cd2:	d15a      	bne.n	8003d8a <HAL_UART_Transmit_DMA+0xde>
  {
    if((pData == NULL ) || (Size == 0)) 
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <HAL_UART_Transmit_DMA+0x34>
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_UART_Transmit_DMA+0x38>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e053      	b.n	8003d8c <HAL_UART_Transmit_DMA+0xe0>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_UART_Transmit_DMA+0x46>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e04c      	b.n	8003d8c <HAL_UART_Transmit_DMA+0xe0>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	88fa      	ldrh	r2, [r7, #6]
 8003d04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	88fa      	ldrh	r2, [r7, #6]
 8003d0a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b22      	cmp	r3, #34	; 0x22
 8003d1c:	d104      	bne.n	8003d28 <HAL_UART_Transmit_DMA+0x7c>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2232      	movs	r2, #50	; 0x32
 8003d22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003d26:	e003      	b.n	8003d30 <HAL_UART_Transmit_DMA+0x84>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2212      	movs	r2, #18
 8003d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d34:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <HAL_UART_Transmit_DMA+0xe8>)
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	4a16      	ldr	r2, [pc, #88]	; (8003d98 <HAL_UART_Transmit_DMA+0xec>)
 8003d3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <HAL_UART_Transmit_DMA+0xf0>)
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
 8003d48:	f107 0308 	add.w	r3, r7, #8
 8003d4c:	613b      	str	r3, [r7, #16]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	6819      	ldr	r1, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	88fb      	ldrh	r3, [r7, #6]
 8003d60:	f7fe f930 	bl	8001fc4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d6c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	6952      	ldr	r2, [r2, #20]
 8003d78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d7c:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	e000      	b.n	8003d8c <HAL_UART_Transmit_DMA+0xe0>
  }
  else
  {
    return HAL_BUSY;
 8003d8a:	2302      	movs	r3, #2
  }
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	08003dd7 	.word	0x08003dd7
 8003d98:	08003e29 	.word	0x08003e29
 8003d9c:	08003e45 	.word	0x08003e45

08003da0 <HAL_UART_TxCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback can be implemented in the user file
   */ 
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr

08003db2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file
   */ 
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_UART_ErrorCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback can be implemented in the user file
   */ 
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr

08003dd6 <UART_DMATransmitCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d113      	bne.n	8003e1a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	6952      	ldr	r2, [r2, #20]
 8003e02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e06:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */    
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	68d2      	ldr	r2, [r2, #12]
 8003e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e16:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 8003e18:	e002      	b.n	8003e20 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f7ff ffc0 	bl	8003da0 <HAL_UART_TxCpltCallback>
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <UART_DMATxHalfCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f7ff ffbb 	bl	8003db2 <HAL_UART_TxHalfCpltCallback>
}
 8003e3c:	bf00      	nop
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <UART_DMAError>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->State= HAL_UART_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	f043 0210 	orr.w	r2, r3, #16
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f7ff ffa6 	bl	8003dc4 <HAL_UART_ErrorCallback>
}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	6912      	ldr	r2, [r2, #16]
 8003e96:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68d2      	ldr	r2, [r2, #12]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	611a      	str	r2, [r3, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ec2:	f023 030c 	bic.w	r3, r3, #12
 8003ec6:	68f9      	ldr	r1, [r7, #12]
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	6952      	ldr	r2, [r2, #20]
 8003ed6:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6992      	ldr	r2, [r2, #24]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	615a      	str	r2, [r3, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a6f      	ldr	r2, [pc, #444]	; (80040a4 <UART_SetConfig+0x224>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d16b      	bne.n	8003fc4 <UART_SetConfig+0x144>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681c      	ldr	r4, [r3, #0]
 8003ef0:	f7ff fcac 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	009a      	lsls	r2, r3, #2
 8003efe:	441a      	add	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	4a67      	ldr	r2, [pc, #412]	; (80040a8 <UART_SetConfig+0x228>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	011d      	lsls	r5, r3, #4
 8003f14:	f7ff fc9a 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	009a      	lsls	r2, r3, #2
 8003f22:	441a      	add	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f2e:	f7ff fc8d 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8003f32:	4602      	mov	r2, r0
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	009a      	lsls	r2, r3, #2
 8003f3c:	441a      	add	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f48:	4a57      	ldr	r2, [pc, #348]	; (80040a8 <UART_SetConfig+0x228>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	2264      	movs	r2, #100	; 0x64
 8003f52:	fb02 f303 	mul.w	r3, r2, r3
 8003f56:	1af3      	subs	r3, r6, r3
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	3332      	adds	r3, #50	; 0x32
 8003f5c:	4a52      	ldr	r2, [pc, #328]	; (80040a8 <UART_SetConfig+0x228>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f68:	441d      	add	r5, r3
 8003f6a:	f7ff fc6f 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4613      	mov	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	009a      	lsls	r2, r3, #2
 8003f78:	441a      	add	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f84:	f7ff fc62 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	009a      	lsls	r2, r3, #2
 8003f92:	441a      	add	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9e:	4a42      	ldr	r2, [pc, #264]	; (80040a8 <UART_SetConfig+0x228>)
 8003fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	2264      	movs	r2, #100	; 0x64
 8003fa8:	fb02 f303 	mul.w	r3, r2, r3
 8003fac:	1af3      	subs	r3, r6, r3
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	3332      	adds	r3, #50	; 0x32
 8003fb2:	4a3d      	ldr	r2, [pc, #244]	; (80040a8 <UART_SetConfig+0x228>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	442b      	add	r3, r5
 8003fc0:	60a3      	str	r3, [r4, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
}
 8003fc2:	e06a      	b.n	800409a <UART_SetConfig+0x21a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681c      	ldr	r4, [r3, #0]
 8003fc8:	f7ff fc1e 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4613      	mov	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009a      	lsls	r2, r3, #2
 8003fd6:	441a      	add	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe2:	4a31      	ldr	r2, [pc, #196]	; (80040a8 <UART_SetConfig+0x228>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	011d      	lsls	r5, r3, #4
 8003fec:	f7ff fc0c 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009a      	lsls	r2, r3, #2
 8003ffa:	441a      	add	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	fbb2 f6f3 	udiv	r6, r2, r3
 8004006:	f7ff fbff 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 800400a:	4602      	mov	r2, r0
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009a      	lsls	r2, r3, #2
 8004014:	441a      	add	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004020:	4a21      	ldr	r2, [pc, #132]	; (80040a8 <UART_SetConfig+0x228>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	2264      	movs	r2, #100	; 0x64
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	1af3      	subs	r3, r6, r3
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	3332      	adds	r3, #50	; 0x32
 8004034:	4a1c      	ldr	r2, [pc, #112]	; (80040a8 <UART_SetConfig+0x228>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004040:	441d      	add	r5, r3
 8004042:	f7ff fbe1 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8004046:	4602      	mov	r2, r0
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	009a      	lsls	r2, r3, #2
 8004050:	441a      	add	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	fbb2 f6f3 	udiv	r6, r2, r3
 800405c:	f7ff fbd4 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8004060:	4602      	mov	r2, r0
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	009a      	lsls	r2, r3, #2
 800406a:	441a      	add	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	4a0c      	ldr	r2, [pc, #48]	; (80040a8 <UART_SetConfig+0x228>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	2264      	movs	r2, #100	; 0x64
 8004080:	fb02 f303 	mul.w	r3, r2, r3
 8004084:	1af3      	subs	r3, r6, r3
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	3332      	adds	r3, #50	; 0x32
 800408a:	4a07      	ldr	r2, [pc, #28]	; (80040a8 <UART_SetConfig+0x228>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	442b      	add	r3, r5
 8004098:	60a3      	str	r3, [r4, #8]
}
 800409a:	bf00      	nop
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40013800 	.word	0x40013800
 80040a8:	51eb851f 	.word	0x51eb851f

080040ac <floatmap>:
float data[2];
int len;

/* USER CODE END 0 */
float floatmap(float x, float inMin, float inMax, float outMin, float outMax)
{
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	603b      	str	r3, [r7, #0]
  return (x-inMin)*(outMax-outMin)/(inMax-inMin)+outMin;
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f7fc fce3 	bl	8000a88 <__aeabi_fsub>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461c      	mov	r4, r3
 80040c6:	6839      	ldr	r1, [r7, #0]
 80040c8:	6a38      	ldr	r0, [r7, #32]
 80040ca:	f7fc fcdd 	bl	8000a88 <__aeabi_fsub>
 80040ce:	4603      	mov	r3, r0
 80040d0:	4619      	mov	r1, r3
 80040d2:	4620      	mov	r0, r4
 80040d4:	f7fc fde2 	bl	8000c9c <__aeabi_fmul>
 80040d8:	4603      	mov	r3, r0
 80040da:	461c      	mov	r4, r3
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fc fcd2 	bl	8000a88 <__aeabi_fsub>
 80040e4:	4603      	mov	r3, r0
 80040e6:	4619      	mov	r1, r3
 80040e8:	4620      	mov	r0, r4
 80040ea:	f7fc fe8b 	bl	8000e04 <__aeabi_fdiv>
 80040ee:	4603      	mov	r3, r0
 80040f0:	6839      	ldr	r1, [r7, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fc fcca 	bl	8000a8c <__addsf3>
 80040f8:	4603      	mov	r3, r0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd90      	pop	{r4, r7, pc}
	...

08004104 <main>:

int main(void)
{
 8004104:	b590      	push	{r4, r7, lr}
 8004106:	b083      	sub	sp, #12
 8004108:	af02      	add	r7, sp, #8
	currentline = RcvData;
 800410a:	4b40      	ldr	r3, [pc, #256]	; (800420c <main+0x108>)
 800410c:	4a40      	ldr	r2, [pc, #256]	; (8004210 <main+0x10c>)
 800410e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004110:	f7fd f89c 	bl	800124c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004114:	f000 f890 	bl	8004238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004118:	f000 f9c2 	bl	80044a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800411c:	f000 f99a 	bl	8004454 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004120:	f000 f96a 	bl	80043f8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8004124:	f000 f93a 	bl	800439c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8004128:	f000 f8e6 	bl	80042f8 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_ADC_Start_DMA(&hadc1, ADCvalue, 2);
 800412c:	2202      	movs	r2, #2
 800412e:	4939      	ldr	r1, [pc, #228]	; (8004214 <main+0x110>)
 8004130:	4839      	ldr	r0, [pc, #228]	; (8004218 <main+0x114>)
 8004132:	f7fd f9e9 	bl	8001508 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc1);
 8004136:	4838      	ldr	r0, [pc, #224]	; (8004218 <main+0x114>)
 8004138:	f7fd fd2e 	bl	8001b98 <HAL_ADCEx_Calibration_Start>
	/* USER CODE END WHILE */
	data[0] = floatmap(ADCvalue[0], 0, 4095, 0, 3.3);
 800413c:	4b35      	ldr	r3, [pc, #212]	; (8004214 <main+0x110>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f7fc fd53 	bl	8000bec <__aeabi_ui2f>
 8004146:	4b35      	ldr	r3, [pc, #212]	; (800421c <main+0x118>)
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	4a34      	ldr	r2, [pc, #208]	; (8004220 <main+0x11c>)
 8004150:	f04f 0100 	mov.w	r1, #0
 8004154:	f7ff ffaa 	bl	80040ac <floatmap>
 8004158:	4602      	mov	r2, r0
 800415a:	4b32      	ldr	r3, [pc, #200]	; (8004224 <main+0x120>)
 800415c:	601a      	str	r2, [r3, #0]
	sprintf(currentline, "s%f", data[0]);
 800415e:	4b2b      	ldr	r3, [pc, #172]	; (800420c <main+0x108>)
 8004160:	681c      	ldr	r4, [r3, #0]
 8004162:	4b30      	ldr	r3, [pc, #192]	; (8004224 <main+0x120>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f7fc f95e 	bl	8000428 <__aeabi_f2d>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	492d      	ldr	r1, [pc, #180]	; (8004228 <main+0x124>)
 8004172:	4620      	mov	r0, r4
 8004174:	f000 fbdc 	bl	8004930 <sprintf>
	len = strlen(currentline);
 8004178:	4b24      	ldr	r3, [pc, #144]	; (800420c <main+0x108>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7fb ffe7 	bl	8000150 <strlen>
 8004182:	4603      	mov	r3, r0
 8004184:	461a      	mov	r2, r3
 8004186:	4b29      	ldr	r3, [pc, #164]	; (800422c <main+0x128>)
 8004188:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, currentline, len);
 800418a:	4b20      	ldr	r3, [pc, #128]	; (800420c <main+0x108>)
 800418c:	6819      	ldr	r1, [r3, #0]
 800418e:	4b27      	ldr	r3, [pc, #156]	; (800422c <main+0x128>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	4826      	ldr	r0, [pc, #152]	; (8004230 <main+0x12c>)
 8004198:	f7ff fd88 	bl	8003cac <HAL_UART_Transmit_DMA>
	HAL_Delay(20);
 800419c:	2014      	movs	r0, #20
 800419e:	f7fd f89f 	bl	80012e0 <HAL_Delay>

	data[1] = floatmap(ADCvalue[1], 0, 4095, 0, 3.3);
 80041a2:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <main+0x110>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fc fd20 	bl	8000bec <__aeabi_ui2f>
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <main+0x118>)
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	4a1a      	ldr	r2, [pc, #104]	; (8004220 <main+0x11c>)
 80041b6:	f04f 0100 	mov.w	r1, #0
 80041ba:	f7ff ff77 	bl	80040ac <floatmap>
 80041be:	4602      	mov	r2, r0
 80041c0:	4b18      	ldr	r3, [pc, #96]	; (8004224 <main+0x120>)
 80041c2:	605a      	str	r2, [r3, #4]
	sprintf(currentline, "e%f", data[1]);
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <main+0x108>)
 80041c6:	681c      	ldr	r4, [r3, #0]
 80041c8:	4b16      	ldr	r3, [pc, #88]	; (8004224 <main+0x120>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fc f92b 	bl	8000428 <__aeabi_f2d>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4917      	ldr	r1, [pc, #92]	; (8004234 <main+0x130>)
 80041d8:	4620      	mov	r0, r4
 80041da:	f000 fba9 	bl	8004930 <sprintf>
	len = strlen(currentline);
 80041de:	4b0b      	ldr	r3, [pc, #44]	; (800420c <main+0x108>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fb ffb4 	bl	8000150 <strlen>
 80041e8:	4603      	mov	r3, r0
 80041ea:	461a      	mov	r2, r3
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <main+0x128>)
 80041ee:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, currentline, len);
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <main+0x108>)
 80041f2:	6819      	ldr	r1, [r3, #0]
 80041f4:	4b0d      	ldr	r3, [pc, #52]	; (800422c <main+0x128>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	480c      	ldr	r0, [pc, #48]	; (8004230 <main+0x12c>)
 80041fe:	f7ff fd55 	bl	8003cac <HAL_UART_Transmit_DMA>
	HAL_Delay(20);
 8004202:	2014      	movs	r0, #20
 8004204:	f7fd f86c 	bl	80012e0 <HAL_Delay>
  {
 8004208:	e790      	b.n	800412c <main+0x28>
 800420a:	bf00      	nop
 800420c:	20000814 	.word	0x20000814
 8004210:	200007b4 	.word	0x200007b4
 8004214:	20000818 	.word	0x20000818
 8004218:	20000704 	.word	0x20000704
 800421c:	40533333 	.word	0x40533333
 8004220:	457ff000 	.word	0x457ff000
 8004224:	200007ac 	.word	0x200007ac
 8004228:	08007788 	.word	0x08007788
 800422c:	20000820 	.word	0x20000820
 8004230:	20000734 	.word	0x20000734
 8004234:	0800778c 	.word	0x0800778c

08004238 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b094      	sub	sp, #80	; 0x50
 800423c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800423e:	2302      	movs	r3, #2
 8004240:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004242:	2301      	movs	r3, #1
 8004244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004246:	2310      	movs	r3, #16
 8004248:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800424a:	2302      	movs	r3, #2
 800424c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800424e:	2300      	movs	r3, #0
 8004250:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 8004252:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8004256:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004258:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe faa9 	bl	80027b4 <HAL_RCC_OscConfig>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <SystemClock_Config+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004268:	21a2      	movs	r1, #162	; 0xa2
 800426a:	4821      	ldr	r0, [pc, #132]	; (80042f0 <SystemClock_Config+0xb8>)
 800426c:	f000 f97e 	bl	800456c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004270:	230f      	movs	r3, #15
 8004272:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004274:	2302      	movs	r3, #2
 8004276:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004278:	2300      	movs	r3, #0
 800427a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800427c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004280:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004282:	2300      	movs	r3, #0
 8004284:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004286:	f107 0314 	add.w	r3, r7, #20
 800428a:	2102      	movs	r1, #2
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff f8af 	bl	80033f0 <HAL_RCC_ClockConfig>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <SystemClock_Config+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004298:	21b0      	movs	r1, #176	; 0xb0
 800429a:	4815      	ldr	r0, [pc, #84]	; (80042f0 <SystemClock_Config+0xb8>)
 800429c:	f000 f966 	bl	800456c <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80042a0:	2302      	movs	r3, #2
 80042a2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80042a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042a8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042aa:	1d3b      	adds	r3, r7, #4
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff faef 	bl	8003890 <HAL_RCCEx_PeriphCLKConfig>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <SystemClock_Config+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 80042b8:	21b7      	movs	r1, #183	; 0xb7
 80042ba:	480d      	ldr	r0, [pc, #52]	; (80042f0 <SystemClock_Config+0xb8>)
 80042bc:	f000 f956 	bl	800456c <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80042c0:	f7ff fa98 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 80042c4:	4602      	mov	r2, r0
 80042c6:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <SystemClock_Config+0xbc>)
 80042c8:	fba3 2302 	umull	r2, r3, r3, r2
 80042cc:	099b      	lsrs	r3, r3, #6
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fd fdf9 	bl	8001ec6 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80042d4:	2004      	movs	r0, #4
 80042d6:	f7fd fe03 	bl	8001ee0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80042da:	2200      	movs	r2, #0
 80042dc:	2100      	movs	r1, #0
 80042de:	f04f 30ff 	mov.w	r0, #4294967295
 80042e2:	f7fd fdc6 	bl	8001e72 <HAL_NVIC_SetPriority>
}
 80042e6:	bf00      	nop
 80042e8:	3750      	adds	r7, #80	; 0x50
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	08007790 	.word	0x08007790
 80042f4:	10624dd3 	.word	0x10624dd3

080042f8 <MX_ADC1_Init>:

/* ADC1 init function */
static void MX_ADC1_Init(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 80042fe:	4b24      	ldr	r3, [pc, #144]	; (8004390 <MX_ADC1_Init+0x98>)
 8004300:	4a24      	ldr	r2, [pc, #144]	; (8004394 <MX_ADC1_Init+0x9c>)
 8004302:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004304:	4b22      	ldr	r3, [pc, #136]	; (8004390 <MX_ADC1_Init+0x98>)
 8004306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800430a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800430c:	4b20      	ldr	r3, [pc, #128]	; (8004390 <MX_ADC1_Init+0x98>)
 800430e:	2200      	movs	r2, #0
 8004310:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004312:	4b1f      	ldr	r3, [pc, #124]	; (8004390 <MX_ADC1_Init+0x98>)
 8004314:	2200      	movs	r2, #0
 8004316:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004318:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <MX_ADC1_Init+0x98>)
 800431a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800431e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004320:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <MX_ADC1_Init+0x98>)
 8004322:	2200      	movs	r2, #0
 8004324:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8004326:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <MX_ADC1_Init+0x98>)
 8004328:	2202      	movs	r2, #2
 800432a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800432c:	4818      	ldr	r0, [pc, #96]	; (8004390 <MX_ADC1_Init+0x98>)
 800432e:	f7fc ffed 	bl	800130c <HAL_ADC_Init>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <MX_ADC1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004338:	21d7      	movs	r1, #215	; 0xd7
 800433a:	4817      	ldr	r0, [pc, #92]	; (8004398 <MX_ADC1_Init+0xa0>)
 800433c:	f000 f916 	bl	800456c <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8004340:	2300      	movs	r3, #0
 8004342:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8004344:	2301      	movs	r3, #1
 8004346:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800434c:	1d3b      	adds	r3, r7, #4
 800434e:	4619      	mov	r1, r3
 8004350:	480f      	ldr	r0, [pc, #60]	; (8004390 <MX_ADC1_Init+0x98>)
 8004352:	f7fd f9d3 	bl	80016fc <HAL_ADC_ConfigChannel>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <MX_ADC1_Init+0x6c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800435c:	21e1      	movs	r1, #225	; 0xe1
 800435e:	480e      	ldr	r0, [pc, #56]	; (8004398 <MX_ADC1_Init+0xa0>)
 8004360:	f000 f904 	bl	800456c <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8004364:	2301      	movs	r3, #1
 8004366:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 2;
 8004368:	2302      	movs	r3, #2
 800436a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800436c:	2305      	movs	r3, #5
 800436e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004370:	1d3b      	adds	r3, r7, #4
 8004372:	4619      	mov	r1, r3
 8004374:	4806      	ldr	r0, [pc, #24]	; (8004390 <MX_ADC1_Init+0x98>)
 8004376:	f7fd f9c1 	bl	80016fc <HAL_ADC_ConfigChannel>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <MX_ADC1_Init+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004380:	21eb      	movs	r1, #235	; 0xeb
 8004382:	4805      	ldr	r0, [pc, #20]	; (8004398 <MX_ADC1_Init+0xa0>)
 8004384:	f000 f8f2 	bl	800456c <_Error_Handler>
  }

}
 8004388:	bf00      	nop
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20000704 	.word	0x20000704
 8004394:	40012400 	.word	0x40012400
 8004398:	08007790 	.word	0x08007790

0800439c <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80043a0:	4b12      	ldr	r3, [pc, #72]	; (80043ec <MX_USART1_UART_Init+0x50>)
 80043a2:	4a13      	ldr	r2, [pc, #76]	; (80043f0 <MX_USART1_UART_Init+0x54>)
 80043a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80043a6:	4b11      	ldr	r3, [pc, #68]	; (80043ec <MX_USART1_UART_Init+0x50>)
 80043a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <MX_USART1_UART_Init+0x50>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043b4:	4b0d      	ldr	r3, [pc, #52]	; (80043ec <MX_USART1_UART_Init+0x50>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043ba:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <MX_USART1_UART_Init+0x50>)
 80043bc:	2200      	movs	r2, #0
 80043be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <MX_USART1_UART_Init+0x50>)
 80043c2:	220c      	movs	r2, #12
 80043c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043c6:	4b09      	ldr	r3, [pc, #36]	; (80043ec <MX_USART1_UART_Init+0x50>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043cc:	4b07      	ldr	r3, [pc, #28]	; (80043ec <MX_USART1_UART_Init+0x50>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043d2:	4806      	ldr	r0, [pc, #24]	; (80043ec <MX_USART1_UART_Init+0x50>)
 80043d4:	f7ff fc20 	bl	8003c18 <HAL_UART_Init>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <MX_USART1_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80043de:	21fe      	movs	r1, #254	; 0xfe
 80043e0:	4804      	ldr	r0, [pc, #16]	; (80043f4 <MX_USART1_UART_Init+0x58>)
 80043e2:	f000 f8c3 	bl	800456c <_Error_Handler>
  }

}
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000734 	.word	0x20000734
 80043f0:	40013800 	.word	0x40013800
 80043f4:	08007790 	.word	0x08007790

080043f8 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80043fc:	4b12      	ldr	r3, [pc, #72]	; (8004448 <MX_USART2_UART_Init+0x50>)
 80043fe:	4a13      	ldr	r2, [pc, #76]	; (800444c <MX_USART2_UART_Init+0x54>)
 8004400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004402:	4b11      	ldr	r3, [pc, #68]	; (8004448 <MX_USART2_UART_Init+0x50>)
 8004404:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004408:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <MX_USART2_UART_Init+0x50>)
 800440c:	2200      	movs	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004410:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <MX_USART2_UART_Init+0x50>)
 8004412:	2200      	movs	r2, #0
 8004414:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004416:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <MX_USART2_UART_Init+0x50>)
 8004418:	2200      	movs	r2, #0
 800441a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <MX_USART2_UART_Init+0x50>)
 800441e:	220c      	movs	r2, #12
 8004420:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004422:	4b09      	ldr	r3, [pc, #36]	; (8004448 <MX_USART2_UART_Init+0x50>)
 8004424:	2200      	movs	r2, #0
 8004426:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004428:	4b07      	ldr	r3, [pc, #28]	; (8004448 <MX_USART2_UART_Init+0x50>)
 800442a:	2200      	movs	r2, #0
 800442c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800442e:	4806      	ldr	r0, [pc, #24]	; (8004448 <MX_USART2_UART_Init+0x50>)
 8004430:	f7ff fbf2 	bl	8003c18 <HAL_UART_Init>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d004      	beq.n	8004444 <MX_USART2_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800443a:	f240 1111 	movw	r1, #273	; 0x111
 800443e:	4804      	ldr	r0, [pc, #16]	; (8004450 <MX_USART2_UART_Init+0x58>)
 8004440:	f000 f894 	bl	800456c <_Error_Handler>
  }

}
 8004444:	bf00      	nop
 8004446:	bd80      	pop	{r7, pc}
 8004448:	200007d4 	.word	0x200007d4
 800444c:	40004400 	.word	0x40004400
 8004450:	08007790 	.word	0x08007790

08004454 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800445a:	4a10      	ldr	r2, [pc, #64]	; (800449c <MX_DMA_Init+0x48>)
 800445c:	4b0f      	ldr	r3, [pc, #60]	; (800449c <MX_DMA_Init+0x48>)
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6153      	str	r3, [r2, #20]
 8004466:	4b0d      	ldr	r3, [pc, #52]	; (800449c <MX_DMA_Init+0x48>)
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	607b      	str	r3, [r7, #4]
 8004470:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004472:	2200      	movs	r2, #0
 8004474:	2100      	movs	r1, #0
 8004476:	200b      	movs	r0, #11
 8004478:	f7fd fcfb 	bl	8001e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800447c:	200b      	movs	r0, #11
 800447e:	f7fd fd14 	bl	8001eaa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004482:	2200      	movs	r2, #0
 8004484:	2100      	movs	r1, #0
 8004486:	200e      	movs	r0, #14
 8004488:	f7fd fcf3 	bl	8001e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800448c:	200e      	movs	r0, #14
 800448e:	f7fd fd0c 	bl	8001eaa <HAL_NVIC_EnableIRQ>

}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000

080044a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044a6:	4a2d      	ldr	r2, [pc, #180]	; (800455c <MX_GPIO_Init+0xbc>)
 80044a8:	4b2c      	ldr	r3, [pc, #176]	; (800455c <MX_GPIO_Init+0xbc>)
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	f043 0310 	orr.w	r3, r3, #16
 80044b0:	6193      	str	r3, [r2, #24]
 80044b2:	4b2a      	ldr	r3, [pc, #168]	; (800455c <MX_GPIO_Init+0xbc>)
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044be:	4a27      	ldr	r2, [pc, #156]	; (800455c <MX_GPIO_Init+0xbc>)
 80044c0:	4b26      	ldr	r3, [pc, #152]	; (800455c <MX_GPIO_Init+0xbc>)
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	f043 0320 	orr.w	r3, r3, #32
 80044c8:	6193      	str	r3, [r2, #24]
 80044ca:	4b24      	ldr	r3, [pc, #144]	; (800455c <MX_GPIO_Init+0xbc>)
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d6:	4a21      	ldr	r2, [pc, #132]	; (800455c <MX_GPIO_Init+0xbc>)
 80044d8:	4b20      	ldr	r3, [pc, #128]	; (800455c <MX_GPIO_Init+0xbc>)
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	6193      	str	r3, [r2, #24]
 80044e2:	4b1e      	ldr	r3, [pc, #120]	; (800455c <MX_GPIO_Init+0xbc>)
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	607b      	str	r3, [r7, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ee:	4a1b      	ldr	r2, [pc, #108]	; (800455c <MX_GPIO_Init+0xbc>)
 80044f0:	4b1a      	ldr	r3, [pc, #104]	; (800455c <MX_GPIO_Init+0xbc>)
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f043 0308 	orr.w	r3, r3, #8
 80044f8:	6193      	str	r3, [r2, #24]
 80044fa:	4b18      	ldr	r3, [pc, #96]	; (800455c <MX_GPIO_Init+0xbc>)
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004506:	2200      	movs	r2, #0
 8004508:	2120      	movs	r1, #32
 800450a:	4815      	ldr	r0, [pc, #84]	; (8004560 <MX_GPIO_Init+0xc0>)
 800450c:	f7fe f918 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004516:	4b13      	ldr	r3, [pc, #76]	; (8004564 <MX_GPIO_Init+0xc4>)
 8004518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451a:	2300      	movs	r3, #0
 800451c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800451e:	f107 0310 	add.w	r3, r7, #16
 8004522:	4619      	mov	r1, r3
 8004524:	4810      	ldr	r0, [pc, #64]	; (8004568 <MX_GPIO_Init+0xc8>)
 8004526:	f7fd ffad 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800452a:	2320      	movs	r3, #32
 800452c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800452e:	2301      	movs	r3, #1
 8004530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004532:	2302      	movs	r3, #2
 8004534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004536:	f107 0310 	add.w	r3, r7, #16
 800453a:	4619      	mov	r1, r3
 800453c:	4808      	ldr	r0, [pc, #32]	; (8004560 <MX_GPIO_Init+0xc0>)
 800453e:	f7fd ffa1 	bl	8002484 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004542:	2200      	movs	r2, #0
 8004544:	2100      	movs	r1, #0
 8004546:	2028      	movs	r0, #40	; 0x28
 8004548:	f7fd fc93 	bl	8001e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800454c:	2028      	movs	r0, #40	; 0x28
 800454e:	f7fd fcac 	bl	8001eaa <HAL_NVIC_EnableIRQ>

}
 8004552:	bf00      	nop
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	40010800 	.word	0x40010800
 8004564:	10110000 	.word	0x10110000
 8004568:	40011000 	.word	0x40011000

0800456c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8004576:	e7fe      	b.n	8004576 <_Error_Handler+0xa>

08004578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800457e:	4a22      	ldr	r2, [pc, #136]	; (8004608 <HAL_MspInit+0x90>)
 8004580:	4b21      	ldr	r3, [pc, #132]	; (8004608 <HAL_MspInit+0x90>)
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	f043 0301 	orr.w	r3, r3, #1
 8004588:	6193      	str	r3, [r2, #24]
 800458a:	4b1f      	ldr	r3, [pc, #124]	; (8004608 <HAL_MspInit+0x90>)
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	607b      	str	r3, [r7, #4]
 8004594:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004596:	2003      	movs	r0, #3
 8004598:	f7fd fc60 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800459c:	2200      	movs	r2, #0
 800459e:	2100      	movs	r1, #0
 80045a0:	f06f 000b 	mvn.w	r0, #11
 80045a4:	f7fd fc65 	bl	8001e72 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80045a8:	2200      	movs	r2, #0
 80045aa:	2100      	movs	r1, #0
 80045ac:	f06f 000a 	mvn.w	r0, #10
 80045b0:	f7fd fc5f 	bl	8001e72 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80045b4:	2200      	movs	r2, #0
 80045b6:	2100      	movs	r1, #0
 80045b8:	f06f 0009 	mvn.w	r0, #9
 80045bc:	f7fd fc59 	bl	8001e72 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80045c0:	2200      	movs	r2, #0
 80045c2:	2100      	movs	r1, #0
 80045c4:	f06f 0004 	mvn.w	r0, #4
 80045c8:	f7fd fc53 	bl	8001e72 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80045cc:	2200      	movs	r2, #0
 80045ce:	2100      	movs	r1, #0
 80045d0:	f06f 0003 	mvn.w	r0, #3
 80045d4:	f7fd fc4d 	bl	8001e72 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80045d8:	2200      	movs	r2, #0
 80045da:	2100      	movs	r1, #0
 80045dc:	f06f 0001 	mvn.w	r0, #1
 80045e0:	f7fd fc47 	bl	8001e72 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80045e4:	2200      	movs	r2, #0
 80045e6:	2100      	movs	r1, #0
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ec:	f7fd fc41 	bl	8001e72 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80045f0:	4a06      	ldr	r2, [pc, #24]	; (800460c <HAL_MspInit+0x94>)
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_MspInit+0x94>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80045fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045fe:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40021000 	.word	0x40021000
 800460c:	40010000 	.word	0x40010000

08004610 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a23      	ldr	r2, [pc, #140]	; (80046ac <HAL_ADC_MspInit+0x9c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d13f      	bne.n	80046a2 <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004622:	4a23      	ldr	r2, [pc, #140]	; (80046b0 <HAL_ADC_MspInit+0xa0>)
 8004624:	4b22      	ldr	r3, [pc, #136]	; (80046b0 <HAL_ADC_MspInit+0xa0>)
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800462c:	6193      	str	r3, [r2, #24]
 800462e:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <HAL_ADC_MspInit+0xa0>)
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
  
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800463a:	2303      	movs	r3, #3
 800463c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800463e:	2303      	movs	r3, #3
 8004640:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004642:	f107 0310 	add.w	r3, r7, #16
 8004646:	4619      	mov	r1, r3
 8004648:	481a      	ldr	r0, [pc, #104]	; (80046b4 <HAL_ADC_MspInit+0xa4>)
 800464a:	f7fd ff1b 	bl	8002484 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800464e:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <HAL_ADC_MspInit+0xa8>)
 8004650:	4a1a      	ldr	r2, [pc, #104]	; (80046bc <HAL_ADC_MspInit+0xac>)
 8004652:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004654:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <HAL_ADC_MspInit+0xa8>)
 8004656:	2200      	movs	r2, #0
 8004658:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800465a:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <HAL_ADC_MspInit+0xa8>)
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004660:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <HAL_ADC_MspInit+0xa8>)
 8004662:	2280      	movs	r2, #128	; 0x80
 8004664:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004666:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <HAL_ADC_MspInit+0xa8>)
 8004668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800466c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800466e:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <HAL_ADC_MspInit+0xa8>)
 8004670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004674:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <HAL_ADC_MspInit+0xa8>)
 8004678:	2220      	movs	r2, #32
 800467a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800467c:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <HAL_ADC_MspInit+0xa8>)
 800467e:	2200      	movs	r2, #0
 8004680:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004682:	480d      	ldr	r0, [pc, #52]	; (80046b8 <HAL_ADC_MspInit+0xa8>)
 8004684:	f7fd fc54 	bl	8001f30 <HAL_DMA_Init>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_ADC_MspInit+0x86>
    {
      _Error_Handler(__FILE__, __LINE__);
 800468e:	2178      	movs	r1, #120	; 0x78
 8004690:	480b      	ldr	r0, [pc, #44]	; (80046c0 <HAL_ADC_MspInit+0xb0>)
 8004692:	f7ff ff6b 	bl	800456c <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a07      	ldr	r2, [pc, #28]	; (80046b8 <HAL_ADC_MspInit+0xa8>)
 800469a:	621a      	str	r2, [r3, #32]
 800469c:	4a06      	ldr	r2, [pc, #24]	; (80046b8 <HAL_ADC_MspInit+0xa8>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80046a2:	bf00      	nop
 80046a4:	3720      	adds	r7, #32
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40012400 	.word	0x40012400
 80046b0:	40021000 	.word	0x40021000
 80046b4:	40010800 	.word	0x40010800
 80046b8:	20000774 	.word	0x20000774
 80046bc:	40020008 	.word	0x40020008
 80046c0:	080077a0 	.word	0x080077a0

080046c4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a3f      	ldr	r2, [pc, #252]	; (80047d0 <HAL_UART_MspInit+0x10c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d14e      	bne.n	8004774 <HAL_UART_MspInit+0xb0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046d6:	4a3f      	ldr	r2, [pc, #252]	; (80047d4 <HAL_UART_MspInit+0x110>)
 80046d8:	4b3e      	ldr	r3, [pc, #248]	; (80047d4 <HAL_UART_MspInit+0x110>)
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046e0:	6193      	str	r3, [r2, #24]
 80046e2:	4b3c      	ldr	r3, [pc, #240]	; (80047d4 <HAL_UART_MspInit+0x110>)
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f4:	2302      	movs	r3, #2
 80046f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046f8:	2303      	movs	r3, #3
 80046fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046fc:	f107 0310 	add.w	r3, r7, #16
 8004700:	4619      	mov	r1, r3
 8004702:	4835      	ldr	r0, [pc, #212]	; (80047d8 <HAL_UART_MspInit+0x114>)
 8004704:	f7fd febe 	bl	8002484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800470c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004712:	2300      	movs	r3, #0
 8004714:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004716:	f107 0310 	add.w	r3, r7, #16
 800471a:	4619      	mov	r1, r3
 800471c:	482e      	ldr	r0, [pc, #184]	; (80047d8 <HAL_UART_MspInit+0x114>)
 800471e:	f7fd feb1 	bl	8002484 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004722:	4b2e      	ldr	r3, [pc, #184]	; (80047dc <HAL_UART_MspInit+0x118>)
 8004724:	4a2e      	ldr	r2, [pc, #184]	; (80047e0 <HAL_UART_MspInit+0x11c>)
 8004726:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004728:	4b2c      	ldr	r3, [pc, #176]	; (80047dc <HAL_UART_MspInit+0x118>)
 800472a:	2210      	movs	r2, #16
 800472c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800472e:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <HAL_UART_MspInit+0x118>)
 8004730:	2200      	movs	r2, #0
 8004732:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004734:	4b29      	ldr	r3, [pc, #164]	; (80047dc <HAL_UART_MspInit+0x118>)
 8004736:	2280      	movs	r2, #128	; 0x80
 8004738:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800473a:	4b28      	ldr	r3, [pc, #160]	; (80047dc <HAL_UART_MspInit+0x118>)
 800473c:	2200      	movs	r2, #0
 800473e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004740:	4b26      	ldr	r3, [pc, #152]	; (80047dc <HAL_UART_MspInit+0x118>)
 8004742:	2200      	movs	r2, #0
 8004744:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8004746:	4b25      	ldr	r3, [pc, #148]	; (80047dc <HAL_UART_MspInit+0x118>)
 8004748:	2220      	movs	r2, #32
 800474a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800474c:	4b23      	ldr	r3, [pc, #140]	; (80047dc <HAL_UART_MspInit+0x118>)
 800474e:	2200      	movs	r2, #0
 8004750:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004752:	4822      	ldr	r0, [pc, #136]	; (80047dc <HAL_UART_MspInit+0x118>)
 8004754:	f7fd fbec 	bl	8001f30 <HAL_DMA_Init>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_UART_MspInit+0xa2>
    {
      _Error_Handler(__FILE__, __LINE__);
 800475e:	21c4      	movs	r1, #196	; 0xc4
 8004760:	4820      	ldr	r0, [pc, #128]	; (80047e4 <HAL_UART_MspInit+0x120>)
 8004762:	f7ff ff03 	bl	800456c <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a1c      	ldr	r2, [pc, #112]	; (80047dc <HAL_UART_MspInit+0x118>)
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
 800476c:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <HAL_UART_MspInit+0x118>)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004772:	e028      	b.n	80047c6 <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART2)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1b      	ldr	r2, [pc, #108]	; (80047e8 <HAL_UART_MspInit+0x124>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d123      	bne.n	80047c6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 800477e:	4a15      	ldr	r2, [pc, #84]	; (80047d4 <HAL_UART_MspInit+0x110>)
 8004780:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <HAL_UART_MspInit+0x110>)
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004788:	61d3      	str	r3, [r2, #28]
 800478a:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <HAL_UART_MspInit+0x110>)
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004796:	2304      	movs	r3, #4
 8004798:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479a:	2302      	movs	r3, #2
 800479c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800479e:	2303      	movs	r3, #3
 80047a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a2:	f107 0310 	add.w	r3, r7, #16
 80047a6:	4619      	mov	r1, r3
 80047a8:	480b      	ldr	r0, [pc, #44]	; (80047d8 <HAL_UART_MspInit+0x114>)
 80047aa:	f7fd fe6b 	bl	8002484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80047ae:	2308      	movs	r3, #8
 80047b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ba:	f107 0310 	add.w	r3, r7, #16
 80047be:	4619      	mov	r1, r3
 80047c0:	4805      	ldr	r0, [pc, #20]	; (80047d8 <HAL_UART_MspInit+0x114>)
 80047c2:	f7fd fe5f 	bl	8002484 <HAL_GPIO_Init>
}
 80047c6:	bf00      	nop
 80047c8:	3720      	adds	r7, #32
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40013800 	.word	0x40013800
 80047d4:	40021000 	.word	0x40021000
 80047d8:	40010800 	.word	0x40010800
 80047dc:	200006cc 	.word	0x200006cc
 80047e0:	40020044 	.word	0x40020044
 80047e4:	080077a0 	.word	0x080077a0
 80047e8:	40004400 	.word	0x40004400

080047ec <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047f0:	f7fc fd5e 	bl	80012b0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80047f4:	f7fd fb90 	bl	8001f18 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047f8:	bf00      	nop
 80047fa:	bd80      	pop	{r7, pc}

080047fc <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel1 global interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004800:	4802      	ldr	r0, [pc, #8]	; (800480c <DMA1_Channel1_IRQHandler+0x10>)
 8004802:	f7fd fc29 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004806:	bf00      	nop
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000774 	.word	0x20000774

08004810 <DMA1_Channel4_IRQHandler>:

/**
* @brief This function handles DMA1 channel4 global interrupt.
*/
void DMA1_Channel4_IRQHandler(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004814:	4802      	ldr	r0, [pc, #8]	; (8004820 <DMA1_Channel4_IRQHandler+0x10>)
 8004816:	f7fd fc1f 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800481a:	bf00      	nop
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	200006cc 	.word	0x200006cc

08004824 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004828:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800482c:	f7fd ffa0 	bl	8002770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004830:	bf00      	nop
 8004832:	bd80      	pop	{r7, pc}

08004834 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004838:	4a15      	ldr	r2, [pc, #84]	; (8004890 <SystemInit+0x5c>)
 800483a:	4b15      	ldr	r3, [pc, #84]	; (8004890 <SystemInit+0x5c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8004844:	4912      	ldr	r1, [pc, #72]	; (8004890 <SystemInit+0x5c>)
 8004846:	4b12      	ldr	r3, [pc, #72]	; (8004890 <SystemInit+0x5c>)
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	4b12      	ldr	r3, [pc, #72]	; (8004894 <SystemInit+0x60>)
 800484c:	4013      	ands	r3, r2
 800484e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004850:	4a0f      	ldr	r2, [pc, #60]	; (8004890 <SystemInit+0x5c>)
 8004852:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <SystemInit+0x5c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800485a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800485e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004860:	4a0b      	ldr	r2, [pc, #44]	; (8004890 <SystemInit+0x5c>)
 8004862:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <SystemInit+0x5c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800486a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800486c:	4a08      	ldr	r2, [pc, #32]	; (8004890 <SystemInit+0x5c>)
 800486e:	4b08      	ldr	r3, [pc, #32]	; (8004890 <SystemInit+0x5c>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004876:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <SystemInit+0x5c>)
 800487a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800487e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004880:	4b05      	ldr	r3, [pc, #20]	; (8004898 <SystemInit+0x64>)
 8004882:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004886:	609a      	str	r2, [r3, #8]
#endif 
}
 8004888:	bf00      	nop
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr
 8004890:	40021000 	.word	0x40021000
 8004894:	f8ff0000 	.word	0xf8ff0000
 8004898:	e000ed00 	.word	0xe000ed00

0800489c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800489c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800489e:	e003      	b.n	80048a8 <LoopCopyDataInit>

080048a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80048a0:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80048a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80048a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80048a6:	3104      	adds	r1, #4

080048a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80048a8:	480a      	ldr	r0, [pc, #40]	; (80048d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80048aa:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80048ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80048ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80048b0:	d3f6      	bcc.n	80048a0 <CopyDataInit>
  ldr r2, =_sbss
 80048b2:	4a0a      	ldr	r2, [pc, #40]	; (80048dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80048b4:	e002      	b.n	80048bc <LoopFillZerobss>

080048b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80048b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80048b8:	f842 3b04 	str.w	r3, [r2], #4

080048bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80048be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80048c0:	d3f9      	bcc.n	80048b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80048c2:	f7ff ffb7 	bl	8004834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048c6:	f000 f80f 	bl	80048e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80048ca:	f7ff fc1b 	bl	8004104 <main>
  bx lr
 80048ce:	4770      	bx	lr
  ldr r3, =_sidata
 80048d0:	08007a50 	.word	0x08007a50
  ldr r0, =_sdata
 80048d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80048d8:	20000674 	.word	0x20000674
  ldr r2, =_sbss
 80048dc:	20000674 	.word	0x20000674
  ldr r3, = _ebss
 80048e0:	20000834 	.word	0x20000834

080048e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80048e4:	e7fe      	b.n	80048e4 <ADC1_2_IRQHandler>
	...

080048e8 <__libc_init_array>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	2500      	movs	r5, #0
 80048ec:	4e0c      	ldr	r6, [pc, #48]	; (8004920 <__libc_init_array+0x38>)
 80048ee:	4c0d      	ldr	r4, [pc, #52]	; (8004924 <__libc_init_array+0x3c>)
 80048f0:	1ba4      	subs	r4, r4, r6
 80048f2:	10a4      	asrs	r4, r4, #2
 80048f4:	42a5      	cmp	r5, r4
 80048f6:	d109      	bne.n	800490c <__libc_init_array+0x24>
 80048f8:	f002 ff26 	bl	8007748 <_init>
 80048fc:	2500      	movs	r5, #0
 80048fe:	4e0a      	ldr	r6, [pc, #40]	; (8004928 <__libc_init_array+0x40>)
 8004900:	4c0a      	ldr	r4, [pc, #40]	; (800492c <__libc_init_array+0x44>)
 8004902:	1ba4      	subs	r4, r4, r6
 8004904:	10a4      	asrs	r4, r4, #2
 8004906:	42a5      	cmp	r5, r4
 8004908:	d105      	bne.n	8004916 <__libc_init_array+0x2e>
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004910:	4798      	blx	r3
 8004912:	3501      	adds	r5, #1
 8004914:	e7ee      	b.n	80048f4 <__libc_init_array+0xc>
 8004916:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800491a:	4798      	blx	r3
 800491c:	3501      	adds	r5, #1
 800491e:	e7f2      	b.n	8004906 <__libc_init_array+0x1e>
 8004920:	08007a48 	.word	0x08007a48
 8004924:	08007a48 	.word	0x08007a48
 8004928:	08007a48 	.word	0x08007a48
 800492c:	08007a4c 	.word	0x08007a4c

08004930 <sprintf>:
 8004930:	b40e      	push	{r1, r2, r3}
 8004932:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004936:	b500      	push	{lr}
 8004938:	b09c      	sub	sp, #112	; 0x70
 800493a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800493e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004942:	9104      	str	r1, [sp, #16]
 8004944:	9107      	str	r1, [sp, #28]
 8004946:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800494a:	ab1d      	add	r3, sp, #116	; 0x74
 800494c:	9002      	str	r0, [sp, #8]
 800494e:	9006      	str	r0, [sp, #24]
 8004950:	4808      	ldr	r0, [pc, #32]	; (8004974 <sprintf+0x44>)
 8004952:	f853 2b04 	ldr.w	r2, [r3], #4
 8004956:	f8ad 1016 	strh.w	r1, [sp, #22]
 800495a:	6800      	ldr	r0, [r0, #0]
 800495c:	a902      	add	r1, sp, #8
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	f000 f80a 	bl	8004978 <_svfprintf_r>
 8004964:	2200      	movs	r2, #0
 8004966:	9b02      	ldr	r3, [sp, #8]
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	b01c      	add	sp, #112	; 0x70
 800496c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004970:	b003      	add	sp, #12
 8004972:	4770      	bx	lr
 8004974:	20000004 	.word	0x20000004

08004978 <_svfprintf_r>:
 8004978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497c:	b0bf      	sub	sp, #252	; 0xfc
 800497e:	4689      	mov	r9, r1
 8004980:	4615      	mov	r5, r2
 8004982:	461f      	mov	r7, r3
 8004984:	4682      	mov	sl, r0
 8004986:	f001 fe27 	bl	80065d8 <_localeconv_r>
 800498a:	6803      	ldr	r3, [r0, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	9311      	str	r3, [sp, #68]	; 0x44
 8004990:	f7fb fbde 	bl	8000150 <strlen>
 8004994:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004998:	900a      	str	r0, [sp, #40]	; 0x28
 800499a:	061b      	lsls	r3, r3, #24
 800499c:	d518      	bpl.n	80049d0 <_svfprintf_r+0x58>
 800499e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80049a2:	b9ab      	cbnz	r3, 80049d0 <_svfprintf_r+0x58>
 80049a4:	2140      	movs	r1, #64	; 0x40
 80049a6:	4650      	mov	r0, sl
 80049a8:	f001 fe2c 	bl	8006604 <_malloc_r>
 80049ac:	f8c9 0000 	str.w	r0, [r9]
 80049b0:	f8c9 0010 	str.w	r0, [r9, #16]
 80049b4:	b948      	cbnz	r0, 80049ca <_svfprintf_r+0x52>
 80049b6:	230c      	movs	r3, #12
 80049b8:	f8ca 3000 	str.w	r3, [sl]
 80049bc:	f04f 33ff 	mov.w	r3, #4294967295
 80049c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80049c4:	b03f      	add	sp, #252	; 0xfc
 80049c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ca:	2340      	movs	r3, #64	; 0x40
 80049cc:	f8c9 3014 	str.w	r3, [r9, #20]
 80049d0:	2300      	movs	r3, #0
 80049d2:	ac2e      	add	r4, sp, #184	; 0xb8
 80049d4:	9421      	str	r4, [sp, #132]	; 0x84
 80049d6:	9323      	str	r3, [sp, #140]	; 0x8c
 80049d8:	9322      	str	r3, [sp, #136]	; 0x88
 80049da:	9509      	str	r5, [sp, #36]	; 0x24
 80049dc:	9307      	str	r3, [sp, #28]
 80049de:	930d      	str	r3, [sp, #52]	; 0x34
 80049e0:	930e      	str	r3, [sp, #56]	; 0x38
 80049e2:	9315      	str	r3, [sp, #84]	; 0x54
 80049e4:	9314      	str	r3, [sp, #80]	; 0x50
 80049e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80049e8:	9312      	str	r3, [sp, #72]	; 0x48
 80049ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80049ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80049ee:	462b      	mov	r3, r5
 80049f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049f4:	b112      	cbz	r2, 80049fc <_svfprintf_r+0x84>
 80049f6:	2a25      	cmp	r2, #37	; 0x25
 80049f8:	f040 8083 	bne.w	8004b02 <_svfprintf_r+0x18a>
 80049fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049fe:	1aee      	subs	r6, r5, r3
 8004a00:	d00d      	beq.n	8004a1e <_svfprintf_r+0xa6>
 8004a02:	e884 0048 	stmia.w	r4, {r3, r6}
 8004a06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a08:	4433      	add	r3, r6
 8004a0a:	9323      	str	r3, [sp, #140]	; 0x8c
 8004a0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a0e:	3301      	adds	r3, #1
 8004a10:	2b07      	cmp	r3, #7
 8004a12:	9322      	str	r3, [sp, #136]	; 0x88
 8004a14:	dc77      	bgt.n	8004b06 <_svfprintf_r+0x18e>
 8004a16:	3408      	adds	r4, #8
 8004a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a1a:	4433      	add	r3, r6
 8004a1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a1e:	782b      	ldrb	r3, [r5, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 8725 	beq.w	8005870 <_svfprintf_r+0xef8>
 8004a26:	2300      	movs	r3, #0
 8004a28:	1c69      	adds	r1, r5, #1
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f04f 3bff 	mov.w	fp, #4294967295
 8004a30:	461d      	mov	r5, r3
 8004a32:	200a      	movs	r0, #10
 8004a34:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004a38:	930c      	str	r3, [sp, #48]	; 0x30
 8004a3a:	1c4e      	adds	r6, r1, #1
 8004a3c:	7809      	ldrb	r1, [r1, #0]
 8004a3e:	9609      	str	r6, [sp, #36]	; 0x24
 8004a40:	9106      	str	r1, [sp, #24]
 8004a42:	9906      	ldr	r1, [sp, #24]
 8004a44:	3920      	subs	r1, #32
 8004a46:	2958      	cmp	r1, #88	; 0x58
 8004a48:	f200 8414 	bhi.w	8005274 <_svfprintf_r+0x8fc>
 8004a4c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004a50:	041200a5 	.word	0x041200a5
 8004a54:	00aa0412 	.word	0x00aa0412
 8004a58:	04120412 	.word	0x04120412
 8004a5c:	04120412 	.word	0x04120412
 8004a60:	04120412 	.word	0x04120412
 8004a64:	006500ad 	.word	0x006500ad
 8004a68:	00b50412 	.word	0x00b50412
 8004a6c:	041200b8 	.word	0x041200b8
 8004a70:	00d800d5 	.word	0x00d800d5
 8004a74:	00d800d8 	.word	0x00d800d8
 8004a78:	00d800d8 	.word	0x00d800d8
 8004a7c:	00d800d8 	.word	0x00d800d8
 8004a80:	00d800d8 	.word	0x00d800d8
 8004a84:	04120412 	.word	0x04120412
 8004a88:	04120412 	.word	0x04120412
 8004a8c:	04120412 	.word	0x04120412
 8004a90:	04120412 	.word	0x04120412
 8004a94:	04120412 	.word	0x04120412
 8004a98:	0122010c 	.word	0x0122010c
 8004a9c:	01220412 	.word	0x01220412
 8004aa0:	04120412 	.word	0x04120412
 8004aa4:	04120412 	.word	0x04120412
 8004aa8:	041200eb 	.word	0x041200eb
 8004aac:	033c0412 	.word	0x033c0412
 8004ab0:	04120412 	.word	0x04120412
 8004ab4:	04120412 	.word	0x04120412
 8004ab8:	03a40412 	.word	0x03a40412
 8004abc:	04120412 	.word	0x04120412
 8004ac0:	04120085 	.word	0x04120085
 8004ac4:	04120412 	.word	0x04120412
 8004ac8:	04120412 	.word	0x04120412
 8004acc:	04120412 	.word	0x04120412
 8004ad0:	04120412 	.word	0x04120412
 8004ad4:	00fe0412 	.word	0x00fe0412
 8004ad8:	0122006b 	.word	0x0122006b
 8004adc:	01220122 	.word	0x01220122
 8004ae0:	006b00ee 	.word	0x006b00ee
 8004ae4:	04120412 	.word	0x04120412
 8004ae8:	041200f1 	.word	0x041200f1
 8004aec:	033e031e 	.word	0x033e031e
 8004af0:	00f80372 	.word	0x00f80372
 8004af4:	03830412 	.word	0x03830412
 8004af8:	03a60412 	.word	0x03a60412
 8004afc:	04120412 	.word	0x04120412
 8004b00:	03be      	.short	0x03be
 8004b02:	461d      	mov	r5, r3
 8004b04:	e773      	b.n	80049ee <_svfprintf_r+0x76>
 8004b06:	aa21      	add	r2, sp, #132	; 0x84
 8004b08:	4649      	mov	r1, r9
 8004b0a:	4650      	mov	r0, sl
 8004b0c:	f002 fa8e 	bl	800702c <__ssprint_r>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	f040 868e 	bne.w	8005832 <_svfprintf_r+0xeba>
 8004b16:	ac2e      	add	r4, sp, #184	; 0xb8
 8004b18:	e77e      	b.n	8004a18 <_svfprintf_r+0xa0>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	222b      	movs	r2, #43	; 0x2b
 8004b1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b20:	e78b      	b.n	8004a3a <_svfprintf_r+0xc2>
 8004b22:	460f      	mov	r7, r1
 8004b24:	e7fb      	b.n	8004b1e <_svfprintf_r+0x1a6>
 8004b26:	b10b      	cbz	r3, 8004b2c <_svfprintf_r+0x1b4>
 8004b28:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004b2c:	06ae      	lsls	r6, r5, #26
 8004b2e:	f140 80a1 	bpl.w	8004c74 <_svfprintf_r+0x2fc>
 8004b32:	3707      	adds	r7, #7
 8004b34:	f027 0707 	bic.w	r7, r7, #7
 8004b38:	f107 0308 	add.w	r3, r7, #8
 8004b3c:	9308      	str	r3, [sp, #32]
 8004b3e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004b42:	2e00      	cmp	r6, #0
 8004b44:	f177 0300 	sbcs.w	r3, r7, #0
 8004b48:	da05      	bge.n	8004b56 <_svfprintf_r+0x1de>
 8004b4a:	232d      	movs	r3, #45	; 0x2d
 8004b4c:	4276      	negs	r6, r6
 8004b4e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004b52:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004b56:	2301      	movs	r3, #1
 8004b58:	e2c7      	b.n	80050ea <_svfprintf_r+0x772>
 8004b5a:	b10b      	cbz	r3, 8004b60 <_svfprintf_r+0x1e8>
 8004b5c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004b60:	4ba0      	ldr	r3, [pc, #640]	; (8004de4 <_svfprintf_r+0x46c>)
 8004b62:	9315      	str	r3, [sp, #84]	; 0x54
 8004b64:	06ab      	lsls	r3, r5, #26
 8004b66:	f140 8336 	bpl.w	80051d6 <_svfprintf_r+0x85e>
 8004b6a:	3707      	adds	r7, #7
 8004b6c:	f027 0707 	bic.w	r7, r7, #7
 8004b70:	f107 0308 	add.w	r3, r7, #8
 8004b74:	9308      	str	r3, [sp, #32]
 8004b76:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004b7a:	07e8      	lsls	r0, r5, #31
 8004b7c:	d50b      	bpl.n	8004b96 <_svfprintf_r+0x21e>
 8004b7e:	ea56 0307 	orrs.w	r3, r6, r7
 8004b82:	d008      	beq.n	8004b96 <_svfprintf_r+0x21e>
 8004b84:	2330      	movs	r3, #48	; 0x30
 8004b86:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8004b8a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004b8e:	f045 0502 	orr.w	r5, r5, #2
 8004b92:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 8004b96:	2302      	movs	r3, #2
 8004b98:	e2a4      	b.n	80050e4 <_svfprintf_r+0x76c>
 8004b9a:	2a00      	cmp	r2, #0
 8004b9c:	d1bf      	bne.n	8004b1e <_svfprintf_r+0x1a6>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	e7bc      	b.n	8004b1e <_svfprintf_r+0x1a6>
 8004ba4:	f045 0501 	orr.w	r5, r5, #1
 8004ba8:	e7b9      	b.n	8004b1e <_svfprintf_r+0x1a6>
 8004baa:	683e      	ldr	r6, [r7, #0]
 8004bac:	1d39      	adds	r1, r7, #4
 8004bae:	2e00      	cmp	r6, #0
 8004bb0:	960c      	str	r6, [sp, #48]	; 0x30
 8004bb2:	dab6      	bge.n	8004b22 <_svfprintf_r+0x1aa>
 8004bb4:	460f      	mov	r7, r1
 8004bb6:	4276      	negs	r6, r6
 8004bb8:	960c      	str	r6, [sp, #48]	; 0x30
 8004bba:	f045 0504 	orr.w	r5, r5, #4
 8004bbe:	e7ae      	b.n	8004b1e <_svfprintf_r+0x1a6>
 8004bc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bc2:	1c4e      	adds	r6, r1, #1
 8004bc4:	7809      	ldrb	r1, [r1, #0]
 8004bc6:	292a      	cmp	r1, #42	; 0x2a
 8004bc8:	9106      	str	r1, [sp, #24]
 8004bca:	d010      	beq.n	8004bee <_svfprintf_r+0x276>
 8004bcc:	f04f 0b00 	mov.w	fp, #0
 8004bd0:	9609      	str	r6, [sp, #36]	; 0x24
 8004bd2:	9906      	ldr	r1, [sp, #24]
 8004bd4:	3930      	subs	r1, #48	; 0x30
 8004bd6:	2909      	cmp	r1, #9
 8004bd8:	f63f af33 	bhi.w	8004a42 <_svfprintf_r+0xca>
 8004bdc:	fb00 1b0b 	mla	fp, r0, fp, r1
 8004be0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004be2:	460e      	mov	r6, r1
 8004be4:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004be8:	9106      	str	r1, [sp, #24]
 8004bea:	9609      	str	r6, [sp, #36]	; 0x24
 8004bec:	e7f1      	b.n	8004bd2 <_svfprintf_r+0x25a>
 8004bee:	6839      	ldr	r1, [r7, #0]
 8004bf0:	9609      	str	r6, [sp, #36]	; 0x24
 8004bf2:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 8004bf6:	3704      	adds	r7, #4
 8004bf8:	e791      	b.n	8004b1e <_svfprintf_r+0x1a6>
 8004bfa:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8004bfe:	e78e      	b.n	8004b1e <_svfprintf_r+0x1a6>
 8004c00:	2100      	movs	r1, #0
 8004c02:	910c      	str	r1, [sp, #48]	; 0x30
 8004c04:	9906      	ldr	r1, [sp, #24]
 8004c06:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004c08:	3930      	subs	r1, #48	; 0x30
 8004c0a:	fb00 1106 	mla	r1, r0, r6, r1
 8004c0e:	910c      	str	r1, [sp, #48]	; 0x30
 8004c10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c12:	460e      	mov	r6, r1
 8004c14:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004c18:	9106      	str	r1, [sp, #24]
 8004c1a:	9906      	ldr	r1, [sp, #24]
 8004c1c:	9609      	str	r6, [sp, #36]	; 0x24
 8004c1e:	3930      	subs	r1, #48	; 0x30
 8004c20:	2909      	cmp	r1, #9
 8004c22:	d9ef      	bls.n	8004c04 <_svfprintf_r+0x28c>
 8004c24:	e70d      	b.n	8004a42 <_svfprintf_r+0xca>
 8004c26:	f045 0508 	orr.w	r5, r5, #8
 8004c2a:	e778      	b.n	8004b1e <_svfprintf_r+0x1a6>
 8004c2c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8004c30:	e775      	b.n	8004b1e <_svfprintf_r+0x1a6>
 8004c32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c34:	7809      	ldrb	r1, [r1, #0]
 8004c36:	296c      	cmp	r1, #108	; 0x6c
 8004c38:	d105      	bne.n	8004c46 <_svfprintf_r+0x2ce>
 8004c3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c3c:	3101      	adds	r1, #1
 8004c3e:	9109      	str	r1, [sp, #36]	; 0x24
 8004c40:	f045 0520 	orr.w	r5, r5, #32
 8004c44:	e76b      	b.n	8004b1e <_svfprintf_r+0x1a6>
 8004c46:	f045 0510 	orr.w	r5, r5, #16
 8004c4a:	e768      	b.n	8004b1e <_svfprintf_r+0x1a6>
 8004c4c:	2600      	movs	r6, #0
 8004c4e:	1d3b      	adds	r3, r7, #4
 8004c50:	9308      	str	r3, [sp, #32]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8004c58:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8004c5c:	f04f 0b01 	mov.w	fp, #1
 8004c60:	4637      	mov	r7, r6
 8004c62:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8004c66:	e11c      	b.n	8004ea2 <_svfprintf_r+0x52a>
 8004c68:	b10b      	cbz	r3, 8004c6e <_svfprintf_r+0x2f6>
 8004c6a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004c6e:	f045 0510 	orr.w	r5, r5, #16
 8004c72:	e75b      	b.n	8004b2c <_svfprintf_r+0x1b4>
 8004c74:	f015 0f10 	tst.w	r5, #16
 8004c78:	f107 0304 	add.w	r3, r7, #4
 8004c7c:	d003      	beq.n	8004c86 <_svfprintf_r+0x30e>
 8004c7e:	683e      	ldr	r6, [r7, #0]
 8004c80:	9308      	str	r3, [sp, #32]
 8004c82:	17f7      	asrs	r7, r6, #31
 8004c84:	e75d      	b.n	8004b42 <_svfprintf_r+0x1ca>
 8004c86:	683e      	ldr	r6, [r7, #0]
 8004c88:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c8c:	9308      	str	r3, [sp, #32]
 8004c8e:	bf18      	it	ne
 8004c90:	b236      	sxthne	r6, r6
 8004c92:	e7f6      	b.n	8004c82 <_svfprintf_r+0x30a>
 8004c94:	b10b      	cbz	r3, 8004c9a <_svfprintf_r+0x322>
 8004c96:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004c9a:	3707      	adds	r7, #7
 8004c9c:	f027 0707 	bic.w	r7, r7, #7
 8004ca0:	f107 0308 	add.w	r3, r7, #8
 8004ca4:	9308      	str	r3, [sp, #32]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cac:	930d      	str	r3, [sp, #52]	; 0x34
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004cb2:	930e      	str	r3, [sp, #56]	; 0x38
 8004cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	4b4a      	ldr	r3, [pc, #296]	; (8004de8 <_svfprintf_r+0x470>)
 8004cc0:	f7fb fea0 	bl	8000a04 <__aeabi_dcmpun>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	f040 85dc 	bne.w	8005882 <_svfprintf_r+0xf0a>
 8004cca:	f04f 32ff 	mov.w	r2, #4294967295
 8004cce:	4b46      	ldr	r3, [pc, #280]	; (8004de8 <_svfprintf_r+0x470>)
 8004cd0:	4638      	mov	r0, r7
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	f7fb fe78 	bl	80009c8 <__aeabi_dcmple>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	f040 85d2 	bne.w	8005882 <_svfprintf_r+0xf0a>
 8004cde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ce0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ce2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004ce4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004ce6:	f7fb fe65 	bl	80009b4 <__aeabi_dcmplt>
 8004cea:	b110      	cbz	r0, 8004cf2 <_svfprintf_r+0x37a>
 8004cec:	232d      	movs	r3, #45	; 0x2d
 8004cee:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004cf2:	4b3e      	ldr	r3, [pc, #248]	; (8004dec <_svfprintf_r+0x474>)
 8004cf4:	4a3e      	ldr	r2, [pc, #248]	; (8004df0 <_svfprintf_r+0x478>)
 8004cf6:	9906      	ldr	r1, [sp, #24]
 8004cf8:	f04f 0b03 	mov.w	fp, #3
 8004cfc:	2947      	cmp	r1, #71	; 0x47
 8004cfe:	bfcc      	ite	gt
 8004d00:	4690      	movgt	r8, r2
 8004d02:	4698      	movle	r8, r3
 8004d04:	2600      	movs	r6, #0
 8004d06:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8004d0a:	4637      	mov	r7, r6
 8004d0c:	e0c9      	b.n	8004ea2 <_svfprintf_r+0x52a>
 8004d0e:	f1bb 3fff 	cmp.w	fp, #4294967295
 8004d12:	d026      	beq.n	8004d62 <_svfprintf_r+0x3ea>
 8004d14:	9b06      	ldr	r3, [sp, #24]
 8004d16:	f023 0320 	bic.w	r3, r3, #32
 8004d1a:	2b47      	cmp	r3, #71	; 0x47
 8004d1c:	d104      	bne.n	8004d28 <_svfprintf_r+0x3b0>
 8004d1e:	f1bb 0f00 	cmp.w	fp, #0
 8004d22:	bf08      	it	eq
 8004d24:	f04f 0b01 	moveq.w	fp, #1
 8004d28:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8004d2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8004d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d30:	1e1f      	subs	r7, r3, #0
 8004d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d34:	bfa8      	it	ge
 8004d36:	9710      	strge	r7, [sp, #64]	; 0x40
 8004d38:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d3a:	bfbd      	ittte	lt
 8004d3c:	463b      	movlt	r3, r7
 8004d3e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004d42:	9310      	strlt	r3, [sp, #64]	; 0x40
 8004d44:	2300      	movge	r3, #0
 8004d46:	bfb8      	it	lt
 8004d48:	232d      	movlt	r3, #45	; 0x2d
 8004d4a:	9316      	str	r3, [sp, #88]	; 0x58
 8004d4c:	9b06      	ldr	r3, [sp, #24]
 8004d4e:	f023 0720 	bic.w	r7, r3, #32
 8004d52:	2f46      	cmp	r7, #70	; 0x46
 8004d54:	d008      	beq.n	8004d68 <_svfprintf_r+0x3f0>
 8004d56:	2f45      	cmp	r7, #69	; 0x45
 8004d58:	d142      	bne.n	8004de0 <_svfprintf_r+0x468>
 8004d5a:	f10b 0601 	add.w	r6, fp, #1
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e004      	b.n	8004d6c <_svfprintf_r+0x3f4>
 8004d62:	f04f 0b06 	mov.w	fp, #6
 8004d66:	e7df      	b.n	8004d28 <_svfprintf_r+0x3b0>
 8004d68:	465e      	mov	r6, fp
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d6e:	9204      	str	r2, [sp, #16]
 8004d70:	aa1c      	add	r2, sp, #112	; 0x70
 8004d72:	9203      	str	r2, [sp, #12]
 8004d74:	aa1b      	add	r2, sp, #108	; 0x6c
 8004d76:	9202      	str	r2, [sp, #8]
 8004d78:	e88d 0048 	stmia.w	sp, {r3, r6}
 8004d7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d80:	4650      	mov	r0, sl
 8004d82:	f000 fe55 	bl	8005a30 <_dtoa_r>
 8004d86:	2f47      	cmp	r7, #71	; 0x47
 8004d88:	4680      	mov	r8, r0
 8004d8a:	d102      	bne.n	8004d92 <_svfprintf_r+0x41a>
 8004d8c:	07e8      	lsls	r0, r5, #31
 8004d8e:	f140 8585 	bpl.w	800589c <_svfprintf_r+0xf24>
 8004d92:	eb08 0306 	add.w	r3, r8, r6
 8004d96:	2f46      	cmp	r7, #70	; 0x46
 8004d98:	9307      	str	r3, [sp, #28]
 8004d9a:	d111      	bne.n	8004dc0 <_svfprintf_r+0x448>
 8004d9c:	f898 3000 	ldrb.w	r3, [r8]
 8004da0:	2b30      	cmp	r3, #48	; 0x30
 8004da2:	d109      	bne.n	8004db8 <_svfprintf_r+0x440>
 8004da4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004da6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004da8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004daa:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004dac:	f7fb fdf8 	bl	80009a0 <__aeabi_dcmpeq>
 8004db0:	b910      	cbnz	r0, 8004db8 <_svfprintf_r+0x440>
 8004db2:	f1c6 0601 	rsb	r6, r6, #1
 8004db6:	961b      	str	r6, [sp, #108]	; 0x6c
 8004db8:	9a07      	ldr	r2, [sp, #28]
 8004dba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004dbc:	441a      	add	r2, r3
 8004dbe:	9207      	str	r2, [sp, #28]
 8004dc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004dc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004dc4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004dc6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004dc8:	f7fb fdea 	bl	80009a0 <__aeabi_dcmpeq>
 8004dcc:	b990      	cbnz	r0, 8004df4 <_svfprintf_r+0x47c>
 8004dce:	2230      	movs	r2, #48	; 0x30
 8004dd0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004dd2:	9907      	ldr	r1, [sp, #28]
 8004dd4:	4299      	cmp	r1, r3
 8004dd6:	d90f      	bls.n	8004df8 <_svfprintf_r+0x480>
 8004dd8:	1c59      	adds	r1, r3, #1
 8004dda:	911f      	str	r1, [sp, #124]	; 0x7c
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	e7f7      	b.n	8004dd0 <_svfprintf_r+0x458>
 8004de0:	465e      	mov	r6, fp
 8004de2:	e7bc      	b.n	8004d5e <_svfprintf_r+0x3e6>
 8004de4:	080077e4 	.word	0x080077e4
 8004de8:	7fefffff 	.word	0x7fefffff
 8004dec:	080077d4 	.word	0x080077d4
 8004df0:	080077d8 	.word	0x080077d8
 8004df4:	9b07      	ldr	r3, [sp, #28]
 8004df6:	931f      	str	r3, [sp, #124]	; 0x7c
 8004df8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004dfa:	2f47      	cmp	r7, #71	; 0x47
 8004dfc:	eba3 0308 	sub.w	r3, r3, r8
 8004e00:	9307      	str	r3, [sp, #28]
 8004e02:	f040 8100 	bne.w	8005006 <_svfprintf_r+0x68e>
 8004e06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e08:	1cd9      	adds	r1, r3, #3
 8004e0a:	db02      	blt.n	8004e12 <_svfprintf_r+0x49a>
 8004e0c:	459b      	cmp	fp, r3
 8004e0e:	f280 8126 	bge.w	800505e <_svfprintf_r+0x6e6>
 8004e12:	9b06      	ldr	r3, [sp, #24]
 8004e14:	3b02      	subs	r3, #2
 8004e16:	9306      	str	r3, [sp, #24]
 8004e18:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004e1a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8004e1e:	1e53      	subs	r3, r2, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bfa8      	it	ge
 8004e24:	222b      	movge	r2, #43	; 0x2b
 8004e26:	931b      	str	r3, [sp, #108]	; 0x6c
 8004e28:	bfbc      	itt	lt
 8004e2a:	f1c2 0301 	rsblt	r3, r2, #1
 8004e2e:	222d      	movlt	r2, #45	; 0x2d
 8004e30:	2b09      	cmp	r3, #9
 8004e32:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 8004e36:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8004e3a:	f340 8100 	ble.w	800503e <_svfprintf_r+0x6c6>
 8004e3e:	260a      	movs	r6, #10
 8004e40:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8004e44:	fb93 f0f6 	sdiv	r0, r3, r6
 8004e48:	fb06 3310 	mls	r3, r6, r0, r3
 8004e4c:	2809      	cmp	r0, #9
 8004e4e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8004e52:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004e56:	f102 31ff 	add.w	r1, r2, #4294967295
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f300 80e8 	bgt.w	8005030 <_svfprintf_r+0x6b8>
 8004e60:	3330      	adds	r3, #48	; 0x30
 8004e62:	f801 3c01 	strb.w	r3, [r1, #-1]
 8004e66:	3a02      	subs	r2, #2
 8004e68:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8004e6c:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8004e70:	4282      	cmp	r2, r0
 8004e72:	4619      	mov	r1, r3
 8004e74:	f0c0 80de 	bcc.w	8005034 <_svfprintf_r+0x6bc>
 8004e78:	9a07      	ldr	r2, [sp, #28]
 8004e7a:	ab1d      	add	r3, sp, #116	; 0x74
 8004e7c:	1acb      	subs	r3, r1, r3
 8004e7e:	2a01      	cmp	r2, #1
 8004e80:	9314      	str	r3, [sp, #80]	; 0x50
 8004e82:	eb03 0b02 	add.w	fp, r3, r2
 8004e86:	dc02      	bgt.n	8004e8e <_svfprintf_r+0x516>
 8004e88:	f015 0701 	ands.w	r7, r5, #1
 8004e8c:	d002      	beq.n	8004e94 <_svfprintf_r+0x51c>
 8004e8e:	2700      	movs	r7, #0
 8004e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e92:	449b      	add	fp, r3
 8004e94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e96:	b113      	cbz	r3, 8004e9e <_svfprintf_r+0x526>
 8004e98:	232d      	movs	r3, #45	; 0x2d
 8004e9a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8004ea2:	455e      	cmp	r6, fp
 8004ea4:	4633      	mov	r3, r6
 8004ea6:	bfb8      	it	lt
 8004ea8:	465b      	movlt	r3, fp
 8004eaa:	930f      	str	r3, [sp, #60]	; 0x3c
 8004eac:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8004eb0:	b113      	cbz	r3, 8004eb8 <_svfprintf_r+0x540>
 8004eb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004eb8:	f015 0302 	ands.w	r3, r5, #2
 8004ebc:	9316      	str	r3, [sp, #88]	; 0x58
 8004ebe:	bf1e      	ittt	ne
 8004ec0:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8004ec2:	3302      	addne	r3, #2
 8004ec4:	930f      	strne	r3, [sp, #60]	; 0x3c
 8004ec6:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8004eca:	9317      	str	r3, [sp, #92]	; 0x5c
 8004ecc:	d118      	bne.n	8004f00 <_svfprintf_r+0x588>
 8004ece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ed0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	9310      	str	r3, [sp, #64]	; 0x40
 8004ed8:	dd12      	ble.n	8004f00 <_svfprintf_r+0x588>
 8004eda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004edc:	2b10      	cmp	r3, #16
 8004ede:	4bab      	ldr	r3, [pc, #684]	; (800518c <_svfprintf_r+0x814>)
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	f300 81d9 	bgt.w	8005298 <_svfprintf_r+0x920>
 8004ee6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ee8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004eea:	6063      	str	r3, [r4, #4]
 8004eec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004eee:	4413      	add	r3, r2
 8004ef0:	9323      	str	r3, [sp, #140]	; 0x8c
 8004ef2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	2b07      	cmp	r3, #7
 8004ef8:	9322      	str	r3, [sp, #136]	; 0x88
 8004efa:	f300 81e6 	bgt.w	80052ca <_svfprintf_r+0x952>
 8004efe:	3408      	adds	r4, #8
 8004f00:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8004f04:	b173      	cbz	r3, 8004f24 <_svfprintf_r+0x5ac>
 8004f06:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8004f0a:	6023      	str	r3, [r4, #0]
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	6063      	str	r3, [r4, #4]
 8004f10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f12:	3301      	adds	r3, #1
 8004f14:	9323      	str	r3, [sp, #140]	; 0x8c
 8004f16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f18:	3301      	adds	r3, #1
 8004f1a:	2b07      	cmp	r3, #7
 8004f1c:	9322      	str	r3, [sp, #136]	; 0x88
 8004f1e:	f300 81de 	bgt.w	80052de <_svfprintf_r+0x966>
 8004f22:	3408      	adds	r4, #8
 8004f24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004f26:	b16b      	cbz	r3, 8004f44 <_svfprintf_r+0x5cc>
 8004f28:	ab1a      	add	r3, sp, #104	; 0x68
 8004f2a:	6023      	str	r3, [r4, #0]
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	6063      	str	r3, [r4, #4]
 8004f30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f32:	3302      	adds	r3, #2
 8004f34:	9323      	str	r3, [sp, #140]	; 0x8c
 8004f36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f38:	3301      	adds	r3, #1
 8004f3a:	2b07      	cmp	r3, #7
 8004f3c:	9322      	str	r3, [sp, #136]	; 0x88
 8004f3e:	f300 81d8 	bgt.w	80052f2 <_svfprintf_r+0x97a>
 8004f42:	3408      	adds	r4, #8
 8004f44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f46:	2b80      	cmp	r3, #128	; 0x80
 8004f48:	d118      	bne.n	8004f7c <_svfprintf_r+0x604>
 8004f4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	9310      	str	r3, [sp, #64]	; 0x40
 8004f54:	dd12      	ble.n	8004f7c <_svfprintf_r+0x604>
 8004f56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	4b8d      	ldr	r3, [pc, #564]	; (8005190 <_svfprintf_r+0x818>)
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	f300 81d2 	bgt.w	8005306 <_svfprintf_r+0x98e>
 8004f62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f66:	6063      	str	r3, [r4, #4]
 8004f68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f6a:	4413      	add	r3, r2
 8004f6c:	9323      	str	r3, [sp, #140]	; 0x8c
 8004f6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f70:	3301      	adds	r3, #1
 8004f72:	2b07      	cmp	r3, #7
 8004f74:	9322      	str	r3, [sp, #136]	; 0x88
 8004f76:	f300 81df 	bgt.w	8005338 <_svfprintf_r+0x9c0>
 8004f7a:	3408      	adds	r4, #8
 8004f7c:	eba6 060b 	sub.w	r6, r6, fp
 8004f80:	2e00      	cmp	r6, #0
 8004f82:	dd0f      	ble.n	8004fa4 <_svfprintf_r+0x62c>
 8004f84:	4b82      	ldr	r3, [pc, #520]	; (8005190 <_svfprintf_r+0x818>)
 8004f86:	2e10      	cmp	r6, #16
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	f300 81df 	bgt.w	800534c <_svfprintf_r+0x9d4>
 8004f8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f90:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8004f92:	3301      	adds	r3, #1
 8004f94:	6066      	str	r6, [r4, #4]
 8004f96:	2b07      	cmp	r3, #7
 8004f98:	4406      	add	r6, r0
 8004f9a:	9623      	str	r6, [sp, #140]	; 0x8c
 8004f9c:	9322      	str	r3, [sp, #136]	; 0x88
 8004f9e:	f300 81ec 	bgt.w	800537a <_svfprintf_r+0xa02>
 8004fa2:	3408      	adds	r4, #8
 8004fa4:	05eb      	lsls	r3, r5, #23
 8004fa6:	f100 81f2 	bmi.w	800538e <_svfprintf_r+0xa16>
 8004faa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fac:	e884 0900 	stmia.w	r4, {r8, fp}
 8004fb0:	445b      	add	r3, fp
 8004fb2:	9323      	str	r3, [sp, #140]	; 0x8c
 8004fb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	2b07      	cmp	r3, #7
 8004fba:	9322      	str	r3, [sp, #136]	; 0x88
 8004fbc:	f340 8419 	ble.w	80057f2 <_svfprintf_r+0xe7a>
 8004fc0:	aa21      	add	r2, sp, #132	; 0x84
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	4650      	mov	r0, sl
 8004fc6:	f002 f831 	bl	800702c <__ssprint_r>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	f040 8431 	bne.w	8005832 <_svfprintf_r+0xeba>
 8004fd0:	ac2e      	add	r4, sp, #184	; 0xb8
 8004fd2:	076b      	lsls	r3, r5, #29
 8004fd4:	f100 8410 	bmi.w	80057f8 <_svfprintf_r+0xe80>
 8004fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004fde:	428a      	cmp	r2, r1
 8004fe0:	bfac      	ite	ge
 8004fe2:	189b      	addge	r3, r3, r2
 8004fe4:	185b      	addlt	r3, r3, r1
 8004fe6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fe8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fea:	b13b      	cbz	r3, 8004ffc <_svfprintf_r+0x684>
 8004fec:	aa21      	add	r2, sp, #132	; 0x84
 8004fee:	4649      	mov	r1, r9
 8004ff0:	4650      	mov	r0, sl
 8004ff2:	f002 f81b 	bl	800702c <__ssprint_r>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	f040 841b 	bne.w	8005832 <_svfprintf_r+0xeba>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	9f08      	ldr	r7, [sp, #32]
 8005000:	9322      	str	r3, [sp, #136]	; 0x88
 8005002:	ac2e      	add	r4, sp, #184	; 0xb8
 8005004:	e4f2      	b.n	80049ec <_svfprintf_r+0x74>
 8005006:	9b06      	ldr	r3, [sp, #24]
 8005008:	2b65      	cmp	r3, #101	; 0x65
 800500a:	f77f af05 	ble.w	8004e18 <_svfprintf_r+0x4a0>
 800500e:	9b06      	ldr	r3, [sp, #24]
 8005010:	2b66      	cmp	r3, #102	; 0x66
 8005012:	d124      	bne.n	800505e <_svfprintf_r+0x6e6>
 8005014:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005016:	2b00      	cmp	r3, #0
 8005018:	dd19      	ble.n	800504e <_svfprintf_r+0x6d6>
 800501a:	f1bb 0f00 	cmp.w	fp, #0
 800501e:	d101      	bne.n	8005024 <_svfprintf_r+0x6ac>
 8005020:	07ea      	lsls	r2, r5, #31
 8005022:	d502      	bpl.n	800502a <_svfprintf_r+0x6b2>
 8005024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005026:	4413      	add	r3, r2
 8005028:	445b      	add	r3, fp
 800502a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800502c:	469b      	mov	fp, r3
 800502e:	e731      	b.n	8004e94 <_svfprintf_r+0x51c>
 8005030:	460a      	mov	r2, r1
 8005032:	e707      	b.n	8004e44 <_svfprintf_r+0x4cc>
 8005034:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005038:	f803 1b01 	strb.w	r1, [r3], #1
 800503c:	e718      	b.n	8004e70 <_svfprintf_r+0x4f8>
 800503e:	2230      	movs	r2, #48	; 0x30
 8005040:	4413      	add	r3, r2
 8005042:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8005046:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 800504a:	a91e      	add	r1, sp, #120	; 0x78
 800504c:	e714      	b.n	8004e78 <_svfprintf_r+0x500>
 800504e:	f1bb 0f00 	cmp.w	fp, #0
 8005052:	d101      	bne.n	8005058 <_svfprintf_r+0x6e0>
 8005054:	07eb      	lsls	r3, r5, #31
 8005056:	d515      	bpl.n	8005084 <_svfprintf_r+0x70c>
 8005058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800505a:	3301      	adds	r3, #1
 800505c:	e7e4      	b.n	8005028 <_svfprintf_r+0x6b0>
 800505e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005060:	9b07      	ldr	r3, [sp, #28]
 8005062:	429a      	cmp	r2, r3
 8005064:	db06      	blt.n	8005074 <_svfprintf_r+0x6fc>
 8005066:	07ef      	lsls	r7, r5, #31
 8005068:	d50e      	bpl.n	8005088 <_svfprintf_r+0x710>
 800506a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800506c:	4413      	add	r3, r2
 800506e:	2267      	movs	r2, #103	; 0x67
 8005070:	9206      	str	r2, [sp, #24]
 8005072:	e7da      	b.n	800502a <_svfprintf_r+0x6b2>
 8005074:	9b07      	ldr	r3, [sp, #28]
 8005076:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005078:	2a00      	cmp	r2, #0
 800507a:	440b      	add	r3, r1
 800507c:	dcf7      	bgt.n	800506e <_svfprintf_r+0x6f6>
 800507e:	f1c2 0201 	rsb	r2, r2, #1
 8005082:	e7f3      	b.n	800506c <_svfprintf_r+0x6f4>
 8005084:	2301      	movs	r3, #1
 8005086:	e7d0      	b.n	800502a <_svfprintf_r+0x6b2>
 8005088:	4613      	mov	r3, r2
 800508a:	e7f0      	b.n	800506e <_svfprintf_r+0x6f6>
 800508c:	b10b      	cbz	r3, 8005092 <_svfprintf_r+0x71a>
 800508e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005092:	f015 0f20 	tst.w	r5, #32
 8005096:	f107 0304 	add.w	r3, r7, #4
 800509a:	d008      	beq.n	80050ae <_svfprintf_r+0x736>
 800509c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	17ce      	asrs	r6, r1, #31
 80050a2:	4608      	mov	r0, r1
 80050a4:	4631      	mov	r1, r6
 80050a6:	e9c2 0100 	strd	r0, r1, [r2]
 80050aa:	461f      	mov	r7, r3
 80050ac:	e49e      	b.n	80049ec <_svfprintf_r+0x74>
 80050ae:	06ee      	lsls	r6, r5, #27
 80050b0:	d503      	bpl.n	80050ba <_svfprintf_r+0x742>
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050b6:	6011      	str	r1, [r2, #0]
 80050b8:	e7f7      	b.n	80050aa <_svfprintf_r+0x732>
 80050ba:	0668      	lsls	r0, r5, #25
 80050bc:	d5f9      	bpl.n	80050b2 <_svfprintf_r+0x73a>
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80050c4:	8011      	strh	r1, [r2, #0]
 80050c6:	e7f0      	b.n	80050aa <_svfprintf_r+0x732>
 80050c8:	f045 0510 	orr.w	r5, r5, #16
 80050cc:	f015 0320 	ands.w	r3, r5, #32
 80050d0:	d022      	beq.n	8005118 <_svfprintf_r+0x7a0>
 80050d2:	3707      	adds	r7, #7
 80050d4:	f027 0707 	bic.w	r7, r7, #7
 80050d8:	f107 0308 	add.w	r3, r7, #8
 80050dc:	9308      	str	r3, [sp, #32]
 80050de:	e9d7 6700 	ldrd	r6, r7, [r7]
 80050e2:	2300      	movs	r3, #0
 80050e4:	2200      	movs	r2, #0
 80050e6:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80050ea:	f1bb 3fff 	cmp.w	fp, #4294967295
 80050ee:	f000 83db 	beq.w	80058a8 <_svfprintf_r+0xf30>
 80050f2:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80050f6:	920f      	str	r2, [sp, #60]	; 0x3c
 80050f8:	ea56 0207 	orrs.w	r2, r6, r7
 80050fc:	f040 83d9 	bne.w	80058b2 <_svfprintf_r+0xf3a>
 8005100:	f1bb 0f00 	cmp.w	fp, #0
 8005104:	f000 80aa 	beq.w	800525c <_svfprintf_r+0x8e4>
 8005108:	2b01      	cmp	r3, #1
 800510a:	d076      	beq.n	80051fa <_svfprintf_r+0x882>
 800510c:	2b02      	cmp	r3, #2
 800510e:	f000 8091 	beq.w	8005234 <_svfprintf_r+0x8bc>
 8005112:	2600      	movs	r6, #0
 8005114:	2700      	movs	r7, #0
 8005116:	e3d2      	b.n	80058be <_svfprintf_r+0xf46>
 8005118:	1d3a      	adds	r2, r7, #4
 800511a:	f015 0110 	ands.w	r1, r5, #16
 800511e:	9208      	str	r2, [sp, #32]
 8005120:	d002      	beq.n	8005128 <_svfprintf_r+0x7b0>
 8005122:	683e      	ldr	r6, [r7, #0]
 8005124:	2700      	movs	r7, #0
 8005126:	e7dd      	b.n	80050e4 <_svfprintf_r+0x76c>
 8005128:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800512c:	d0f9      	beq.n	8005122 <_svfprintf_r+0x7aa>
 800512e:	883e      	ldrh	r6, [r7, #0]
 8005130:	2700      	movs	r7, #0
 8005132:	e7d6      	b.n	80050e2 <_svfprintf_r+0x76a>
 8005134:	1d3b      	adds	r3, r7, #4
 8005136:	9308      	str	r3, [sp, #32]
 8005138:	2330      	movs	r3, #48	; 0x30
 800513a:	2278      	movs	r2, #120	; 0x78
 800513c:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8005140:	4b14      	ldr	r3, [pc, #80]	; (8005194 <_svfprintf_r+0x81c>)
 8005142:	683e      	ldr	r6, [r7, #0]
 8005144:	9315      	str	r3, [sp, #84]	; 0x54
 8005146:	2700      	movs	r7, #0
 8005148:	f045 0502 	orr.w	r5, r5, #2
 800514c:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8005150:	2302      	movs	r3, #2
 8005152:	9206      	str	r2, [sp, #24]
 8005154:	e7c6      	b.n	80050e4 <_svfprintf_r+0x76c>
 8005156:	2600      	movs	r6, #0
 8005158:	1d3b      	adds	r3, r7, #4
 800515a:	f1bb 3fff 	cmp.w	fp, #4294967295
 800515e:	9308      	str	r3, [sp, #32]
 8005160:	f8d7 8000 	ldr.w	r8, [r7]
 8005164:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8005168:	d00a      	beq.n	8005180 <_svfprintf_r+0x808>
 800516a:	465a      	mov	r2, fp
 800516c:	4631      	mov	r1, r6
 800516e:	4640      	mov	r0, r8
 8005170:	f001 fc54 	bl	8006a1c <memchr>
 8005174:	2800      	cmp	r0, #0
 8005176:	f000 808d 	beq.w	8005294 <_svfprintf_r+0x91c>
 800517a:	eba0 0b08 	sub.w	fp, r0, r8
 800517e:	e5c4      	b.n	8004d0a <_svfprintf_r+0x392>
 8005180:	4640      	mov	r0, r8
 8005182:	f7fa ffe5 	bl	8000150 <strlen>
 8005186:	4683      	mov	fp, r0
 8005188:	e5bf      	b.n	8004d0a <_svfprintf_r+0x392>
 800518a:	bf00      	nop
 800518c:	08007808 	.word	0x08007808
 8005190:	08007818 	.word	0x08007818
 8005194:	080077f5 	.word	0x080077f5
 8005198:	f045 0510 	orr.w	r5, r5, #16
 800519c:	06a9      	lsls	r1, r5, #26
 800519e:	d509      	bpl.n	80051b4 <_svfprintf_r+0x83c>
 80051a0:	3707      	adds	r7, #7
 80051a2:	f027 0707 	bic.w	r7, r7, #7
 80051a6:	f107 0308 	add.w	r3, r7, #8
 80051aa:	9308      	str	r3, [sp, #32]
 80051ac:	e9d7 6700 	ldrd	r6, r7, [r7]
 80051b0:	2301      	movs	r3, #1
 80051b2:	e797      	b.n	80050e4 <_svfprintf_r+0x76c>
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	f015 0f10 	tst.w	r5, #16
 80051ba:	9308      	str	r3, [sp, #32]
 80051bc:	d001      	beq.n	80051c2 <_svfprintf_r+0x84a>
 80051be:	683e      	ldr	r6, [r7, #0]
 80051c0:	e002      	b.n	80051c8 <_svfprintf_r+0x850>
 80051c2:	066a      	lsls	r2, r5, #25
 80051c4:	d5fb      	bpl.n	80051be <_svfprintf_r+0x846>
 80051c6:	883e      	ldrh	r6, [r7, #0]
 80051c8:	2700      	movs	r7, #0
 80051ca:	e7f1      	b.n	80051b0 <_svfprintf_r+0x838>
 80051cc:	b10b      	cbz	r3, 80051d2 <_svfprintf_r+0x85a>
 80051ce:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80051d2:	4ba3      	ldr	r3, [pc, #652]	; (8005460 <_svfprintf_r+0xae8>)
 80051d4:	e4c5      	b.n	8004b62 <_svfprintf_r+0x1ea>
 80051d6:	1d3b      	adds	r3, r7, #4
 80051d8:	f015 0f10 	tst.w	r5, #16
 80051dc:	9308      	str	r3, [sp, #32]
 80051de:	d001      	beq.n	80051e4 <_svfprintf_r+0x86c>
 80051e0:	683e      	ldr	r6, [r7, #0]
 80051e2:	e002      	b.n	80051ea <_svfprintf_r+0x872>
 80051e4:	066e      	lsls	r6, r5, #25
 80051e6:	d5fb      	bpl.n	80051e0 <_svfprintf_r+0x868>
 80051e8:	883e      	ldrh	r6, [r7, #0]
 80051ea:	2700      	movs	r7, #0
 80051ec:	e4c5      	b.n	8004b7a <_svfprintf_r+0x202>
 80051ee:	4643      	mov	r3, r8
 80051f0:	e366      	b.n	80058c0 <_svfprintf_r+0xf48>
 80051f2:	2f00      	cmp	r7, #0
 80051f4:	bf08      	it	eq
 80051f6:	2e0a      	cmpeq	r6, #10
 80051f8:	d205      	bcs.n	8005206 <_svfprintf_r+0x88e>
 80051fa:	3630      	adds	r6, #48	; 0x30
 80051fc:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8005200:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8005204:	e377      	b.n	80058f6 <_svfprintf_r+0xf7e>
 8005206:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800520a:	4630      	mov	r0, r6
 800520c:	4639      	mov	r1, r7
 800520e:	220a      	movs	r2, #10
 8005210:	2300      	movs	r3, #0
 8005212:	f7fb fe93 	bl	8000f3c <__aeabi_uldivmod>
 8005216:	3230      	adds	r2, #48	; 0x30
 8005218:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800521c:	2300      	movs	r3, #0
 800521e:	4630      	mov	r0, r6
 8005220:	4639      	mov	r1, r7
 8005222:	220a      	movs	r2, #10
 8005224:	f7fb fe8a 	bl	8000f3c <__aeabi_uldivmod>
 8005228:	4606      	mov	r6, r0
 800522a:	460f      	mov	r7, r1
 800522c:	ea56 0307 	orrs.w	r3, r6, r7
 8005230:	d1eb      	bne.n	800520a <_svfprintf_r+0x892>
 8005232:	e360      	b.n	80058f6 <_svfprintf_r+0xf7e>
 8005234:	2600      	movs	r6, #0
 8005236:	2700      	movs	r7, #0
 8005238:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800523c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800523e:	f006 030f 	and.w	r3, r6, #15
 8005242:	5cd3      	ldrb	r3, [r2, r3]
 8005244:	093a      	lsrs	r2, r7, #4
 8005246:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800524a:	0933      	lsrs	r3, r6, #4
 800524c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005250:	461e      	mov	r6, r3
 8005252:	4617      	mov	r7, r2
 8005254:	ea56 0307 	orrs.w	r3, r6, r7
 8005258:	d1f0      	bne.n	800523c <_svfprintf_r+0x8c4>
 800525a:	e34c      	b.n	80058f6 <_svfprintf_r+0xf7e>
 800525c:	b93b      	cbnz	r3, 800526e <_svfprintf_r+0x8f6>
 800525e:	07ea      	lsls	r2, r5, #31
 8005260:	d505      	bpl.n	800526e <_svfprintf_r+0x8f6>
 8005262:	2330      	movs	r3, #48	; 0x30
 8005264:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8005268:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800526c:	e343      	b.n	80058f6 <_svfprintf_r+0xf7e>
 800526e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8005272:	e340      	b.n	80058f6 <_svfprintf_r+0xf7e>
 8005274:	b10b      	cbz	r3, 800527a <_svfprintf_r+0x902>
 8005276:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800527a:	9b06      	ldr	r3, [sp, #24]
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 82f7 	beq.w	8005870 <_svfprintf_r+0xef8>
 8005282:	2600      	movs	r6, #0
 8005284:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005288:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800528c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8005290:	9708      	str	r7, [sp, #32]
 8005292:	e4e3      	b.n	8004c5c <_svfprintf_r+0x2e4>
 8005294:	4606      	mov	r6, r0
 8005296:	e538      	b.n	8004d0a <_svfprintf_r+0x392>
 8005298:	2310      	movs	r3, #16
 800529a:	6063      	str	r3, [r4, #4]
 800529c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800529e:	3310      	adds	r3, #16
 80052a0:	9323      	str	r3, [sp, #140]	; 0x8c
 80052a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052a4:	3301      	adds	r3, #1
 80052a6:	2b07      	cmp	r3, #7
 80052a8:	9322      	str	r3, [sp, #136]	; 0x88
 80052aa:	dc04      	bgt.n	80052b6 <_svfprintf_r+0x93e>
 80052ac:	3408      	adds	r4, #8
 80052ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052b0:	3b10      	subs	r3, #16
 80052b2:	9310      	str	r3, [sp, #64]	; 0x40
 80052b4:	e611      	b.n	8004eda <_svfprintf_r+0x562>
 80052b6:	aa21      	add	r2, sp, #132	; 0x84
 80052b8:	4649      	mov	r1, r9
 80052ba:	4650      	mov	r0, sl
 80052bc:	f001 feb6 	bl	800702c <__ssprint_r>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	f040 82b6 	bne.w	8005832 <_svfprintf_r+0xeba>
 80052c6:	ac2e      	add	r4, sp, #184	; 0xb8
 80052c8:	e7f1      	b.n	80052ae <_svfprintf_r+0x936>
 80052ca:	aa21      	add	r2, sp, #132	; 0x84
 80052cc:	4649      	mov	r1, r9
 80052ce:	4650      	mov	r0, sl
 80052d0:	f001 feac 	bl	800702c <__ssprint_r>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	f040 82ac 	bne.w	8005832 <_svfprintf_r+0xeba>
 80052da:	ac2e      	add	r4, sp, #184	; 0xb8
 80052dc:	e610      	b.n	8004f00 <_svfprintf_r+0x588>
 80052de:	aa21      	add	r2, sp, #132	; 0x84
 80052e0:	4649      	mov	r1, r9
 80052e2:	4650      	mov	r0, sl
 80052e4:	f001 fea2 	bl	800702c <__ssprint_r>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	f040 82a2 	bne.w	8005832 <_svfprintf_r+0xeba>
 80052ee:	ac2e      	add	r4, sp, #184	; 0xb8
 80052f0:	e618      	b.n	8004f24 <_svfprintf_r+0x5ac>
 80052f2:	aa21      	add	r2, sp, #132	; 0x84
 80052f4:	4649      	mov	r1, r9
 80052f6:	4650      	mov	r0, sl
 80052f8:	f001 fe98 	bl	800702c <__ssprint_r>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	f040 8298 	bne.w	8005832 <_svfprintf_r+0xeba>
 8005302:	ac2e      	add	r4, sp, #184	; 0xb8
 8005304:	e61e      	b.n	8004f44 <_svfprintf_r+0x5cc>
 8005306:	2310      	movs	r3, #16
 8005308:	6063      	str	r3, [r4, #4]
 800530a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800530c:	3310      	adds	r3, #16
 800530e:	9323      	str	r3, [sp, #140]	; 0x8c
 8005310:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005312:	3301      	adds	r3, #1
 8005314:	2b07      	cmp	r3, #7
 8005316:	9322      	str	r3, [sp, #136]	; 0x88
 8005318:	dc04      	bgt.n	8005324 <_svfprintf_r+0x9ac>
 800531a:	3408      	adds	r4, #8
 800531c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800531e:	3b10      	subs	r3, #16
 8005320:	9310      	str	r3, [sp, #64]	; 0x40
 8005322:	e618      	b.n	8004f56 <_svfprintf_r+0x5de>
 8005324:	aa21      	add	r2, sp, #132	; 0x84
 8005326:	4649      	mov	r1, r9
 8005328:	4650      	mov	r0, sl
 800532a:	f001 fe7f 	bl	800702c <__ssprint_r>
 800532e:	2800      	cmp	r0, #0
 8005330:	f040 827f 	bne.w	8005832 <_svfprintf_r+0xeba>
 8005334:	ac2e      	add	r4, sp, #184	; 0xb8
 8005336:	e7f1      	b.n	800531c <_svfprintf_r+0x9a4>
 8005338:	aa21      	add	r2, sp, #132	; 0x84
 800533a:	4649      	mov	r1, r9
 800533c:	4650      	mov	r0, sl
 800533e:	f001 fe75 	bl	800702c <__ssprint_r>
 8005342:	2800      	cmp	r0, #0
 8005344:	f040 8275 	bne.w	8005832 <_svfprintf_r+0xeba>
 8005348:	ac2e      	add	r4, sp, #184	; 0xb8
 800534a:	e617      	b.n	8004f7c <_svfprintf_r+0x604>
 800534c:	2310      	movs	r3, #16
 800534e:	6063      	str	r3, [r4, #4]
 8005350:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005352:	3310      	adds	r3, #16
 8005354:	9323      	str	r3, [sp, #140]	; 0x8c
 8005356:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005358:	3301      	adds	r3, #1
 800535a:	2b07      	cmp	r3, #7
 800535c:	9322      	str	r3, [sp, #136]	; 0x88
 800535e:	dc02      	bgt.n	8005366 <_svfprintf_r+0x9ee>
 8005360:	3408      	adds	r4, #8
 8005362:	3e10      	subs	r6, #16
 8005364:	e60e      	b.n	8004f84 <_svfprintf_r+0x60c>
 8005366:	aa21      	add	r2, sp, #132	; 0x84
 8005368:	4649      	mov	r1, r9
 800536a:	4650      	mov	r0, sl
 800536c:	f001 fe5e 	bl	800702c <__ssprint_r>
 8005370:	2800      	cmp	r0, #0
 8005372:	f040 825e 	bne.w	8005832 <_svfprintf_r+0xeba>
 8005376:	ac2e      	add	r4, sp, #184	; 0xb8
 8005378:	e7f3      	b.n	8005362 <_svfprintf_r+0x9ea>
 800537a:	aa21      	add	r2, sp, #132	; 0x84
 800537c:	4649      	mov	r1, r9
 800537e:	4650      	mov	r0, sl
 8005380:	f001 fe54 	bl	800702c <__ssprint_r>
 8005384:	2800      	cmp	r0, #0
 8005386:	f040 8254 	bne.w	8005832 <_svfprintf_r+0xeba>
 800538a:	ac2e      	add	r4, sp, #184	; 0xb8
 800538c:	e60a      	b.n	8004fa4 <_svfprintf_r+0x62c>
 800538e:	9b06      	ldr	r3, [sp, #24]
 8005390:	2b65      	cmp	r3, #101	; 0x65
 8005392:	f340 81a9 	ble.w	80056e8 <_svfprintf_r+0xd70>
 8005396:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005398:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800539a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800539c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800539e:	f7fb faff 	bl	80009a0 <__aeabi_dcmpeq>
 80053a2:	2800      	cmp	r0, #0
 80053a4:	d062      	beq.n	800546c <_svfprintf_r+0xaf4>
 80053a6:	4b2f      	ldr	r3, [pc, #188]	; (8005464 <_svfprintf_r+0xaec>)
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	2301      	movs	r3, #1
 80053ac:	6063      	str	r3, [r4, #4]
 80053ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053b0:	3301      	adds	r3, #1
 80053b2:	9323      	str	r3, [sp, #140]	; 0x8c
 80053b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053b6:	3301      	adds	r3, #1
 80053b8:	2b07      	cmp	r3, #7
 80053ba:	9322      	str	r3, [sp, #136]	; 0x88
 80053bc:	dc25      	bgt.n	800540a <_svfprintf_r+0xa92>
 80053be:	3408      	adds	r4, #8
 80053c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053c2:	9a07      	ldr	r2, [sp, #28]
 80053c4:	4293      	cmp	r3, r2
 80053c6:	db02      	blt.n	80053ce <_svfprintf_r+0xa56>
 80053c8:	07ee      	lsls	r6, r5, #31
 80053ca:	f57f ae02 	bpl.w	8004fd2 <_svfprintf_r+0x65a>
 80053ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053d2:	6023      	str	r3, [r4, #0]
 80053d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d6:	6063      	str	r3, [r4, #4]
 80053d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053da:	4413      	add	r3, r2
 80053dc:	9323      	str	r3, [sp, #140]	; 0x8c
 80053de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053e0:	3301      	adds	r3, #1
 80053e2:	2b07      	cmp	r3, #7
 80053e4:	9322      	str	r3, [sp, #136]	; 0x88
 80053e6:	dc1a      	bgt.n	800541e <_svfprintf_r+0xaa6>
 80053e8:	3408      	adds	r4, #8
 80053ea:	9b07      	ldr	r3, [sp, #28]
 80053ec:	1e5e      	subs	r6, r3, #1
 80053ee:	2e00      	cmp	r6, #0
 80053f0:	f77f adef 	ble.w	8004fd2 <_svfprintf_r+0x65a>
 80053f4:	f04f 0810 	mov.w	r8, #16
 80053f8:	4f1b      	ldr	r7, [pc, #108]	; (8005468 <_svfprintf_r+0xaf0>)
 80053fa:	2e10      	cmp	r6, #16
 80053fc:	6027      	str	r7, [r4, #0]
 80053fe:	dc18      	bgt.n	8005432 <_svfprintf_r+0xaba>
 8005400:	6066      	str	r6, [r4, #4]
 8005402:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005404:	441e      	add	r6, r3
 8005406:	9623      	str	r6, [sp, #140]	; 0x8c
 8005408:	e5d4      	b.n	8004fb4 <_svfprintf_r+0x63c>
 800540a:	aa21      	add	r2, sp, #132	; 0x84
 800540c:	4649      	mov	r1, r9
 800540e:	4650      	mov	r0, sl
 8005410:	f001 fe0c 	bl	800702c <__ssprint_r>
 8005414:	2800      	cmp	r0, #0
 8005416:	f040 820c 	bne.w	8005832 <_svfprintf_r+0xeba>
 800541a:	ac2e      	add	r4, sp, #184	; 0xb8
 800541c:	e7d0      	b.n	80053c0 <_svfprintf_r+0xa48>
 800541e:	aa21      	add	r2, sp, #132	; 0x84
 8005420:	4649      	mov	r1, r9
 8005422:	4650      	mov	r0, sl
 8005424:	f001 fe02 	bl	800702c <__ssprint_r>
 8005428:	2800      	cmp	r0, #0
 800542a:	f040 8202 	bne.w	8005832 <_svfprintf_r+0xeba>
 800542e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005430:	e7db      	b.n	80053ea <_svfprintf_r+0xa72>
 8005432:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005434:	f8c4 8004 	str.w	r8, [r4, #4]
 8005438:	3310      	adds	r3, #16
 800543a:	9323      	str	r3, [sp, #140]	; 0x8c
 800543c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800543e:	3301      	adds	r3, #1
 8005440:	2b07      	cmp	r3, #7
 8005442:	9322      	str	r3, [sp, #136]	; 0x88
 8005444:	dc02      	bgt.n	800544c <_svfprintf_r+0xad4>
 8005446:	3408      	adds	r4, #8
 8005448:	3e10      	subs	r6, #16
 800544a:	e7d6      	b.n	80053fa <_svfprintf_r+0xa82>
 800544c:	aa21      	add	r2, sp, #132	; 0x84
 800544e:	4649      	mov	r1, r9
 8005450:	4650      	mov	r0, sl
 8005452:	f001 fdeb 	bl	800702c <__ssprint_r>
 8005456:	2800      	cmp	r0, #0
 8005458:	f040 81eb 	bne.w	8005832 <_svfprintf_r+0xeba>
 800545c:	ac2e      	add	r4, sp, #184	; 0xb8
 800545e:	e7f3      	b.n	8005448 <_svfprintf_r+0xad0>
 8005460:	080077f5 	.word	0x080077f5
 8005464:	08007806 	.word	0x08007806
 8005468:	08007818 	.word	0x08007818
 800546c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800546e:	2b00      	cmp	r3, #0
 8005470:	dc7a      	bgt.n	8005568 <_svfprintf_r+0xbf0>
 8005472:	4b9b      	ldr	r3, [pc, #620]	; (80056e0 <_svfprintf_r+0xd68>)
 8005474:	6023      	str	r3, [r4, #0]
 8005476:	2301      	movs	r3, #1
 8005478:	6063      	str	r3, [r4, #4]
 800547a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800547c:	3301      	adds	r3, #1
 800547e:	9323      	str	r3, [sp, #140]	; 0x8c
 8005480:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005482:	3301      	adds	r3, #1
 8005484:	2b07      	cmp	r3, #7
 8005486:	9322      	str	r3, [sp, #136]	; 0x88
 8005488:	dc44      	bgt.n	8005514 <_svfprintf_r+0xb9c>
 800548a:	3408      	adds	r4, #8
 800548c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800548e:	b923      	cbnz	r3, 800549a <_svfprintf_r+0xb22>
 8005490:	9b07      	ldr	r3, [sp, #28]
 8005492:	b913      	cbnz	r3, 800549a <_svfprintf_r+0xb22>
 8005494:	07e8      	lsls	r0, r5, #31
 8005496:	f57f ad9c 	bpl.w	8004fd2 <_svfprintf_r+0x65a>
 800549a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800549c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800549e:	6023      	str	r3, [r4, #0]
 80054a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054a2:	6063      	str	r3, [r4, #4]
 80054a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054a6:	4413      	add	r3, r2
 80054a8:	9323      	str	r3, [sp, #140]	; 0x8c
 80054aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054ac:	3301      	adds	r3, #1
 80054ae:	2b07      	cmp	r3, #7
 80054b0:	9322      	str	r3, [sp, #136]	; 0x88
 80054b2:	dc39      	bgt.n	8005528 <_svfprintf_r+0xbb0>
 80054b4:	f104 0308 	add.w	r3, r4, #8
 80054b8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80054ba:	2e00      	cmp	r6, #0
 80054bc:	da19      	bge.n	80054f2 <_svfprintf_r+0xb7a>
 80054be:	2410      	movs	r4, #16
 80054c0:	4f88      	ldr	r7, [pc, #544]	; (80056e4 <_svfprintf_r+0xd6c>)
 80054c2:	4276      	negs	r6, r6
 80054c4:	2e10      	cmp	r6, #16
 80054c6:	601f      	str	r7, [r3, #0]
 80054c8:	dc38      	bgt.n	800553c <_svfprintf_r+0xbc4>
 80054ca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80054cc:	605e      	str	r6, [r3, #4]
 80054ce:	4416      	add	r6, r2
 80054d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80054d2:	9623      	str	r6, [sp, #140]	; 0x8c
 80054d4:	3201      	adds	r2, #1
 80054d6:	2a07      	cmp	r2, #7
 80054d8:	f103 0308 	add.w	r3, r3, #8
 80054dc:	9222      	str	r2, [sp, #136]	; 0x88
 80054de:	dd08      	ble.n	80054f2 <_svfprintf_r+0xb7a>
 80054e0:	aa21      	add	r2, sp, #132	; 0x84
 80054e2:	4649      	mov	r1, r9
 80054e4:	4650      	mov	r0, sl
 80054e6:	f001 fda1 	bl	800702c <__ssprint_r>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	f040 81a1 	bne.w	8005832 <_svfprintf_r+0xeba>
 80054f0:	ab2e      	add	r3, sp, #184	; 0xb8
 80054f2:	9a07      	ldr	r2, [sp, #28]
 80054f4:	9907      	ldr	r1, [sp, #28]
 80054f6:	605a      	str	r2, [r3, #4]
 80054f8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80054fa:	f8c3 8000 	str.w	r8, [r3]
 80054fe:	440a      	add	r2, r1
 8005500:	9223      	str	r2, [sp, #140]	; 0x8c
 8005502:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005504:	3201      	adds	r2, #1
 8005506:	2a07      	cmp	r2, #7
 8005508:	9222      	str	r2, [sp, #136]	; 0x88
 800550a:	f73f ad59 	bgt.w	8004fc0 <_svfprintf_r+0x648>
 800550e:	f103 0408 	add.w	r4, r3, #8
 8005512:	e55e      	b.n	8004fd2 <_svfprintf_r+0x65a>
 8005514:	aa21      	add	r2, sp, #132	; 0x84
 8005516:	4649      	mov	r1, r9
 8005518:	4650      	mov	r0, sl
 800551a:	f001 fd87 	bl	800702c <__ssprint_r>
 800551e:	2800      	cmp	r0, #0
 8005520:	f040 8187 	bne.w	8005832 <_svfprintf_r+0xeba>
 8005524:	ac2e      	add	r4, sp, #184	; 0xb8
 8005526:	e7b1      	b.n	800548c <_svfprintf_r+0xb14>
 8005528:	aa21      	add	r2, sp, #132	; 0x84
 800552a:	4649      	mov	r1, r9
 800552c:	4650      	mov	r0, sl
 800552e:	f001 fd7d 	bl	800702c <__ssprint_r>
 8005532:	2800      	cmp	r0, #0
 8005534:	f040 817d 	bne.w	8005832 <_svfprintf_r+0xeba>
 8005538:	ab2e      	add	r3, sp, #184	; 0xb8
 800553a:	e7bd      	b.n	80054b8 <_svfprintf_r+0xb40>
 800553c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800553e:	605c      	str	r4, [r3, #4]
 8005540:	3210      	adds	r2, #16
 8005542:	9223      	str	r2, [sp, #140]	; 0x8c
 8005544:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005546:	3201      	adds	r2, #1
 8005548:	2a07      	cmp	r2, #7
 800554a:	9222      	str	r2, [sp, #136]	; 0x88
 800554c:	dc02      	bgt.n	8005554 <_svfprintf_r+0xbdc>
 800554e:	3308      	adds	r3, #8
 8005550:	3e10      	subs	r6, #16
 8005552:	e7b7      	b.n	80054c4 <_svfprintf_r+0xb4c>
 8005554:	aa21      	add	r2, sp, #132	; 0x84
 8005556:	4649      	mov	r1, r9
 8005558:	4650      	mov	r0, sl
 800555a:	f001 fd67 	bl	800702c <__ssprint_r>
 800555e:	2800      	cmp	r0, #0
 8005560:	f040 8167 	bne.w	8005832 <_svfprintf_r+0xeba>
 8005564:	ab2e      	add	r3, sp, #184	; 0xb8
 8005566:	e7f3      	b.n	8005550 <_svfprintf_r+0xbd8>
 8005568:	9b07      	ldr	r3, [sp, #28]
 800556a:	42bb      	cmp	r3, r7
 800556c:	bfa8      	it	ge
 800556e:	463b      	movge	r3, r7
 8005570:	2b00      	cmp	r3, #0
 8005572:	461e      	mov	r6, r3
 8005574:	dd0b      	ble.n	800558e <_svfprintf_r+0xc16>
 8005576:	6063      	str	r3, [r4, #4]
 8005578:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800557a:	f8c4 8000 	str.w	r8, [r4]
 800557e:	4433      	add	r3, r6
 8005580:	9323      	str	r3, [sp, #140]	; 0x8c
 8005582:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005584:	3301      	adds	r3, #1
 8005586:	2b07      	cmp	r3, #7
 8005588:	9322      	str	r3, [sp, #136]	; 0x88
 800558a:	dc5f      	bgt.n	800564c <_svfprintf_r+0xcd4>
 800558c:	3408      	adds	r4, #8
 800558e:	2e00      	cmp	r6, #0
 8005590:	bfb4      	ite	lt
 8005592:	463e      	movlt	r6, r7
 8005594:	1bbe      	subge	r6, r7, r6
 8005596:	2e00      	cmp	r6, #0
 8005598:	dd0f      	ble.n	80055ba <_svfprintf_r+0xc42>
 800559a:	f8df b148 	ldr.w	fp, [pc, #328]	; 80056e4 <_svfprintf_r+0xd6c>
 800559e:	2e10      	cmp	r6, #16
 80055a0:	f8c4 b000 	str.w	fp, [r4]
 80055a4:	dc5c      	bgt.n	8005660 <_svfprintf_r+0xce8>
 80055a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055a8:	6066      	str	r6, [r4, #4]
 80055aa:	441e      	add	r6, r3
 80055ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055ae:	9623      	str	r6, [sp, #140]	; 0x8c
 80055b0:	3301      	adds	r3, #1
 80055b2:	2b07      	cmp	r3, #7
 80055b4:	9322      	str	r3, [sp, #136]	; 0x88
 80055b6:	dc6a      	bgt.n	800568e <_svfprintf_r+0xd16>
 80055b8:	3408      	adds	r4, #8
 80055ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055bc:	9a07      	ldr	r2, [sp, #28]
 80055be:	4293      	cmp	r3, r2
 80055c0:	db01      	blt.n	80055c6 <_svfprintf_r+0xc4e>
 80055c2:	07e9      	lsls	r1, r5, #31
 80055c4:	d50d      	bpl.n	80055e2 <_svfprintf_r+0xc6a>
 80055c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ca:	6023      	str	r3, [r4, #0]
 80055cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ce:	6063      	str	r3, [r4, #4]
 80055d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055d2:	4413      	add	r3, r2
 80055d4:	9323      	str	r3, [sp, #140]	; 0x8c
 80055d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055d8:	3301      	adds	r3, #1
 80055da:	2b07      	cmp	r3, #7
 80055dc:	9322      	str	r3, [sp, #136]	; 0x88
 80055de:	dc60      	bgt.n	80056a2 <_svfprintf_r+0xd2a>
 80055e0:	3408      	adds	r4, #8
 80055e2:	9b07      	ldr	r3, [sp, #28]
 80055e4:	9a07      	ldr	r2, [sp, #28]
 80055e6:	1bde      	subs	r6, r3, r7
 80055e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	429e      	cmp	r6, r3
 80055ee:	bfa8      	it	ge
 80055f0:	461e      	movge	r6, r3
 80055f2:	2e00      	cmp	r6, #0
 80055f4:	dd0b      	ble.n	800560e <_svfprintf_r+0xc96>
 80055f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055f8:	4447      	add	r7, r8
 80055fa:	4433      	add	r3, r6
 80055fc:	9323      	str	r3, [sp, #140]	; 0x8c
 80055fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005600:	6027      	str	r7, [r4, #0]
 8005602:	3301      	adds	r3, #1
 8005604:	2b07      	cmp	r3, #7
 8005606:	6066      	str	r6, [r4, #4]
 8005608:	9322      	str	r3, [sp, #136]	; 0x88
 800560a:	dc54      	bgt.n	80056b6 <_svfprintf_r+0xd3e>
 800560c:	3408      	adds	r4, #8
 800560e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005610:	9a07      	ldr	r2, [sp, #28]
 8005612:	2e00      	cmp	r6, #0
 8005614:	eba2 0303 	sub.w	r3, r2, r3
 8005618:	bfb4      	ite	lt
 800561a:	461e      	movlt	r6, r3
 800561c:	1b9e      	subge	r6, r3, r6
 800561e:	2e00      	cmp	r6, #0
 8005620:	f77f acd7 	ble.w	8004fd2 <_svfprintf_r+0x65a>
 8005624:	f04f 0810 	mov.w	r8, #16
 8005628:	4f2e      	ldr	r7, [pc, #184]	; (80056e4 <_svfprintf_r+0xd6c>)
 800562a:	2e10      	cmp	r6, #16
 800562c:	6027      	str	r7, [r4, #0]
 800562e:	f77f aee7 	ble.w	8005400 <_svfprintf_r+0xa88>
 8005632:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005634:	f8c4 8004 	str.w	r8, [r4, #4]
 8005638:	3310      	adds	r3, #16
 800563a:	9323      	str	r3, [sp, #140]	; 0x8c
 800563c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800563e:	3301      	adds	r3, #1
 8005640:	2b07      	cmp	r3, #7
 8005642:	9322      	str	r3, [sp, #136]	; 0x88
 8005644:	dc41      	bgt.n	80056ca <_svfprintf_r+0xd52>
 8005646:	3408      	adds	r4, #8
 8005648:	3e10      	subs	r6, #16
 800564a:	e7ee      	b.n	800562a <_svfprintf_r+0xcb2>
 800564c:	aa21      	add	r2, sp, #132	; 0x84
 800564e:	4649      	mov	r1, r9
 8005650:	4650      	mov	r0, sl
 8005652:	f001 fceb 	bl	800702c <__ssprint_r>
 8005656:	2800      	cmp	r0, #0
 8005658:	f040 80eb 	bne.w	8005832 <_svfprintf_r+0xeba>
 800565c:	ac2e      	add	r4, sp, #184	; 0xb8
 800565e:	e796      	b.n	800558e <_svfprintf_r+0xc16>
 8005660:	2310      	movs	r3, #16
 8005662:	6063      	str	r3, [r4, #4]
 8005664:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005666:	3310      	adds	r3, #16
 8005668:	9323      	str	r3, [sp, #140]	; 0x8c
 800566a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800566c:	3301      	adds	r3, #1
 800566e:	2b07      	cmp	r3, #7
 8005670:	9322      	str	r3, [sp, #136]	; 0x88
 8005672:	dc02      	bgt.n	800567a <_svfprintf_r+0xd02>
 8005674:	3408      	adds	r4, #8
 8005676:	3e10      	subs	r6, #16
 8005678:	e791      	b.n	800559e <_svfprintf_r+0xc26>
 800567a:	aa21      	add	r2, sp, #132	; 0x84
 800567c:	4649      	mov	r1, r9
 800567e:	4650      	mov	r0, sl
 8005680:	f001 fcd4 	bl	800702c <__ssprint_r>
 8005684:	2800      	cmp	r0, #0
 8005686:	f040 80d4 	bne.w	8005832 <_svfprintf_r+0xeba>
 800568a:	ac2e      	add	r4, sp, #184	; 0xb8
 800568c:	e7f3      	b.n	8005676 <_svfprintf_r+0xcfe>
 800568e:	aa21      	add	r2, sp, #132	; 0x84
 8005690:	4649      	mov	r1, r9
 8005692:	4650      	mov	r0, sl
 8005694:	f001 fcca 	bl	800702c <__ssprint_r>
 8005698:	2800      	cmp	r0, #0
 800569a:	f040 80ca 	bne.w	8005832 <_svfprintf_r+0xeba>
 800569e:	ac2e      	add	r4, sp, #184	; 0xb8
 80056a0:	e78b      	b.n	80055ba <_svfprintf_r+0xc42>
 80056a2:	aa21      	add	r2, sp, #132	; 0x84
 80056a4:	4649      	mov	r1, r9
 80056a6:	4650      	mov	r0, sl
 80056a8:	f001 fcc0 	bl	800702c <__ssprint_r>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	f040 80c0 	bne.w	8005832 <_svfprintf_r+0xeba>
 80056b2:	ac2e      	add	r4, sp, #184	; 0xb8
 80056b4:	e795      	b.n	80055e2 <_svfprintf_r+0xc6a>
 80056b6:	aa21      	add	r2, sp, #132	; 0x84
 80056b8:	4649      	mov	r1, r9
 80056ba:	4650      	mov	r0, sl
 80056bc:	f001 fcb6 	bl	800702c <__ssprint_r>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	f040 80b6 	bne.w	8005832 <_svfprintf_r+0xeba>
 80056c6:	ac2e      	add	r4, sp, #184	; 0xb8
 80056c8:	e7a1      	b.n	800560e <_svfprintf_r+0xc96>
 80056ca:	aa21      	add	r2, sp, #132	; 0x84
 80056cc:	4649      	mov	r1, r9
 80056ce:	4650      	mov	r0, sl
 80056d0:	f001 fcac 	bl	800702c <__ssprint_r>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	f040 80ac 	bne.w	8005832 <_svfprintf_r+0xeba>
 80056da:	ac2e      	add	r4, sp, #184	; 0xb8
 80056dc:	e7b4      	b.n	8005648 <_svfprintf_r+0xcd0>
 80056de:	bf00      	nop
 80056e0:	08007806 	.word	0x08007806
 80056e4:	08007818 	.word	0x08007818
 80056e8:	9b07      	ldr	r3, [sp, #28]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	dc01      	bgt.n	80056f2 <_svfprintf_r+0xd7a>
 80056ee:	07ea      	lsls	r2, r5, #31
 80056f0:	d576      	bpl.n	80057e0 <_svfprintf_r+0xe68>
 80056f2:	2301      	movs	r3, #1
 80056f4:	6063      	str	r3, [r4, #4]
 80056f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056f8:	f8c4 8000 	str.w	r8, [r4]
 80056fc:	3301      	adds	r3, #1
 80056fe:	9323      	str	r3, [sp, #140]	; 0x8c
 8005700:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005702:	3301      	adds	r3, #1
 8005704:	2b07      	cmp	r3, #7
 8005706:	9322      	str	r3, [sp, #136]	; 0x88
 8005708:	dc36      	bgt.n	8005778 <_svfprintf_r+0xe00>
 800570a:	3408      	adds	r4, #8
 800570c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800570e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005714:	6063      	str	r3, [r4, #4]
 8005716:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005718:	4413      	add	r3, r2
 800571a:	9323      	str	r3, [sp, #140]	; 0x8c
 800571c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800571e:	3301      	adds	r3, #1
 8005720:	2b07      	cmp	r3, #7
 8005722:	9322      	str	r3, [sp, #136]	; 0x88
 8005724:	dc31      	bgt.n	800578a <_svfprintf_r+0xe12>
 8005726:	3408      	adds	r4, #8
 8005728:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800572a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800572c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800572e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005730:	f7fb f936 	bl	80009a0 <__aeabi_dcmpeq>
 8005734:	9b07      	ldr	r3, [sp, #28]
 8005736:	1e5e      	subs	r6, r3, #1
 8005738:	2800      	cmp	r0, #0
 800573a:	d12f      	bne.n	800579c <_svfprintf_r+0xe24>
 800573c:	f108 0301 	add.w	r3, r8, #1
 8005740:	e884 0048 	stmia.w	r4, {r3, r6}
 8005744:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005746:	9a07      	ldr	r2, [sp, #28]
 8005748:	3b01      	subs	r3, #1
 800574a:	4413      	add	r3, r2
 800574c:	9323      	str	r3, [sp, #140]	; 0x8c
 800574e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005750:	3301      	adds	r3, #1
 8005752:	2b07      	cmp	r3, #7
 8005754:	9322      	str	r3, [sp, #136]	; 0x88
 8005756:	dd4a      	ble.n	80057ee <_svfprintf_r+0xe76>
 8005758:	aa21      	add	r2, sp, #132	; 0x84
 800575a:	4649      	mov	r1, r9
 800575c:	4650      	mov	r0, sl
 800575e:	f001 fc65 	bl	800702c <__ssprint_r>
 8005762:	2800      	cmp	r0, #0
 8005764:	d165      	bne.n	8005832 <_svfprintf_r+0xeba>
 8005766:	ac2e      	add	r4, sp, #184	; 0xb8
 8005768:	ab1d      	add	r3, sp, #116	; 0x74
 800576a:	6023      	str	r3, [r4, #0]
 800576c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800576e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005770:	6063      	str	r3, [r4, #4]
 8005772:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005774:	4413      	add	r3, r2
 8005776:	e41c      	b.n	8004fb2 <_svfprintf_r+0x63a>
 8005778:	aa21      	add	r2, sp, #132	; 0x84
 800577a:	4649      	mov	r1, r9
 800577c:	4650      	mov	r0, sl
 800577e:	f001 fc55 	bl	800702c <__ssprint_r>
 8005782:	2800      	cmp	r0, #0
 8005784:	d155      	bne.n	8005832 <_svfprintf_r+0xeba>
 8005786:	ac2e      	add	r4, sp, #184	; 0xb8
 8005788:	e7c0      	b.n	800570c <_svfprintf_r+0xd94>
 800578a:	aa21      	add	r2, sp, #132	; 0x84
 800578c:	4649      	mov	r1, r9
 800578e:	4650      	mov	r0, sl
 8005790:	f001 fc4c 	bl	800702c <__ssprint_r>
 8005794:	2800      	cmp	r0, #0
 8005796:	d14c      	bne.n	8005832 <_svfprintf_r+0xeba>
 8005798:	ac2e      	add	r4, sp, #184	; 0xb8
 800579a:	e7c5      	b.n	8005728 <_svfprintf_r+0xdb0>
 800579c:	2e00      	cmp	r6, #0
 800579e:	dde3      	ble.n	8005768 <_svfprintf_r+0xdf0>
 80057a0:	f04f 0810 	mov.w	r8, #16
 80057a4:	4f58      	ldr	r7, [pc, #352]	; (8005908 <_svfprintf_r+0xf90>)
 80057a6:	2e10      	cmp	r6, #16
 80057a8:	6027      	str	r7, [r4, #0]
 80057aa:	dc04      	bgt.n	80057b6 <_svfprintf_r+0xe3e>
 80057ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057ae:	6066      	str	r6, [r4, #4]
 80057b0:	441e      	add	r6, r3
 80057b2:	9623      	str	r6, [sp, #140]	; 0x8c
 80057b4:	e7cb      	b.n	800574e <_svfprintf_r+0xdd6>
 80057b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057b8:	f8c4 8004 	str.w	r8, [r4, #4]
 80057bc:	3310      	adds	r3, #16
 80057be:	9323      	str	r3, [sp, #140]	; 0x8c
 80057c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057c2:	3301      	adds	r3, #1
 80057c4:	2b07      	cmp	r3, #7
 80057c6:	9322      	str	r3, [sp, #136]	; 0x88
 80057c8:	dc02      	bgt.n	80057d0 <_svfprintf_r+0xe58>
 80057ca:	3408      	adds	r4, #8
 80057cc:	3e10      	subs	r6, #16
 80057ce:	e7ea      	b.n	80057a6 <_svfprintf_r+0xe2e>
 80057d0:	aa21      	add	r2, sp, #132	; 0x84
 80057d2:	4649      	mov	r1, r9
 80057d4:	4650      	mov	r0, sl
 80057d6:	f001 fc29 	bl	800702c <__ssprint_r>
 80057da:	bb50      	cbnz	r0, 8005832 <_svfprintf_r+0xeba>
 80057dc:	ac2e      	add	r4, sp, #184	; 0xb8
 80057de:	e7f5      	b.n	80057cc <_svfprintf_r+0xe54>
 80057e0:	2301      	movs	r3, #1
 80057e2:	6063      	str	r3, [r4, #4]
 80057e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057e6:	f8c4 8000 	str.w	r8, [r4]
 80057ea:	3301      	adds	r3, #1
 80057ec:	e7ae      	b.n	800574c <_svfprintf_r+0xdd4>
 80057ee:	3408      	adds	r4, #8
 80057f0:	e7ba      	b.n	8005768 <_svfprintf_r+0xdf0>
 80057f2:	3408      	adds	r4, #8
 80057f4:	f7ff bbed 	b.w	8004fd2 <_svfprintf_r+0x65a>
 80057f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057fc:	1a9d      	subs	r5, r3, r2
 80057fe:	2d00      	cmp	r5, #0
 8005800:	f77f abea 	ble.w	8004fd8 <_svfprintf_r+0x660>
 8005804:	2610      	movs	r6, #16
 8005806:	4b41      	ldr	r3, [pc, #260]	; (800590c <_svfprintf_r+0xf94>)
 8005808:	2d10      	cmp	r5, #16
 800580a:	6023      	str	r3, [r4, #0]
 800580c:	dc1b      	bgt.n	8005846 <_svfprintf_r+0xece>
 800580e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005810:	6065      	str	r5, [r4, #4]
 8005812:	441d      	add	r5, r3
 8005814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005816:	9523      	str	r5, [sp, #140]	; 0x8c
 8005818:	3301      	adds	r3, #1
 800581a:	2b07      	cmp	r3, #7
 800581c:	9322      	str	r3, [sp, #136]	; 0x88
 800581e:	f77f abdb 	ble.w	8004fd8 <_svfprintf_r+0x660>
 8005822:	aa21      	add	r2, sp, #132	; 0x84
 8005824:	4649      	mov	r1, r9
 8005826:	4650      	mov	r0, sl
 8005828:	f001 fc00 	bl	800702c <__ssprint_r>
 800582c:	2800      	cmp	r0, #0
 800582e:	f43f abd3 	beq.w	8004fd8 <_svfprintf_r+0x660>
 8005832:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005836:	f013 0f40 	tst.w	r3, #64	; 0x40
 800583a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800583c:	bf18      	it	ne
 800583e:	f04f 33ff 	movne.w	r3, #4294967295
 8005842:	f7ff b8bd 	b.w	80049c0 <_svfprintf_r+0x48>
 8005846:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005848:	6066      	str	r6, [r4, #4]
 800584a:	3310      	adds	r3, #16
 800584c:	9323      	str	r3, [sp, #140]	; 0x8c
 800584e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005850:	3301      	adds	r3, #1
 8005852:	2b07      	cmp	r3, #7
 8005854:	9322      	str	r3, [sp, #136]	; 0x88
 8005856:	dc02      	bgt.n	800585e <_svfprintf_r+0xee6>
 8005858:	3408      	adds	r4, #8
 800585a:	3d10      	subs	r5, #16
 800585c:	e7d3      	b.n	8005806 <_svfprintf_r+0xe8e>
 800585e:	aa21      	add	r2, sp, #132	; 0x84
 8005860:	4649      	mov	r1, r9
 8005862:	4650      	mov	r0, sl
 8005864:	f001 fbe2 	bl	800702c <__ssprint_r>
 8005868:	2800      	cmp	r0, #0
 800586a:	d1e2      	bne.n	8005832 <_svfprintf_r+0xeba>
 800586c:	ac2e      	add	r4, sp, #184	; 0xb8
 800586e:	e7f4      	b.n	800585a <_svfprintf_r+0xee2>
 8005870:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0dd      	beq.n	8005832 <_svfprintf_r+0xeba>
 8005876:	aa21      	add	r2, sp, #132	; 0x84
 8005878:	4649      	mov	r1, r9
 800587a:	4650      	mov	r0, sl
 800587c:	f001 fbd6 	bl	800702c <__ssprint_r>
 8005880:	e7d7      	b.n	8005832 <_svfprintf_r+0xeba>
 8005882:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005886:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005888:	990e      	ldr	r1, [sp, #56]	; 0x38
 800588a:	f7fb f8bb 	bl	8000a04 <__aeabi_dcmpun>
 800588e:	2800      	cmp	r0, #0
 8005890:	f43f aa3d 	beq.w	8004d0e <_svfprintf_r+0x396>
 8005894:	4b1e      	ldr	r3, [pc, #120]	; (8005910 <_svfprintf_r+0xf98>)
 8005896:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <_svfprintf_r+0xf9c>)
 8005898:	f7ff ba2d 	b.w	8004cf6 <_svfprintf_r+0x37e>
 800589c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800589e:	eba3 0308 	sub.w	r3, r3, r8
 80058a2:	9307      	str	r3, [sp, #28]
 80058a4:	f7ff baaf 	b.w	8004e06 <_svfprintf_r+0x48e>
 80058a8:	ea56 0207 	orrs.w	r2, r6, r7
 80058ac:	950f      	str	r5, [sp, #60]	; 0x3c
 80058ae:	f43f ac2b 	beq.w	8005108 <_svfprintf_r+0x790>
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	f43f ac9d 	beq.w	80051f2 <_svfprintf_r+0x87a>
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	f43f acbd 	beq.w	8005238 <_svfprintf_r+0x8c0>
 80058be:	ab2e      	add	r3, sp, #184	; 0xb8
 80058c0:	08f1      	lsrs	r1, r6, #3
 80058c2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80058c6:	08f8      	lsrs	r0, r7, #3
 80058c8:	f006 0207 	and.w	r2, r6, #7
 80058cc:	4607      	mov	r7, r0
 80058ce:	460e      	mov	r6, r1
 80058d0:	3230      	adds	r2, #48	; 0x30
 80058d2:	ea56 0107 	orrs.w	r1, r6, r7
 80058d6:	f103 38ff 	add.w	r8, r3, #4294967295
 80058da:	f803 2c01 	strb.w	r2, [r3, #-1]
 80058de:	f47f ac86 	bne.w	80051ee <_svfprintf_r+0x876>
 80058e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80058e4:	07c9      	lsls	r1, r1, #31
 80058e6:	d506      	bpl.n	80058f6 <_svfprintf_r+0xf7e>
 80058e8:	2a30      	cmp	r2, #48	; 0x30
 80058ea:	d004      	beq.n	80058f6 <_svfprintf_r+0xf7e>
 80058ec:	2230      	movs	r2, #48	; 0x30
 80058ee:	f808 2c01 	strb.w	r2, [r8, #-1]
 80058f2:	f1a3 0802 	sub.w	r8, r3, #2
 80058f6:	ab2e      	add	r3, sp, #184	; 0xb8
 80058f8:	465e      	mov	r6, fp
 80058fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80058fc:	eba3 0b08 	sub.w	fp, r3, r8
 8005900:	2700      	movs	r7, #0
 8005902:	f7ff bace 	b.w	8004ea2 <_svfprintf_r+0x52a>
 8005906:	bf00      	nop
 8005908:	08007818 	.word	0x08007818
 800590c:	08007808 	.word	0x08007808
 8005910:	080077dc 	.word	0x080077dc
 8005914:	080077e0 	.word	0x080077e0

08005918 <quorem>:
 8005918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	6903      	ldr	r3, [r0, #16]
 800591e:	690c      	ldr	r4, [r1, #16]
 8005920:	4680      	mov	r8, r0
 8005922:	429c      	cmp	r4, r3
 8005924:	f300 8082 	bgt.w	8005a2c <quorem+0x114>
 8005928:	3c01      	subs	r4, #1
 800592a:	f101 0714 	add.w	r7, r1, #20
 800592e:	f100 0614 	add.w	r6, r0, #20
 8005932:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005936:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800593a:	3501      	adds	r5, #1
 800593c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005940:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005944:	eb06 030e 	add.w	r3, r6, lr
 8005948:	eb07 090e 	add.w	r9, r7, lr
 800594c:	9301      	str	r3, [sp, #4]
 800594e:	b38d      	cbz	r5, 80059b4 <quorem+0x9c>
 8005950:	f04f 0a00 	mov.w	sl, #0
 8005954:	4638      	mov	r0, r7
 8005956:	46b4      	mov	ip, r6
 8005958:	46d3      	mov	fp, sl
 800595a:	f850 2b04 	ldr.w	r2, [r0], #4
 800595e:	b293      	uxth	r3, r2
 8005960:	fb05 a303 	mla	r3, r5, r3, sl
 8005964:	0c12      	lsrs	r2, r2, #16
 8005966:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800596a:	fb05 a202 	mla	r2, r5, r2, sl
 800596e:	b29b      	uxth	r3, r3
 8005970:	ebab 0303 	sub.w	r3, fp, r3
 8005974:	f8bc b000 	ldrh.w	fp, [ip]
 8005978:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800597c:	445b      	add	r3, fp
 800597e:	fa1f fb82 	uxth.w	fp, r2
 8005982:	f8dc 2000 	ldr.w	r2, [ip]
 8005986:	4581      	cmp	r9, r0
 8005988:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800598c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005990:	b29b      	uxth	r3, r3
 8005992:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005996:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800599a:	f84c 3b04 	str.w	r3, [ip], #4
 800599e:	d2dc      	bcs.n	800595a <quorem+0x42>
 80059a0:	f856 300e 	ldr.w	r3, [r6, lr]
 80059a4:	b933      	cbnz	r3, 80059b4 <quorem+0x9c>
 80059a6:	9b01      	ldr	r3, [sp, #4]
 80059a8:	3b04      	subs	r3, #4
 80059aa:	429e      	cmp	r6, r3
 80059ac:	461a      	mov	r2, r3
 80059ae:	d331      	bcc.n	8005a14 <quorem+0xfc>
 80059b0:	f8c8 4010 	str.w	r4, [r8, #16]
 80059b4:	4640      	mov	r0, r8
 80059b6:	f001 fa60 	bl	8006e7a <__mcmp>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	db26      	blt.n	8005a0c <quorem+0xf4>
 80059be:	4630      	mov	r0, r6
 80059c0:	f04f 0e00 	mov.w	lr, #0
 80059c4:	3501      	adds	r5, #1
 80059c6:	f857 1b04 	ldr.w	r1, [r7], #4
 80059ca:	f8d0 c000 	ldr.w	ip, [r0]
 80059ce:	b28b      	uxth	r3, r1
 80059d0:	ebae 0303 	sub.w	r3, lr, r3
 80059d4:	fa1f f28c 	uxth.w	r2, ip
 80059d8:	4413      	add	r3, r2
 80059da:	0c0a      	lsrs	r2, r1, #16
 80059dc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80059e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059ea:	45b9      	cmp	r9, r7
 80059ec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80059f0:	f840 3b04 	str.w	r3, [r0], #4
 80059f4:	d2e7      	bcs.n	80059c6 <quorem+0xae>
 80059f6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80059fa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80059fe:	b92a      	cbnz	r2, 8005a0c <quorem+0xf4>
 8005a00:	3b04      	subs	r3, #4
 8005a02:	429e      	cmp	r6, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	d30b      	bcc.n	8005a20 <quorem+0x108>
 8005a08:	f8c8 4010 	str.w	r4, [r8, #16]
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	b003      	add	sp, #12
 8005a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a14:	6812      	ldr	r2, [r2, #0]
 8005a16:	3b04      	subs	r3, #4
 8005a18:	2a00      	cmp	r2, #0
 8005a1a:	d1c9      	bne.n	80059b0 <quorem+0x98>
 8005a1c:	3c01      	subs	r4, #1
 8005a1e:	e7c4      	b.n	80059aa <quorem+0x92>
 8005a20:	6812      	ldr	r2, [r2, #0]
 8005a22:	3b04      	subs	r3, #4
 8005a24:	2a00      	cmp	r2, #0
 8005a26:	d1ef      	bne.n	8005a08 <quorem+0xf0>
 8005a28:	3c01      	subs	r4, #1
 8005a2a:	e7ea      	b.n	8005a02 <quorem+0xea>
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	e7ee      	b.n	8005a0e <quorem+0xf6>

08005a30 <_dtoa_r>:
 8005a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a34:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a36:	b095      	sub	sp, #84	; 0x54
 8005a38:	4604      	mov	r4, r0
 8005a3a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005a3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a40:	b93e      	cbnz	r6, 8005a52 <_dtoa_r+0x22>
 8005a42:	2010      	movs	r0, #16
 8005a44:	f000 fdd6 	bl	80065f4 <malloc>
 8005a48:	6260      	str	r0, [r4, #36]	; 0x24
 8005a4a:	6046      	str	r6, [r0, #4]
 8005a4c:	6086      	str	r6, [r0, #8]
 8005a4e:	6006      	str	r6, [r0, #0]
 8005a50:	60c6      	str	r6, [r0, #12]
 8005a52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a54:	6819      	ldr	r1, [r3, #0]
 8005a56:	b151      	cbz	r1, 8005a6e <_dtoa_r+0x3e>
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4093      	lsls	r3, r2
 8005a5e:	604a      	str	r2, [r1, #4]
 8005a60:	608b      	str	r3, [r1, #8]
 8005a62:	4620      	mov	r0, r4
 8005a64:	f001 f834 	bl	8006ad0 <_Bfree>
 8005a68:	2200      	movs	r2, #0
 8005a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	9b03      	ldr	r3, [sp, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	bfb7      	itett	lt
 8005a74:	2301      	movlt	r3, #1
 8005a76:	2300      	movge	r3, #0
 8005a78:	602b      	strlt	r3, [r5, #0]
 8005a7a:	9b03      	ldrlt	r3, [sp, #12]
 8005a7c:	bfae      	itee	ge
 8005a7e:	602b      	strge	r3, [r5, #0]
 8005a80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a84:	9303      	strlt	r3, [sp, #12]
 8005a86:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005a8a:	4bab      	ldr	r3, [pc, #684]	; (8005d38 <_dtoa_r+0x308>)
 8005a8c:	ea33 0309 	bics.w	r3, r3, r9
 8005a90:	d11b      	bne.n	8005aca <_dtoa_r+0x9a>
 8005a92:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a96:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	9b02      	ldr	r3, [sp, #8]
 8005a9c:	b923      	cbnz	r3, 8005aa8 <_dtoa_r+0x78>
 8005a9e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	f000 8583 	beq.w	80065ae <_dtoa_r+0xb7e>
 8005aa8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aaa:	b953      	cbnz	r3, 8005ac2 <_dtoa_r+0x92>
 8005aac:	4ba3      	ldr	r3, [pc, #652]	; (8005d3c <_dtoa_r+0x30c>)
 8005aae:	e021      	b.n	8005af4 <_dtoa_r+0xc4>
 8005ab0:	4ba3      	ldr	r3, [pc, #652]	; (8005d40 <_dtoa_r+0x310>)
 8005ab2:	9306      	str	r3, [sp, #24]
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	9806      	ldr	r0, [sp, #24]
 8005abc:	b015      	add	sp, #84	; 0x54
 8005abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac2:	4b9e      	ldr	r3, [pc, #632]	; (8005d3c <_dtoa_r+0x30c>)
 8005ac4:	9306      	str	r3, [sp, #24]
 8005ac6:	3303      	adds	r3, #3
 8005ac8:	e7f5      	b.n	8005ab6 <_dtoa_r+0x86>
 8005aca:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	4639      	mov	r1, r7
 8005ad6:	f7fa ff63 	bl	80009a0 <__aeabi_dcmpeq>
 8005ada:	4680      	mov	r8, r0
 8005adc:	b160      	cbz	r0, 8005af8 <_dtoa_r+0xc8>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 855e 	beq.w	80065a8 <_dtoa_r+0xb78>
 8005aec:	4b95      	ldr	r3, [pc, #596]	; (8005d44 <_dtoa_r+0x314>)
 8005aee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	9306      	str	r3, [sp, #24]
 8005af6:	e7e0      	b.n	8005aba <_dtoa_r+0x8a>
 8005af8:	ab12      	add	r3, sp, #72	; 0x48
 8005afa:	9301      	str	r3, [sp, #4]
 8005afc:	ab13      	add	r3, sp, #76	; 0x4c
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	4632      	mov	r2, r6
 8005b02:	463b      	mov	r3, r7
 8005b04:	4620      	mov	r0, r4
 8005b06:	f001 fa31 	bl	8006f6c <__d2b>
 8005b0a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b0e:	4682      	mov	sl, r0
 8005b10:	2d00      	cmp	r5, #0
 8005b12:	d07d      	beq.n	8005c10 <_dtoa_r+0x1e0>
 8005b14:	4630      	mov	r0, r6
 8005b16:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005b1a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005b1e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005b22:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b26:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	4b86      	ldr	r3, [pc, #536]	; (8005d48 <_dtoa_r+0x318>)
 8005b2e:	f7fa fb1b 	bl	8000168 <__aeabi_dsub>
 8005b32:	a37b      	add	r3, pc, #492	; (adr r3, 8005d20 <_dtoa_r+0x2f0>)
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	f7fa fcca 	bl	80004d0 <__aeabi_dmul>
 8005b3c:	a37a      	add	r3, pc, #488	; (adr r3, 8005d28 <_dtoa_r+0x2f8>)
 8005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b42:	f7fa fb13 	bl	800016c <__adddf3>
 8005b46:	4606      	mov	r6, r0
 8005b48:	4628      	mov	r0, r5
 8005b4a:	460f      	mov	r7, r1
 8005b4c:	f7fa fc5a 	bl	8000404 <__aeabi_i2d>
 8005b50:	a377      	add	r3, pc, #476	; (adr r3, 8005d30 <_dtoa_r+0x300>)
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f7fa fcbb 	bl	80004d0 <__aeabi_dmul>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4630      	mov	r0, r6
 8005b60:	4639      	mov	r1, r7
 8005b62:	f7fa fb03 	bl	800016c <__adddf3>
 8005b66:	4606      	mov	r6, r0
 8005b68:	460f      	mov	r7, r1
 8005b6a:	f7fa ff61 	bl	8000a30 <__aeabi_d2iz>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	4683      	mov	fp, r0
 8005b72:	2300      	movs	r3, #0
 8005b74:	4630      	mov	r0, r6
 8005b76:	4639      	mov	r1, r7
 8005b78:	f7fa ff1c 	bl	80009b4 <__aeabi_dcmplt>
 8005b7c:	b158      	cbz	r0, 8005b96 <_dtoa_r+0x166>
 8005b7e:	4658      	mov	r0, fp
 8005b80:	f7fa fc40 	bl	8000404 <__aeabi_i2d>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	4630      	mov	r0, r6
 8005b8a:	4639      	mov	r1, r7
 8005b8c:	f7fa ff08 	bl	80009a0 <__aeabi_dcmpeq>
 8005b90:	b908      	cbnz	r0, 8005b96 <_dtoa_r+0x166>
 8005b92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b96:	f1bb 0f16 	cmp.w	fp, #22
 8005b9a:	d858      	bhi.n	8005c4e <_dtoa_r+0x21e>
 8005b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ba0:	496a      	ldr	r1, [pc, #424]	; (8005d4c <_dtoa_r+0x31c>)
 8005ba2:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005ba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005baa:	f7fa ff21 	bl	80009f0 <__aeabi_dcmpgt>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d04f      	beq.n	8005c52 <_dtoa_r+0x222>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005bb8:	930d      	str	r3, [sp, #52]	; 0x34
 8005bba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bbc:	1b5d      	subs	r5, r3, r5
 8005bbe:	1e6b      	subs	r3, r5, #1
 8005bc0:	9307      	str	r3, [sp, #28]
 8005bc2:	bf43      	ittte	mi
 8005bc4:	2300      	movmi	r3, #0
 8005bc6:	f1c5 0801 	rsbmi	r8, r5, #1
 8005bca:	9307      	strmi	r3, [sp, #28]
 8005bcc:	f04f 0800 	movpl.w	r8, #0
 8005bd0:	f1bb 0f00 	cmp.w	fp, #0
 8005bd4:	db3f      	blt.n	8005c56 <_dtoa_r+0x226>
 8005bd6:	9b07      	ldr	r3, [sp, #28]
 8005bd8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8005bdc:	445b      	add	r3, fp
 8005bde:	9307      	str	r3, [sp, #28]
 8005be0:	2300      	movs	r3, #0
 8005be2:	9308      	str	r3, [sp, #32]
 8005be4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005be6:	2b09      	cmp	r3, #9
 8005be8:	f200 80b4 	bhi.w	8005d54 <_dtoa_r+0x324>
 8005bec:	2b05      	cmp	r3, #5
 8005bee:	bfc4      	itt	gt
 8005bf0:	3b04      	subgt	r3, #4
 8005bf2:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005bf4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005bf6:	bfc8      	it	gt
 8005bf8:	2600      	movgt	r6, #0
 8005bfa:	f1a3 0302 	sub.w	r3, r3, #2
 8005bfe:	bfd8      	it	le
 8005c00:	2601      	movle	r6, #1
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	f200 80b2 	bhi.w	8005d6c <_dtoa_r+0x33c>
 8005c08:	e8df f003 	tbb	[pc, r3]
 8005c0c:	782d8684 	.word	0x782d8684
 8005c10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c12:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005c14:	441d      	add	r5, r3
 8005c16:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	dd11      	ble.n	8005c42 <_dtoa_r+0x212>
 8005c1e:	9a02      	ldr	r2, [sp, #8]
 8005c20:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005c24:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005c28:	fa22 f000 	lsr.w	r0, r2, r0
 8005c2c:	fa09 f303 	lsl.w	r3, r9, r3
 8005c30:	4318      	orrs	r0, r3
 8005c32:	f7fa fbd7 	bl	80003e4 <__aeabi_ui2d>
 8005c36:	2301      	movs	r3, #1
 8005c38:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005c3c:	3d01      	subs	r5, #1
 8005c3e:	9310      	str	r3, [sp, #64]	; 0x40
 8005c40:	e773      	b.n	8005b2a <_dtoa_r+0xfa>
 8005c42:	f1c3 0020 	rsb	r0, r3, #32
 8005c46:	9b02      	ldr	r3, [sp, #8]
 8005c48:	fa03 f000 	lsl.w	r0, r3, r0
 8005c4c:	e7f1      	b.n	8005c32 <_dtoa_r+0x202>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e7b2      	b.n	8005bb8 <_dtoa_r+0x188>
 8005c52:	900d      	str	r0, [sp, #52]	; 0x34
 8005c54:	e7b1      	b.n	8005bba <_dtoa_r+0x18a>
 8005c56:	f1cb 0300 	rsb	r3, fp, #0
 8005c5a:	9308      	str	r3, [sp, #32]
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	eba8 080b 	sub.w	r8, r8, fp
 8005c62:	930c      	str	r3, [sp, #48]	; 0x30
 8005c64:	e7be      	b.n	8005be4 <_dtoa_r+0x1b4>
 8005c66:	2301      	movs	r3, #1
 8005c68:	9309      	str	r3, [sp, #36]	; 0x24
 8005c6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f340 8080 	ble.w	8005d72 <_dtoa_r+0x342>
 8005c72:	4699      	mov	r9, r3
 8005c74:	9304      	str	r3, [sp, #16]
 8005c76:	2200      	movs	r2, #0
 8005c78:	2104      	movs	r1, #4
 8005c7a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005c7c:	606a      	str	r2, [r5, #4]
 8005c7e:	f101 0214 	add.w	r2, r1, #20
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d97a      	bls.n	8005d7c <_dtoa_r+0x34c>
 8005c86:	6869      	ldr	r1, [r5, #4]
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 feed 	bl	8006a68 <_Balloc>
 8005c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c90:	6028      	str	r0, [r5, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f1b9 0f0e 	cmp.w	r9, #14
 8005c98:	9306      	str	r3, [sp, #24]
 8005c9a:	f200 80f0 	bhi.w	8005e7e <_dtoa_r+0x44e>
 8005c9e:	2e00      	cmp	r6, #0
 8005ca0:	f000 80ed 	beq.w	8005e7e <_dtoa_r+0x44e>
 8005ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ca8:	f1bb 0f00 	cmp.w	fp, #0
 8005cac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005cb0:	dd79      	ble.n	8005da6 <_dtoa_r+0x376>
 8005cb2:	4a26      	ldr	r2, [pc, #152]	; (8005d4c <_dtoa_r+0x31c>)
 8005cb4:	f00b 030f 	and.w	r3, fp, #15
 8005cb8:	ea4f 162b 	mov.w	r6, fp, asr #4
 8005cbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005cc0:	06f0      	lsls	r0, r6, #27
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005cca:	d55c      	bpl.n	8005d86 <_dtoa_r+0x356>
 8005ccc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005cd0:	4b1f      	ldr	r3, [pc, #124]	; (8005d50 <_dtoa_r+0x320>)
 8005cd2:	2503      	movs	r5, #3
 8005cd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005cd8:	f7fa fd24 	bl	8000724 <__aeabi_ddiv>
 8005cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ce0:	f006 060f 	and.w	r6, r6, #15
 8005ce4:	4f1a      	ldr	r7, [pc, #104]	; (8005d50 <_dtoa_r+0x320>)
 8005ce6:	2e00      	cmp	r6, #0
 8005ce8:	d14f      	bne.n	8005d8a <_dtoa_r+0x35a>
 8005cea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cf2:	f7fa fd17 	bl	8000724 <__aeabi_ddiv>
 8005cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cfa:	e06e      	b.n	8005dda <_dtoa_r+0x3aa>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8005d00:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d02:	445b      	add	r3, fp
 8005d04:	f103 0901 	add.w	r9, r3, #1
 8005d08:	9304      	str	r3, [sp, #16]
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	bfb8      	it	lt
 8005d10:	2301      	movlt	r3, #1
 8005d12:	e7b0      	b.n	8005c76 <_dtoa_r+0x246>
 8005d14:	2300      	movs	r3, #0
 8005d16:	e7a7      	b.n	8005c68 <_dtoa_r+0x238>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	e7f0      	b.n	8005cfe <_dtoa_r+0x2ce>
 8005d1c:	f3af 8000 	nop.w
 8005d20:	636f4361 	.word	0x636f4361
 8005d24:	3fd287a7 	.word	0x3fd287a7
 8005d28:	8b60c8b3 	.word	0x8b60c8b3
 8005d2c:	3fc68a28 	.word	0x3fc68a28
 8005d30:	509f79fb 	.word	0x509f79fb
 8005d34:	3fd34413 	.word	0x3fd34413
 8005d38:	7ff00000 	.word	0x7ff00000
 8005d3c:	08007831 	.word	0x08007831
 8005d40:	08007828 	.word	0x08007828
 8005d44:	08007807 	.word	0x08007807
 8005d48:	3ff80000 	.word	0x3ff80000
 8005d4c:	08007860 	.word	0x08007860
 8005d50:	08007838 	.word	0x08007838
 8005d54:	2601      	movs	r6, #1
 8005d56:	2300      	movs	r3, #0
 8005d58:	9609      	str	r6, [sp, #36]	; 0x24
 8005d5a:	931e      	str	r3, [sp, #120]	; 0x78
 8005d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d60:	2200      	movs	r2, #0
 8005d62:	9304      	str	r3, [sp, #16]
 8005d64:	4699      	mov	r9, r3
 8005d66:	2312      	movs	r3, #18
 8005d68:	921f      	str	r2, [sp, #124]	; 0x7c
 8005d6a:	e784      	b.n	8005c76 <_dtoa_r+0x246>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d70:	e7f4      	b.n	8005d5c <_dtoa_r+0x32c>
 8005d72:	2301      	movs	r3, #1
 8005d74:	9304      	str	r3, [sp, #16]
 8005d76:	4699      	mov	r9, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	e7f5      	b.n	8005d68 <_dtoa_r+0x338>
 8005d7c:	686a      	ldr	r2, [r5, #4]
 8005d7e:	0049      	lsls	r1, r1, #1
 8005d80:	3201      	adds	r2, #1
 8005d82:	606a      	str	r2, [r5, #4]
 8005d84:	e77b      	b.n	8005c7e <_dtoa_r+0x24e>
 8005d86:	2502      	movs	r5, #2
 8005d88:	e7ac      	b.n	8005ce4 <_dtoa_r+0x2b4>
 8005d8a:	07f1      	lsls	r1, r6, #31
 8005d8c:	d508      	bpl.n	8005da0 <_dtoa_r+0x370>
 8005d8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d96:	f7fa fb9b 	bl	80004d0 <__aeabi_dmul>
 8005d9a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d9e:	3501      	adds	r5, #1
 8005da0:	1076      	asrs	r6, r6, #1
 8005da2:	3708      	adds	r7, #8
 8005da4:	e79f      	b.n	8005ce6 <_dtoa_r+0x2b6>
 8005da6:	f000 80a5 	beq.w	8005ef4 <_dtoa_r+0x4c4>
 8005daa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005dae:	f1cb 0600 	rsb	r6, fp, #0
 8005db2:	4ba2      	ldr	r3, [pc, #648]	; (800603c <_dtoa_r+0x60c>)
 8005db4:	f006 020f 	and.w	r2, r6, #15
 8005db8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	f7fa fb86 	bl	80004d0 <__aeabi_dmul>
 8005dc4:	2502      	movs	r5, #2
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dcc:	4f9c      	ldr	r7, [pc, #624]	; (8006040 <_dtoa_r+0x610>)
 8005dce:	1136      	asrs	r6, r6, #4
 8005dd0:	2e00      	cmp	r6, #0
 8005dd2:	f040 8084 	bne.w	8005ede <_dtoa_r+0x4ae>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d18d      	bne.n	8005cf6 <_dtoa_r+0x2c6>
 8005dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 808b 	beq.w	8005ef8 <_dtoa_r+0x4c8>
 8005de2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005de6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005dea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dee:	2200      	movs	r2, #0
 8005df0:	4b94      	ldr	r3, [pc, #592]	; (8006044 <_dtoa_r+0x614>)
 8005df2:	f7fa fddf 	bl	80009b4 <__aeabi_dcmplt>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d07e      	beq.n	8005ef8 <_dtoa_r+0x4c8>
 8005dfa:	f1b9 0f00 	cmp.w	r9, #0
 8005dfe:	d07b      	beq.n	8005ef8 <_dtoa_r+0x4c8>
 8005e00:	9b04      	ldr	r3, [sp, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	dd37      	ble.n	8005e76 <_dtoa_r+0x446>
 8005e06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	4b8e      	ldr	r3, [pc, #568]	; (8006048 <_dtoa_r+0x618>)
 8005e0e:	f7fa fb5f 	bl	80004d0 <__aeabi_dmul>
 8005e12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e16:	9e04      	ldr	r6, [sp, #16]
 8005e18:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005e1c:	3501      	adds	r5, #1
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f7fa faf0 	bl	8000404 <__aeabi_i2d>
 8005e24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e28:	f7fa fb52 	bl	80004d0 <__aeabi_dmul>
 8005e2c:	4b87      	ldr	r3, [pc, #540]	; (800604c <_dtoa_r+0x61c>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f7fa f99c 	bl	800016c <__adddf3>
 8005e34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e3a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8005e3e:	950b      	str	r5, [sp, #44]	; 0x2c
 8005e40:	2e00      	cmp	r6, #0
 8005e42:	d15c      	bne.n	8005efe <_dtoa_r+0x4ce>
 8005e44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4b81      	ldr	r3, [pc, #516]	; (8006050 <_dtoa_r+0x620>)
 8005e4c:	f7fa f98c 	bl	8000168 <__aeabi_dsub>
 8005e50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e52:	462b      	mov	r3, r5
 8005e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e58:	f7fa fdca 	bl	80009f0 <__aeabi_dcmpgt>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	f040 82f7 	bne.w	8006450 <_dtoa_r+0xa20>
 8005e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e68:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005e6c:	f7fa fda2 	bl	80009b4 <__aeabi_dcmplt>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	f040 82eb 	bne.w	800644c <_dtoa_r+0xa1c>
 8005e76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005e7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f2c0 8150 	blt.w	8006126 <_dtoa_r+0x6f6>
 8005e86:	f1bb 0f0e 	cmp.w	fp, #14
 8005e8a:	f300 814c 	bgt.w	8006126 <_dtoa_r+0x6f6>
 8005e8e:	4b6b      	ldr	r3, [pc, #428]	; (800603c <_dtoa_r+0x60c>)
 8005e90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f280 80da 	bge.w	8006058 <_dtoa_r+0x628>
 8005ea4:	f1b9 0f00 	cmp.w	r9, #0
 8005ea8:	f300 80d6 	bgt.w	8006058 <_dtoa_r+0x628>
 8005eac:	f040 82cd 	bne.w	800644a <_dtoa_r+0xa1a>
 8005eb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4b66      	ldr	r3, [pc, #408]	; (8006050 <_dtoa_r+0x620>)
 8005eb8:	f7fa fb0a 	bl	80004d0 <__aeabi_dmul>
 8005ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ec0:	f7fa fd8c 	bl	80009dc <__aeabi_dcmpge>
 8005ec4:	464e      	mov	r6, r9
 8005ec6:	464f      	mov	r7, r9
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	f040 82a4 	bne.w	8006416 <_dtoa_r+0x9e6>
 8005ece:	9b06      	ldr	r3, [sp, #24]
 8005ed0:	9a06      	ldr	r2, [sp, #24]
 8005ed2:	1c5d      	adds	r5, r3, #1
 8005ed4:	2331      	movs	r3, #49	; 0x31
 8005ed6:	f10b 0b01 	add.w	fp, fp, #1
 8005eda:	7013      	strb	r3, [r2, #0]
 8005edc:	e29f      	b.n	800641e <_dtoa_r+0x9ee>
 8005ede:	07f2      	lsls	r2, r6, #31
 8005ee0:	d505      	bpl.n	8005eee <_dtoa_r+0x4be>
 8005ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ee6:	f7fa faf3 	bl	80004d0 <__aeabi_dmul>
 8005eea:	2301      	movs	r3, #1
 8005eec:	3501      	adds	r5, #1
 8005eee:	1076      	asrs	r6, r6, #1
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	e76d      	b.n	8005dd0 <_dtoa_r+0x3a0>
 8005ef4:	2502      	movs	r5, #2
 8005ef6:	e770      	b.n	8005dda <_dtoa_r+0x3aa>
 8005ef8:	465f      	mov	r7, fp
 8005efa:	464e      	mov	r6, r9
 8005efc:	e78f      	b.n	8005e1e <_dtoa_r+0x3ee>
 8005efe:	9a06      	ldr	r2, [sp, #24]
 8005f00:	4b4e      	ldr	r3, [pc, #312]	; (800603c <_dtoa_r+0x60c>)
 8005f02:	4432      	add	r2, r6
 8005f04:	9211      	str	r2, [sp, #68]	; 0x44
 8005f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f08:	1e71      	subs	r1, r6, #1
 8005f0a:	2a00      	cmp	r2, #0
 8005f0c:	d048      	beq.n	8005fa0 <_dtoa_r+0x570>
 8005f0e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	2000      	movs	r0, #0
 8005f18:	494e      	ldr	r1, [pc, #312]	; (8006054 <_dtoa_r+0x624>)
 8005f1a:	f7fa fc03 	bl	8000724 <__aeabi_ddiv>
 8005f1e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f22:	f7fa f921 	bl	8000168 <__aeabi_dsub>
 8005f26:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f2a:	9d06      	ldr	r5, [sp, #24]
 8005f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f30:	f7fa fd7e 	bl	8000a30 <__aeabi_d2iz>
 8005f34:	4606      	mov	r6, r0
 8005f36:	f7fa fa65 	bl	8000404 <__aeabi_i2d>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f42:	f7fa f911 	bl	8000168 <__aeabi_dsub>
 8005f46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f4a:	3630      	adds	r6, #48	; 0x30
 8005f4c:	f805 6b01 	strb.w	r6, [r5], #1
 8005f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f54:	f7fa fd2e 	bl	80009b4 <__aeabi_dcmplt>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d164      	bne.n	8006026 <_dtoa_r+0x5f6>
 8005f5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f60:	2000      	movs	r0, #0
 8005f62:	4938      	ldr	r1, [pc, #224]	; (8006044 <_dtoa_r+0x614>)
 8005f64:	f7fa f900 	bl	8000168 <__aeabi_dsub>
 8005f68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f6c:	f7fa fd22 	bl	80009b4 <__aeabi_dcmplt>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	f040 80b9 	bne.w	80060e8 <_dtoa_r+0x6b8>
 8005f76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f78:	429d      	cmp	r5, r3
 8005f7a:	f43f af7c 	beq.w	8005e76 <_dtoa_r+0x446>
 8005f7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f82:	2200      	movs	r2, #0
 8005f84:	4b30      	ldr	r3, [pc, #192]	; (8006048 <_dtoa_r+0x618>)
 8005f86:	f7fa faa3 	bl	80004d0 <__aeabi_dmul>
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f94:	4b2c      	ldr	r3, [pc, #176]	; (8006048 <_dtoa_r+0x618>)
 8005f96:	f7fa fa9b 	bl	80004d0 <__aeabi_dmul>
 8005f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f9e:	e7c5      	b.n	8005f2c <_dtoa_r+0x4fc>
 8005fa0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fa8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005fac:	f7fa fa90 	bl	80004d0 <__aeabi_dmul>
 8005fb0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005fb4:	9d06      	ldr	r5, [sp, #24]
 8005fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fba:	f7fa fd39 	bl	8000a30 <__aeabi_d2iz>
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	f7fa fa20 	bl	8000404 <__aeabi_i2d>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fcc:	f7fa f8cc 	bl	8000168 <__aeabi_dsub>
 8005fd0:	3630      	adds	r6, #48	; 0x30
 8005fd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fd4:	f805 6b01 	strb.w	r6, [r5], #1
 8005fd8:	42ab      	cmp	r3, r5
 8005fda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fde:	f04f 0200 	mov.w	r2, #0
 8005fe2:	d124      	bne.n	800602e <_dtoa_r+0x5fe>
 8005fe4:	4b1b      	ldr	r3, [pc, #108]	; (8006054 <_dtoa_r+0x624>)
 8005fe6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fea:	f7fa f8bf 	bl	800016c <__adddf3>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ff6:	f7fa fcfb 	bl	80009f0 <__aeabi_dcmpgt>
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	d174      	bne.n	80060e8 <_dtoa_r+0x6b8>
 8005ffe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006002:	2000      	movs	r0, #0
 8006004:	4913      	ldr	r1, [pc, #76]	; (8006054 <_dtoa_r+0x624>)
 8006006:	f7fa f8af 	bl	8000168 <__aeabi_dsub>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006012:	f7fa fccf 	bl	80009b4 <__aeabi_dcmplt>
 8006016:	2800      	cmp	r0, #0
 8006018:	f43f af2d 	beq.w	8005e76 <_dtoa_r+0x446>
 800601c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006020:	1e6a      	subs	r2, r5, #1
 8006022:	2b30      	cmp	r3, #48	; 0x30
 8006024:	d001      	beq.n	800602a <_dtoa_r+0x5fa>
 8006026:	46bb      	mov	fp, r7
 8006028:	e04d      	b.n	80060c6 <_dtoa_r+0x696>
 800602a:	4615      	mov	r5, r2
 800602c:	e7f6      	b.n	800601c <_dtoa_r+0x5ec>
 800602e:	4b06      	ldr	r3, [pc, #24]	; (8006048 <_dtoa_r+0x618>)
 8006030:	f7fa fa4e 	bl	80004d0 <__aeabi_dmul>
 8006034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006038:	e7bd      	b.n	8005fb6 <_dtoa_r+0x586>
 800603a:	bf00      	nop
 800603c:	08007860 	.word	0x08007860
 8006040:	08007838 	.word	0x08007838
 8006044:	3ff00000 	.word	0x3ff00000
 8006048:	40240000 	.word	0x40240000
 800604c:	401c0000 	.word	0x401c0000
 8006050:	40140000 	.word	0x40140000
 8006054:	3fe00000 	.word	0x3fe00000
 8006058:	9d06      	ldr	r5, [sp, #24]
 800605a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800605e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006062:	4630      	mov	r0, r6
 8006064:	4639      	mov	r1, r7
 8006066:	f7fa fb5d 	bl	8000724 <__aeabi_ddiv>
 800606a:	f7fa fce1 	bl	8000a30 <__aeabi_d2iz>
 800606e:	4680      	mov	r8, r0
 8006070:	f7fa f9c8 	bl	8000404 <__aeabi_i2d>
 8006074:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006078:	f7fa fa2a 	bl	80004d0 <__aeabi_dmul>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4630      	mov	r0, r6
 8006082:	4639      	mov	r1, r7
 8006084:	f7fa f870 	bl	8000168 <__aeabi_dsub>
 8006088:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800608c:	f805 6b01 	strb.w	r6, [r5], #1
 8006090:	9e06      	ldr	r6, [sp, #24]
 8006092:	4602      	mov	r2, r0
 8006094:	1bae      	subs	r6, r5, r6
 8006096:	45b1      	cmp	r9, r6
 8006098:	460b      	mov	r3, r1
 800609a:	d137      	bne.n	800610c <_dtoa_r+0x6dc>
 800609c:	f7fa f866 	bl	800016c <__adddf3>
 80060a0:	4606      	mov	r6, r0
 80060a2:	460f      	mov	r7, r1
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060ac:	f7fa fc82 	bl	80009b4 <__aeabi_dcmplt>
 80060b0:	b9c8      	cbnz	r0, 80060e6 <_dtoa_r+0x6b6>
 80060b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060b6:	4632      	mov	r2, r6
 80060b8:	463b      	mov	r3, r7
 80060ba:	f7fa fc71 	bl	80009a0 <__aeabi_dcmpeq>
 80060be:	b110      	cbz	r0, 80060c6 <_dtoa_r+0x696>
 80060c0:	f018 0f01 	tst.w	r8, #1
 80060c4:	d10f      	bne.n	80060e6 <_dtoa_r+0x6b6>
 80060c6:	4651      	mov	r1, sl
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 fd01 	bl	8006ad0 <_Bfree>
 80060ce:	2300      	movs	r3, #0
 80060d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80060d2:	702b      	strb	r3, [r5, #0]
 80060d4:	f10b 0301 	add.w	r3, fp, #1
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f43f acec 	beq.w	8005aba <_dtoa_r+0x8a>
 80060e2:	601d      	str	r5, [r3, #0]
 80060e4:	e4e9      	b.n	8005aba <_dtoa_r+0x8a>
 80060e6:	465f      	mov	r7, fp
 80060e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060ec:	1e6b      	subs	r3, r5, #1
 80060ee:	2a39      	cmp	r2, #57	; 0x39
 80060f0:	d106      	bne.n	8006100 <_dtoa_r+0x6d0>
 80060f2:	9a06      	ldr	r2, [sp, #24]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d107      	bne.n	8006108 <_dtoa_r+0x6d8>
 80060f8:	2330      	movs	r3, #48	; 0x30
 80060fa:	7013      	strb	r3, [r2, #0]
 80060fc:	4613      	mov	r3, r2
 80060fe:	3701      	adds	r7, #1
 8006100:	781a      	ldrb	r2, [r3, #0]
 8006102:	3201      	adds	r2, #1
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	e78e      	b.n	8006026 <_dtoa_r+0x5f6>
 8006108:	461d      	mov	r5, r3
 800610a:	e7ed      	b.n	80060e8 <_dtoa_r+0x6b8>
 800610c:	2200      	movs	r2, #0
 800610e:	4bb5      	ldr	r3, [pc, #724]	; (80063e4 <_dtoa_r+0x9b4>)
 8006110:	f7fa f9de 	bl	80004d0 <__aeabi_dmul>
 8006114:	2200      	movs	r2, #0
 8006116:	2300      	movs	r3, #0
 8006118:	4606      	mov	r6, r0
 800611a:	460f      	mov	r7, r1
 800611c:	f7fa fc40 	bl	80009a0 <__aeabi_dcmpeq>
 8006120:	2800      	cmp	r0, #0
 8006122:	d09c      	beq.n	800605e <_dtoa_r+0x62e>
 8006124:	e7cf      	b.n	80060c6 <_dtoa_r+0x696>
 8006126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006128:	2a00      	cmp	r2, #0
 800612a:	f000 8129 	beq.w	8006380 <_dtoa_r+0x950>
 800612e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006130:	2a01      	cmp	r2, #1
 8006132:	f300 810e 	bgt.w	8006352 <_dtoa_r+0x922>
 8006136:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006138:	2a00      	cmp	r2, #0
 800613a:	f000 8106 	beq.w	800634a <_dtoa_r+0x91a>
 800613e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006142:	4645      	mov	r5, r8
 8006144:	9e08      	ldr	r6, [sp, #32]
 8006146:	9a07      	ldr	r2, [sp, #28]
 8006148:	2101      	movs	r1, #1
 800614a:	441a      	add	r2, r3
 800614c:	4620      	mov	r0, r4
 800614e:	4498      	add	r8, r3
 8006150:	9207      	str	r2, [sp, #28]
 8006152:	f000 fd5d 	bl	8006c10 <__i2b>
 8006156:	4607      	mov	r7, r0
 8006158:	2d00      	cmp	r5, #0
 800615a:	dd0b      	ble.n	8006174 <_dtoa_r+0x744>
 800615c:	9b07      	ldr	r3, [sp, #28]
 800615e:	2b00      	cmp	r3, #0
 8006160:	dd08      	ble.n	8006174 <_dtoa_r+0x744>
 8006162:	42ab      	cmp	r3, r5
 8006164:	bfa8      	it	ge
 8006166:	462b      	movge	r3, r5
 8006168:	9a07      	ldr	r2, [sp, #28]
 800616a:	eba8 0803 	sub.w	r8, r8, r3
 800616e:	1aed      	subs	r5, r5, r3
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	9307      	str	r3, [sp, #28]
 8006174:	9b08      	ldr	r3, [sp, #32]
 8006176:	b1fb      	cbz	r3, 80061b8 <_dtoa_r+0x788>
 8006178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8104 	beq.w	8006388 <_dtoa_r+0x958>
 8006180:	2e00      	cmp	r6, #0
 8006182:	dd11      	ble.n	80061a8 <_dtoa_r+0x778>
 8006184:	4639      	mov	r1, r7
 8006186:	4632      	mov	r2, r6
 8006188:	4620      	mov	r0, r4
 800618a:	f000 fdd7 	bl	8006d3c <__pow5mult>
 800618e:	4652      	mov	r2, sl
 8006190:	4601      	mov	r1, r0
 8006192:	4607      	mov	r7, r0
 8006194:	4620      	mov	r0, r4
 8006196:	f000 fd44 	bl	8006c22 <__multiply>
 800619a:	4651      	mov	r1, sl
 800619c:	900a      	str	r0, [sp, #40]	; 0x28
 800619e:	4620      	mov	r0, r4
 80061a0:	f000 fc96 	bl	8006ad0 <_Bfree>
 80061a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061a6:	469a      	mov	sl, r3
 80061a8:	9b08      	ldr	r3, [sp, #32]
 80061aa:	1b9a      	subs	r2, r3, r6
 80061ac:	d004      	beq.n	80061b8 <_dtoa_r+0x788>
 80061ae:	4651      	mov	r1, sl
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 fdc3 	bl	8006d3c <__pow5mult>
 80061b6:	4682      	mov	sl, r0
 80061b8:	2101      	movs	r1, #1
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 fd28 	bl	8006c10 <__i2b>
 80061c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061c2:	4606      	mov	r6, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f340 80e1 	ble.w	800638c <_dtoa_r+0x95c>
 80061ca:	461a      	mov	r2, r3
 80061cc:	4601      	mov	r1, r0
 80061ce:	4620      	mov	r0, r4
 80061d0:	f000 fdb4 	bl	8006d3c <__pow5mult>
 80061d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80061d6:	4606      	mov	r6, r0
 80061d8:	2b01      	cmp	r3, #1
 80061da:	f340 80da 	ble.w	8006392 <_dtoa_r+0x962>
 80061de:	2300      	movs	r3, #0
 80061e0:	9308      	str	r3, [sp, #32]
 80061e2:	6933      	ldr	r3, [r6, #16]
 80061e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80061e8:	6918      	ldr	r0, [r3, #16]
 80061ea:	f000 fcc3 	bl	8006b74 <__hi0bits>
 80061ee:	f1c0 0020 	rsb	r0, r0, #32
 80061f2:	9b07      	ldr	r3, [sp, #28]
 80061f4:	4418      	add	r0, r3
 80061f6:	f010 001f 	ands.w	r0, r0, #31
 80061fa:	f000 80f0 	beq.w	80063de <_dtoa_r+0x9ae>
 80061fe:	f1c0 0320 	rsb	r3, r0, #32
 8006202:	2b04      	cmp	r3, #4
 8006204:	f340 80e2 	ble.w	80063cc <_dtoa_r+0x99c>
 8006208:	9b07      	ldr	r3, [sp, #28]
 800620a:	f1c0 001c 	rsb	r0, r0, #28
 800620e:	4480      	add	r8, r0
 8006210:	4405      	add	r5, r0
 8006212:	4403      	add	r3, r0
 8006214:	9307      	str	r3, [sp, #28]
 8006216:	f1b8 0f00 	cmp.w	r8, #0
 800621a:	dd05      	ble.n	8006228 <_dtoa_r+0x7f8>
 800621c:	4651      	mov	r1, sl
 800621e:	4642      	mov	r2, r8
 8006220:	4620      	mov	r0, r4
 8006222:	f000 fdd9 	bl	8006dd8 <__lshift>
 8006226:	4682      	mov	sl, r0
 8006228:	9b07      	ldr	r3, [sp, #28]
 800622a:	2b00      	cmp	r3, #0
 800622c:	dd05      	ble.n	800623a <_dtoa_r+0x80a>
 800622e:	4631      	mov	r1, r6
 8006230:	461a      	mov	r2, r3
 8006232:	4620      	mov	r0, r4
 8006234:	f000 fdd0 	bl	8006dd8 <__lshift>
 8006238:	4606      	mov	r6, r0
 800623a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80d3 	beq.w	80063e8 <_dtoa_r+0x9b8>
 8006242:	4631      	mov	r1, r6
 8006244:	4650      	mov	r0, sl
 8006246:	f000 fe18 	bl	8006e7a <__mcmp>
 800624a:	2800      	cmp	r0, #0
 800624c:	f280 80cc 	bge.w	80063e8 <_dtoa_r+0x9b8>
 8006250:	2300      	movs	r3, #0
 8006252:	4651      	mov	r1, sl
 8006254:	220a      	movs	r2, #10
 8006256:	4620      	mov	r0, r4
 8006258:	f000 fc51 	bl	8006afe <__multadd>
 800625c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800625e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006262:	4682      	mov	sl, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 81a9 	beq.w	80065bc <_dtoa_r+0xb8c>
 800626a:	2300      	movs	r3, #0
 800626c:	4639      	mov	r1, r7
 800626e:	220a      	movs	r2, #10
 8006270:	4620      	mov	r0, r4
 8006272:	f000 fc44 	bl	8006afe <__multadd>
 8006276:	9b04      	ldr	r3, [sp, #16]
 8006278:	4607      	mov	r7, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	dc03      	bgt.n	8006286 <_dtoa_r+0x856>
 800627e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006280:	2b02      	cmp	r3, #2
 8006282:	f300 80b9 	bgt.w	80063f8 <_dtoa_r+0x9c8>
 8006286:	2d00      	cmp	r5, #0
 8006288:	dd05      	ble.n	8006296 <_dtoa_r+0x866>
 800628a:	4639      	mov	r1, r7
 800628c:	462a      	mov	r2, r5
 800628e:	4620      	mov	r0, r4
 8006290:	f000 fda2 	bl	8006dd8 <__lshift>
 8006294:	4607      	mov	r7, r0
 8006296:	9b08      	ldr	r3, [sp, #32]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8110 	beq.w	80064be <_dtoa_r+0xa8e>
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 fbe1 	bl	8006a68 <_Balloc>
 80062a6:	4605      	mov	r5, r0
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	f107 010c 	add.w	r1, r7, #12
 80062ae:	3202      	adds	r2, #2
 80062b0:	0092      	lsls	r2, r2, #2
 80062b2:	300c      	adds	r0, #12
 80062b4:	f000 fbc0 	bl	8006a38 <memcpy>
 80062b8:	2201      	movs	r2, #1
 80062ba:	4629      	mov	r1, r5
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 fd8b 	bl	8006dd8 <__lshift>
 80062c2:	9707      	str	r7, [sp, #28]
 80062c4:	4607      	mov	r7, r0
 80062c6:	9b02      	ldr	r3, [sp, #8]
 80062c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	9308      	str	r3, [sp, #32]
 80062d2:	4631      	mov	r1, r6
 80062d4:	4650      	mov	r0, sl
 80062d6:	f7ff fb1f 	bl	8005918 <quorem>
 80062da:	9907      	ldr	r1, [sp, #28]
 80062dc:	4605      	mov	r5, r0
 80062de:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80062e2:	4650      	mov	r0, sl
 80062e4:	f000 fdc9 	bl	8006e7a <__mcmp>
 80062e8:	463a      	mov	r2, r7
 80062ea:	9002      	str	r0, [sp, #8]
 80062ec:	4631      	mov	r1, r6
 80062ee:	4620      	mov	r0, r4
 80062f0:	f000 fddd 	bl	8006eae <__mdiff>
 80062f4:	68c3      	ldr	r3, [r0, #12]
 80062f6:	4602      	mov	r2, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f040 80e2 	bne.w	80064c2 <_dtoa_r+0xa92>
 80062fe:	4601      	mov	r1, r0
 8006300:	9009      	str	r0, [sp, #36]	; 0x24
 8006302:	4650      	mov	r0, sl
 8006304:	f000 fdb9 	bl	8006e7a <__mcmp>
 8006308:	4603      	mov	r3, r0
 800630a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800630c:	4611      	mov	r1, r2
 800630e:	4620      	mov	r0, r4
 8006310:	9309      	str	r3, [sp, #36]	; 0x24
 8006312:	f000 fbdd 	bl	8006ad0 <_Bfree>
 8006316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006318:	2b00      	cmp	r3, #0
 800631a:	f040 80d4 	bne.w	80064c6 <_dtoa_r+0xa96>
 800631e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006320:	2a00      	cmp	r2, #0
 8006322:	f040 80d0 	bne.w	80064c6 <_dtoa_r+0xa96>
 8006326:	9a08      	ldr	r2, [sp, #32]
 8006328:	2a00      	cmp	r2, #0
 800632a:	f040 80cc 	bne.w	80064c6 <_dtoa_r+0xa96>
 800632e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006332:	f000 80e8 	beq.w	8006506 <_dtoa_r+0xad6>
 8006336:	9b02      	ldr	r3, [sp, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	dd01      	ble.n	8006340 <_dtoa_r+0x910>
 800633c:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8006340:	f108 0501 	add.w	r5, r8, #1
 8006344:	f888 9000 	strb.w	r9, [r8]
 8006348:	e06b      	b.n	8006422 <_dtoa_r+0x9f2>
 800634a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800634c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006350:	e6f7      	b.n	8006142 <_dtoa_r+0x712>
 8006352:	9b08      	ldr	r3, [sp, #32]
 8006354:	f109 36ff 	add.w	r6, r9, #4294967295
 8006358:	42b3      	cmp	r3, r6
 800635a:	bfb7      	itett	lt
 800635c:	9b08      	ldrlt	r3, [sp, #32]
 800635e:	1b9e      	subge	r6, r3, r6
 8006360:	1af2      	sublt	r2, r6, r3
 8006362:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006364:	bfbf      	itttt	lt
 8006366:	9608      	strlt	r6, [sp, #32]
 8006368:	189b      	addlt	r3, r3, r2
 800636a:	930c      	strlt	r3, [sp, #48]	; 0x30
 800636c:	2600      	movlt	r6, #0
 800636e:	f1b9 0f00 	cmp.w	r9, #0
 8006372:	bfb9      	ittee	lt
 8006374:	eba8 0509 	sublt.w	r5, r8, r9
 8006378:	2300      	movlt	r3, #0
 800637a:	4645      	movge	r5, r8
 800637c:	464b      	movge	r3, r9
 800637e:	e6e2      	b.n	8006146 <_dtoa_r+0x716>
 8006380:	9e08      	ldr	r6, [sp, #32]
 8006382:	4645      	mov	r5, r8
 8006384:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006386:	e6e7      	b.n	8006158 <_dtoa_r+0x728>
 8006388:	9a08      	ldr	r2, [sp, #32]
 800638a:	e710      	b.n	80061ae <_dtoa_r+0x77e>
 800638c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800638e:	2b01      	cmp	r3, #1
 8006390:	dc18      	bgt.n	80063c4 <_dtoa_r+0x994>
 8006392:	9b02      	ldr	r3, [sp, #8]
 8006394:	b9b3      	cbnz	r3, 80063c4 <_dtoa_r+0x994>
 8006396:	9b03      	ldr	r3, [sp, #12]
 8006398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800639c:	b9a3      	cbnz	r3, 80063c8 <_dtoa_r+0x998>
 800639e:	9b03      	ldr	r3, [sp, #12]
 80063a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063a4:	0d1b      	lsrs	r3, r3, #20
 80063a6:	051b      	lsls	r3, r3, #20
 80063a8:	b12b      	cbz	r3, 80063b6 <_dtoa_r+0x986>
 80063aa:	9b07      	ldr	r3, [sp, #28]
 80063ac:	f108 0801 	add.w	r8, r8, #1
 80063b0:	3301      	adds	r3, #1
 80063b2:	9307      	str	r3, [sp, #28]
 80063b4:	2301      	movs	r3, #1
 80063b6:	9308      	str	r3, [sp, #32]
 80063b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f47f af11 	bne.w	80061e2 <_dtoa_r+0x7b2>
 80063c0:	2001      	movs	r0, #1
 80063c2:	e716      	b.n	80061f2 <_dtoa_r+0x7c2>
 80063c4:	2300      	movs	r3, #0
 80063c6:	e7f6      	b.n	80063b6 <_dtoa_r+0x986>
 80063c8:	9b02      	ldr	r3, [sp, #8]
 80063ca:	e7f4      	b.n	80063b6 <_dtoa_r+0x986>
 80063cc:	f43f af23 	beq.w	8006216 <_dtoa_r+0x7e6>
 80063d0:	9a07      	ldr	r2, [sp, #28]
 80063d2:	331c      	adds	r3, #28
 80063d4:	441a      	add	r2, r3
 80063d6:	4498      	add	r8, r3
 80063d8:	441d      	add	r5, r3
 80063da:	4613      	mov	r3, r2
 80063dc:	e71a      	b.n	8006214 <_dtoa_r+0x7e4>
 80063de:	4603      	mov	r3, r0
 80063e0:	e7f6      	b.n	80063d0 <_dtoa_r+0x9a0>
 80063e2:	bf00      	nop
 80063e4:	40240000 	.word	0x40240000
 80063e8:	f1b9 0f00 	cmp.w	r9, #0
 80063ec:	dc33      	bgt.n	8006456 <_dtoa_r+0xa26>
 80063ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	dd30      	ble.n	8006456 <_dtoa_r+0xa26>
 80063f4:	f8cd 9010 	str.w	r9, [sp, #16]
 80063f8:	9b04      	ldr	r3, [sp, #16]
 80063fa:	b963      	cbnz	r3, 8006416 <_dtoa_r+0x9e6>
 80063fc:	4631      	mov	r1, r6
 80063fe:	2205      	movs	r2, #5
 8006400:	4620      	mov	r0, r4
 8006402:	f000 fb7c 	bl	8006afe <__multadd>
 8006406:	4601      	mov	r1, r0
 8006408:	4606      	mov	r6, r0
 800640a:	4650      	mov	r0, sl
 800640c:	f000 fd35 	bl	8006e7a <__mcmp>
 8006410:	2800      	cmp	r0, #0
 8006412:	f73f ad5c 	bgt.w	8005ece <_dtoa_r+0x49e>
 8006416:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006418:	9d06      	ldr	r5, [sp, #24]
 800641a:	ea6f 0b03 	mvn.w	fp, r3
 800641e:	2300      	movs	r3, #0
 8006420:	9307      	str	r3, [sp, #28]
 8006422:	4631      	mov	r1, r6
 8006424:	4620      	mov	r0, r4
 8006426:	f000 fb53 	bl	8006ad0 <_Bfree>
 800642a:	2f00      	cmp	r7, #0
 800642c:	f43f ae4b 	beq.w	80060c6 <_dtoa_r+0x696>
 8006430:	9b07      	ldr	r3, [sp, #28]
 8006432:	b12b      	cbz	r3, 8006440 <_dtoa_r+0xa10>
 8006434:	42bb      	cmp	r3, r7
 8006436:	d003      	beq.n	8006440 <_dtoa_r+0xa10>
 8006438:	4619      	mov	r1, r3
 800643a:	4620      	mov	r0, r4
 800643c:	f000 fb48 	bl	8006ad0 <_Bfree>
 8006440:	4639      	mov	r1, r7
 8006442:	4620      	mov	r0, r4
 8006444:	f000 fb44 	bl	8006ad0 <_Bfree>
 8006448:	e63d      	b.n	80060c6 <_dtoa_r+0x696>
 800644a:	2600      	movs	r6, #0
 800644c:	4637      	mov	r7, r6
 800644e:	e7e2      	b.n	8006416 <_dtoa_r+0x9e6>
 8006450:	46bb      	mov	fp, r7
 8006452:	4637      	mov	r7, r6
 8006454:	e53b      	b.n	8005ece <_dtoa_r+0x49e>
 8006456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006458:	f8cd 9010 	str.w	r9, [sp, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	f47f af12 	bne.w	8006286 <_dtoa_r+0x856>
 8006462:	9d06      	ldr	r5, [sp, #24]
 8006464:	4631      	mov	r1, r6
 8006466:	4650      	mov	r0, sl
 8006468:	f7ff fa56 	bl	8005918 <quorem>
 800646c:	9b06      	ldr	r3, [sp, #24]
 800646e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006472:	f805 9b01 	strb.w	r9, [r5], #1
 8006476:	9a04      	ldr	r2, [sp, #16]
 8006478:	1aeb      	subs	r3, r5, r3
 800647a:	429a      	cmp	r2, r3
 800647c:	f300 8081 	bgt.w	8006582 <_dtoa_r+0xb52>
 8006480:	9b06      	ldr	r3, [sp, #24]
 8006482:	2a01      	cmp	r2, #1
 8006484:	bfac      	ite	ge
 8006486:	189b      	addge	r3, r3, r2
 8006488:	3301      	addlt	r3, #1
 800648a:	4698      	mov	r8, r3
 800648c:	2300      	movs	r3, #0
 800648e:	9307      	str	r3, [sp, #28]
 8006490:	4651      	mov	r1, sl
 8006492:	2201      	movs	r2, #1
 8006494:	4620      	mov	r0, r4
 8006496:	f000 fc9f 	bl	8006dd8 <__lshift>
 800649a:	4631      	mov	r1, r6
 800649c:	4682      	mov	sl, r0
 800649e:	f000 fcec 	bl	8006e7a <__mcmp>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	dc34      	bgt.n	8006510 <_dtoa_r+0xae0>
 80064a6:	d102      	bne.n	80064ae <_dtoa_r+0xa7e>
 80064a8:	f019 0f01 	tst.w	r9, #1
 80064ac:	d130      	bne.n	8006510 <_dtoa_r+0xae0>
 80064ae:	4645      	mov	r5, r8
 80064b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064b4:	1e6a      	subs	r2, r5, #1
 80064b6:	2b30      	cmp	r3, #48	; 0x30
 80064b8:	d1b3      	bne.n	8006422 <_dtoa_r+0x9f2>
 80064ba:	4615      	mov	r5, r2
 80064bc:	e7f8      	b.n	80064b0 <_dtoa_r+0xa80>
 80064be:	4638      	mov	r0, r7
 80064c0:	e6ff      	b.n	80062c2 <_dtoa_r+0x892>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e722      	b.n	800630c <_dtoa_r+0x8dc>
 80064c6:	9a02      	ldr	r2, [sp, #8]
 80064c8:	2a00      	cmp	r2, #0
 80064ca:	db04      	blt.n	80064d6 <_dtoa_r+0xaa6>
 80064cc:	d128      	bne.n	8006520 <_dtoa_r+0xaf0>
 80064ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80064d0:	bb32      	cbnz	r2, 8006520 <_dtoa_r+0xaf0>
 80064d2:	9a08      	ldr	r2, [sp, #32]
 80064d4:	bb22      	cbnz	r2, 8006520 <_dtoa_r+0xaf0>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f77f af32 	ble.w	8006340 <_dtoa_r+0x910>
 80064dc:	4651      	mov	r1, sl
 80064de:	2201      	movs	r2, #1
 80064e0:	4620      	mov	r0, r4
 80064e2:	f000 fc79 	bl	8006dd8 <__lshift>
 80064e6:	4631      	mov	r1, r6
 80064e8:	4682      	mov	sl, r0
 80064ea:	f000 fcc6 	bl	8006e7a <__mcmp>
 80064ee:	2800      	cmp	r0, #0
 80064f0:	dc05      	bgt.n	80064fe <_dtoa_r+0xace>
 80064f2:	f47f af25 	bne.w	8006340 <_dtoa_r+0x910>
 80064f6:	f019 0f01 	tst.w	r9, #1
 80064fa:	f43f af21 	beq.w	8006340 <_dtoa_r+0x910>
 80064fe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006502:	f47f af1b 	bne.w	800633c <_dtoa_r+0x90c>
 8006506:	2339      	movs	r3, #57	; 0x39
 8006508:	f108 0801 	add.w	r8, r8, #1
 800650c:	f808 3c01 	strb.w	r3, [r8, #-1]
 8006510:	4645      	mov	r5, r8
 8006512:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006516:	1e6a      	subs	r2, r5, #1
 8006518:	2b39      	cmp	r3, #57	; 0x39
 800651a:	d03a      	beq.n	8006592 <_dtoa_r+0xb62>
 800651c:	3301      	adds	r3, #1
 800651e:	e03f      	b.n	80065a0 <_dtoa_r+0xb70>
 8006520:	2b00      	cmp	r3, #0
 8006522:	f108 0501 	add.w	r5, r8, #1
 8006526:	dd05      	ble.n	8006534 <_dtoa_r+0xb04>
 8006528:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800652c:	d0eb      	beq.n	8006506 <_dtoa_r+0xad6>
 800652e:	f109 0901 	add.w	r9, r9, #1
 8006532:	e707      	b.n	8006344 <_dtoa_r+0x914>
 8006534:	9b06      	ldr	r3, [sp, #24]
 8006536:	9a04      	ldr	r2, [sp, #16]
 8006538:	1aeb      	subs	r3, r5, r3
 800653a:	4293      	cmp	r3, r2
 800653c:	46a8      	mov	r8, r5
 800653e:	f805 9c01 	strb.w	r9, [r5, #-1]
 8006542:	d0a5      	beq.n	8006490 <_dtoa_r+0xa60>
 8006544:	4651      	mov	r1, sl
 8006546:	2300      	movs	r3, #0
 8006548:	220a      	movs	r2, #10
 800654a:	4620      	mov	r0, r4
 800654c:	f000 fad7 	bl	8006afe <__multadd>
 8006550:	9b07      	ldr	r3, [sp, #28]
 8006552:	4682      	mov	sl, r0
 8006554:	42bb      	cmp	r3, r7
 8006556:	f04f 020a 	mov.w	r2, #10
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	9907      	ldr	r1, [sp, #28]
 8006560:	4620      	mov	r0, r4
 8006562:	d104      	bne.n	800656e <_dtoa_r+0xb3e>
 8006564:	f000 facb 	bl	8006afe <__multadd>
 8006568:	9007      	str	r0, [sp, #28]
 800656a:	4607      	mov	r7, r0
 800656c:	e6b1      	b.n	80062d2 <_dtoa_r+0x8a2>
 800656e:	f000 fac6 	bl	8006afe <__multadd>
 8006572:	2300      	movs	r3, #0
 8006574:	9007      	str	r0, [sp, #28]
 8006576:	220a      	movs	r2, #10
 8006578:	4639      	mov	r1, r7
 800657a:	4620      	mov	r0, r4
 800657c:	f000 fabf 	bl	8006afe <__multadd>
 8006580:	e7f3      	b.n	800656a <_dtoa_r+0xb3a>
 8006582:	4651      	mov	r1, sl
 8006584:	2300      	movs	r3, #0
 8006586:	220a      	movs	r2, #10
 8006588:	4620      	mov	r0, r4
 800658a:	f000 fab8 	bl	8006afe <__multadd>
 800658e:	4682      	mov	sl, r0
 8006590:	e768      	b.n	8006464 <_dtoa_r+0xa34>
 8006592:	9b06      	ldr	r3, [sp, #24]
 8006594:	4293      	cmp	r3, r2
 8006596:	d105      	bne.n	80065a4 <_dtoa_r+0xb74>
 8006598:	2331      	movs	r3, #49	; 0x31
 800659a:	9a06      	ldr	r2, [sp, #24]
 800659c:	f10b 0b01 	add.w	fp, fp, #1
 80065a0:	7013      	strb	r3, [r2, #0]
 80065a2:	e73e      	b.n	8006422 <_dtoa_r+0x9f2>
 80065a4:	4615      	mov	r5, r2
 80065a6:	e7b4      	b.n	8006512 <_dtoa_r+0xae2>
 80065a8:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <_dtoa_r+0xba0>)
 80065aa:	f7ff baa3 	b.w	8005af4 <_dtoa_r+0xc4>
 80065ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f47f aa7d 	bne.w	8005ab0 <_dtoa_r+0x80>
 80065b6:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <_dtoa_r+0xba4>)
 80065b8:	f7ff ba9c 	b.w	8005af4 <_dtoa_r+0xc4>
 80065bc:	9b04      	ldr	r3, [sp, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f73f af4f 	bgt.w	8006462 <_dtoa_r+0xa32>
 80065c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	f77f af4b 	ble.w	8006462 <_dtoa_r+0xa32>
 80065cc:	e714      	b.n	80063f8 <_dtoa_r+0x9c8>
 80065ce:	bf00      	nop
 80065d0:	08007806 	.word	0x08007806
 80065d4:	08007828 	.word	0x08007828

080065d8 <_localeconv_r>:
 80065d8:	4b04      	ldr	r3, [pc, #16]	; (80065ec <_localeconv_r+0x14>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6a18      	ldr	r0, [r3, #32]
 80065de:	4b04      	ldr	r3, [pc, #16]	; (80065f0 <_localeconv_r+0x18>)
 80065e0:	2800      	cmp	r0, #0
 80065e2:	bf08      	it	eq
 80065e4:	4618      	moveq	r0, r3
 80065e6:	30f0      	adds	r0, #240	; 0xf0
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	20000004 	.word	0x20000004
 80065f0:	20000508 	.word	0x20000508

080065f4 <malloc>:
 80065f4:	4b02      	ldr	r3, [pc, #8]	; (8006600 <malloc+0xc>)
 80065f6:	4601      	mov	r1, r0
 80065f8:	6818      	ldr	r0, [r3, #0]
 80065fa:	f000 b803 	b.w	8006604 <_malloc_r>
 80065fe:	bf00      	nop
 8006600:	20000004 	.word	0x20000004

08006604 <_malloc_r>:
 8006604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006608:	f101 040b 	add.w	r4, r1, #11
 800660c:	2c16      	cmp	r4, #22
 800660e:	4681      	mov	r9, r0
 8006610:	d907      	bls.n	8006622 <_malloc_r+0x1e>
 8006612:	f034 0407 	bics.w	r4, r4, #7
 8006616:	d505      	bpl.n	8006624 <_malloc_r+0x20>
 8006618:	230c      	movs	r3, #12
 800661a:	f8c9 3000 	str.w	r3, [r9]
 800661e:	2600      	movs	r6, #0
 8006620:	e131      	b.n	8006886 <_malloc_r+0x282>
 8006622:	2410      	movs	r4, #16
 8006624:	428c      	cmp	r4, r1
 8006626:	d3f7      	bcc.n	8006618 <_malloc_r+0x14>
 8006628:	4648      	mov	r0, r9
 800662a:	f000 fa11 	bl	8006a50 <__malloc_lock>
 800662e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8006632:	4d9b      	ldr	r5, [pc, #620]	; (80068a0 <_malloc_r+0x29c>)
 8006634:	d236      	bcs.n	80066a4 <_malloc_r+0xa0>
 8006636:	f104 0208 	add.w	r2, r4, #8
 800663a:	442a      	add	r2, r5
 800663c:	6856      	ldr	r6, [r2, #4]
 800663e:	f1a2 0108 	sub.w	r1, r2, #8
 8006642:	428e      	cmp	r6, r1
 8006644:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8006648:	d102      	bne.n	8006650 <_malloc_r+0x4c>
 800664a:	68d6      	ldr	r6, [r2, #12]
 800664c:	42b2      	cmp	r2, r6
 800664e:	d010      	beq.n	8006672 <_malloc_r+0x6e>
 8006650:	6873      	ldr	r3, [r6, #4]
 8006652:	68f2      	ldr	r2, [r6, #12]
 8006654:	68b1      	ldr	r1, [r6, #8]
 8006656:	f023 0303 	bic.w	r3, r3, #3
 800665a:	60ca      	str	r2, [r1, #12]
 800665c:	4433      	add	r3, r6
 800665e:	6091      	str	r1, [r2, #8]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	f042 0201 	orr.w	r2, r2, #1
 8006666:	605a      	str	r2, [r3, #4]
 8006668:	4648      	mov	r0, r9
 800666a:	f000 f9f7 	bl	8006a5c <__malloc_unlock>
 800666e:	3608      	adds	r6, #8
 8006670:	e109      	b.n	8006886 <_malloc_r+0x282>
 8006672:	3302      	adds	r3, #2
 8006674:	4a8b      	ldr	r2, [pc, #556]	; (80068a4 <_malloc_r+0x2a0>)
 8006676:	692e      	ldr	r6, [r5, #16]
 8006678:	4611      	mov	r1, r2
 800667a:	4296      	cmp	r6, r2
 800667c:	d06d      	beq.n	800675a <_malloc_r+0x156>
 800667e:	6870      	ldr	r0, [r6, #4]
 8006680:	f020 0003 	bic.w	r0, r0, #3
 8006684:	1b07      	subs	r7, r0, r4
 8006686:	2f0f      	cmp	r7, #15
 8006688:	dd47      	ble.n	800671a <_malloc_r+0x116>
 800668a:	1933      	adds	r3, r6, r4
 800668c:	f044 0401 	orr.w	r4, r4, #1
 8006690:	6074      	str	r4, [r6, #4]
 8006692:	616b      	str	r3, [r5, #20]
 8006694:	612b      	str	r3, [r5, #16]
 8006696:	60da      	str	r2, [r3, #12]
 8006698:	609a      	str	r2, [r3, #8]
 800669a:	f047 0201 	orr.w	r2, r7, #1
 800669e:	605a      	str	r2, [r3, #4]
 80066a0:	5037      	str	r7, [r6, r0]
 80066a2:	e7e1      	b.n	8006668 <_malloc_r+0x64>
 80066a4:	0a63      	lsrs	r3, r4, #9
 80066a6:	d02a      	beq.n	80066fe <_malloc_r+0xfa>
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d812      	bhi.n	80066d2 <_malloc_r+0xce>
 80066ac:	09a3      	lsrs	r3, r4, #6
 80066ae:	3338      	adds	r3, #56	; 0x38
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80066b6:	6856      	ldr	r6, [r2, #4]
 80066b8:	f1a2 0008 	sub.w	r0, r2, #8
 80066bc:	4286      	cmp	r6, r0
 80066be:	d006      	beq.n	80066ce <_malloc_r+0xca>
 80066c0:	6872      	ldr	r2, [r6, #4]
 80066c2:	f022 0203 	bic.w	r2, r2, #3
 80066c6:	1b11      	subs	r1, r2, r4
 80066c8:	290f      	cmp	r1, #15
 80066ca:	dd1c      	ble.n	8006706 <_malloc_r+0x102>
 80066cc:	3b01      	subs	r3, #1
 80066ce:	3301      	adds	r3, #1
 80066d0:	e7d0      	b.n	8006674 <_malloc_r+0x70>
 80066d2:	2b14      	cmp	r3, #20
 80066d4:	d801      	bhi.n	80066da <_malloc_r+0xd6>
 80066d6:	335b      	adds	r3, #91	; 0x5b
 80066d8:	e7ea      	b.n	80066b0 <_malloc_r+0xac>
 80066da:	2b54      	cmp	r3, #84	; 0x54
 80066dc:	d802      	bhi.n	80066e4 <_malloc_r+0xe0>
 80066de:	0b23      	lsrs	r3, r4, #12
 80066e0:	336e      	adds	r3, #110	; 0x6e
 80066e2:	e7e5      	b.n	80066b0 <_malloc_r+0xac>
 80066e4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80066e8:	d802      	bhi.n	80066f0 <_malloc_r+0xec>
 80066ea:	0be3      	lsrs	r3, r4, #15
 80066ec:	3377      	adds	r3, #119	; 0x77
 80066ee:	e7df      	b.n	80066b0 <_malloc_r+0xac>
 80066f0:	f240 5254 	movw	r2, #1364	; 0x554
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d804      	bhi.n	8006702 <_malloc_r+0xfe>
 80066f8:	0ca3      	lsrs	r3, r4, #18
 80066fa:	337c      	adds	r3, #124	; 0x7c
 80066fc:	e7d8      	b.n	80066b0 <_malloc_r+0xac>
 80066fe:	233f      	movs	r3, #63	; 0x3f
 8006700:	e7d6      	b.n	80066b0 <_malloc_r+0xac>
 8006702:	237e      	movs	r3, #126	; 0x7e
 8006704:	e7d4      	b.n	80066b0 <_malloc_r+0xac>
 8006706:	2900      	cmp	r1, #0
 8006708:	68f1      	ldr	r1, [r6, #12]
 800670a:	db04      	blt.n	8006716 <_malloc_r+0x112>
 800670c:	68b3      	ldr	r3, [r6, #8]
 800670e:	60d9      	str	r1, [r3, #12]
 8006710:	608b      	str	r3, [r1, #8]
 8006712:	18b3      	adds	r3, r6, r2
 8006714:	e7a4      	b.n	8006660 <_malloc_r+0x5c>
 8006716:	460e      	mov	r6, r1
 8006718:	e7d0      	b.n	80066bc <_malloc_r+0xb8>
 800671a:	2f00      	cmp	r7, #0
 800671c:	616a      	str	r2, [r5, #20]
 800671e:	612a      	str	r2, [r5, #16]
 8006720:	db05      	blt.n	800672e <_malloc_r+0x12a>
 8006722:	4430      	add	r0, r6
 8006724:	6843      	ldr	r3, [r0, #4]
 8006726:	f043 0301 	orr.w	r3, r3, #1
 800672a:	6043      	str	r3, [r0, #4]
 800672c:	e79c      	b.n	8006668 <_malloc_r+0x64>
 800672e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006732:	d244      	bcs.n	80067be <_malloc_r+0x1ba>
 8006734:	2201      	movs	r2, #1
 8006736:	08c0      	lsrs	r0, r0, #3
 8006738:	1087      	asrs	r7, r0, #2
 800673a:	fa02 f707 	lsl.w	r7, r2, r7
 800673e:	686a      	ldr	r2, [r5, #4]
 8006740:	3001      	adds	r0, #1
 8006742:	433a      	orrs	r2, r7
 8006744:	606a      	str	r2, [r5, #4]
 8006746:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800674a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800674e:	3a08      	subs	r2, #8
 8006750:	60f2      	str	r2, [r6, #12]
 8006752:	60b7      	str	r7, [r6, #8]
 8006754:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8006758:	60fe      	str	r6, [r7, #12]
 800675a:	2001      	movs	r0, #1
 800675c:	109a      	asrs	r2, r3, #2
 800675e:	fa00 f202 	lsl.w	r2, r0, r2
 8006762:	6868      	ldr	r0, [r5, #4]
 8006764:	4282      	cmp	r2, r0
 8006766:	f200 809f 	bhi.w	80068a8 <_malloc_r+0x2a4>
 800676a:	4202      	tst	r2, r0
 800676c:	d106      	bne.n	800677c <_malloc_r+0x178>
 800676e:	f023 0303 	bic.w	r3, r3, #3
 8006772:	0052      	lsls	r2, r2, #1
 8006774:	4202      	tst	r2, r0
 8006776:	f103 0304 	add.w	r3, r3, #4
 800677a:	d0fa      	beq.n	8006772 <_malloc_r+0x16e>
 800677c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8006780:	46e0      	mov	r8, ip
 8006782:	469e      	mov	lr, r3
 8006784:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8006788:	4546      	cmp	r6, r8
 800678a:	d153      	bne.n	8006834 <_malloc_r+0x230>
 800678c:	f10e 0e01 	add.w	lr, lr, #1
 8006790:	f01e 0f03 	tst.w	lr, #3
 8006794:	f108 0808 	add.w	r8, r8, #8
 8006798:	d1f4      	bne.n	8006784 <_malloc_r+0x180>
 800679a:	0798      	lsls	r0, r3, #30
 800679c:	d179      	bne.n	8006892 <_malloc_r+0x28e>
 800679e:	686b      	ldr	r3, [r5, #4]
 80067a0:	ea23 0302 	bic.w	r3, r3, r2
 80067a4:	606b      	str	r3, [r5, #4]
 80067a6:	6868      	ldr	r0, [r5, #4]
 80067a8:	0052      	lsls	r2, r2, #1
 80067aa:	4282      	cmp	r2, r0
 80067ac:	d87c      	bhi.n	80068a8 <_malloc_r+0x2a4>
 80067ae:	2a00      	cmp	r2, #0
 80067b0:	d07a      	beq.n	80068a8 <_malloc_r+0x2a4>
 80067b2:	4673      	mov	r3, lr
 80067b4:	4202      	tst	r2, r0
 80067b6:	d1e1      	bne.n	800677c <_malloc_r+0x178>
 80067b8:	3304      	adds	r3, #4
 80067ba:	0052      	lsls	r2, r2, #1
 80067bc:	e7fa      	b.n	80067b4 <_malloc_r+0x1b0>
 80067be:	0a42      	lsrs	r2, r0, #9
 80067c0:	2a04      	cmp	r2, #4
 80067c2:	d815      	bhi.n	80067f0 <_malloc_r+0x1ec>
 80067c4:	0982      	lsrs	r2, r0, #6
 80067c6:	3238      	adds	r2, #56	; 0x38
 80067c8:	1c57      	adds	r7, r2, #1
 80067ca:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80067ce:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80067d2:	45be      	cmp	lr, r7
 80067d4:	d126      	bne.n	8006824 <_malloc_r+0x220>
 80067d6:	2001      	movs	r0, #1
 80067d8:	1092      	asrs	r2, r2, #2
 80067da:	fa00 f202 	lsl.w	r2, r0, r2
 80067de:	6868      	ldr	r0, [r5, #4]
 80067e0:	4310      	orrs	r0, r2
 80067e2:	6068      	str	r0, [r5, #4]
 80067e4:	f8c6 e00c 	str.w	lr, [r6, #12]
 80067e8:	60b7      	str	r7, [r6, #8]
 80067ea:	f8ce 6008 	str.w	r6, [lr, #8]
 80067ee:	e7b3      	b.n	8006758 <_malloc_r+0x154>
 80067f0:	2a14      	cmp	r2, #20
 80067f2:	d801      	bhi.n	80067f8 <_malloc_r+0x1f4>
 80067f4:	325b      	adds	r2, #91	; 0x5b
 80067f6:	e7e7      	b.n	80067c8 <_malloc_r+0x1c4>
 80067f8:	2a54      	cmp	r2, #84	; 0x54
 80067fa:	d802      	bhi.n	8006802 <_malloc_r+0x1fe>
 80067fc:	0b02      	lsrs	r2, r0, #12
 80067fe:	326e      	adds	r2, #110	; 0x6e
 8006800:	e7e2      	b.n	80067c8 <_malloc_r+0x1c4>
 8006802:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006806:	d802      	bhi.n	800680e <_malloc_r+0x20a>
 8006808:	0bc2      	lsrs	r2, r0, #15
 800680a:	3277      	adds	r2, #119	; 0x77
 800680c:	e7dc      	b.n	80067c8 <_malloc_r+0x1c4>
 800680e:	f240 5754 	movw	r7, #1364	; 0x554
 8006812:	42ba      	cmp	r2, r7
 8006814:	bf9a      	itte	ls
 8006816:	0c82      	lsrls	r2, r0, #18
 8006818:	327c      	addls	r2, #124	; 0x7c
 800681a:	227e      	movhi	r2, #126	; 0x7e
 800681c:	e7d4      	b.n	80067c8 <_malloc_r+0x1c4>
 800681e:	68bf      	ldr	r7, [r7, #8]
 8006820:	45be      	cmp	lr, r7
 8006822:	d004      	beq.n	800682e <_malloc_r+0x22a>
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	f022 0203 	bic.w	r2, r2, #3
 800682a:	4290      	cmp	r0, r2
 800682c:	d3f7      	bcc.n	800681e <_malloc_r+0x21a>
 800682e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8006832:	e7d7      	b.n	80067e4 <_malloc_r+0x1e0>
 8006834:	6870      	ldr	r0, [r6, #4]
 8006836:	68f7      	ldr	r7, [r6, #12]
 8006838:	f020 0003 	bic.w	r0, r0, #3
 800683c:	eba0 0a04 	sub.w	sl, r0, r4
 8006840:	f1ba 0f0f 	cmp.w	sl, #15
 8006844:	dd10      	ble.n	8006868 <_malloc_r+0x264>
 8006846:	68b2      	ldr	r2, [r6, #8]
 8006848:	1933      	adds	r3, r6, r4
 800684a:	f044 0401 	orr.w	r4, r4, #1
 800684e:	6074      	str	r4, [r6, #4]
 8006850:	60d7      	str	r7, [r2, #12]
 8006852:	60ba      	str	r2, [r7, #8]
 8006854:	f04a 0201 	orr.w	r2, sl, #1
 8006858:	616b      	str	r3, [r5, #20]
 800685a:	612b      	str	r3, [r5, #16]
 800685c:	60d9      	str	r1, [r3, #12]
 800685e:	6099      	str	r1, [r3, #8]
 8006860:	605a      	str	r2, [r3, #4]
 8006862:	f846 a000 	str.w	sl, [r6, r0]
 8006866:	e6ff      	b.n	8006668 <_malloc_r+0x64>
 8006868:	f1ba 0f00 	cmp.w	sl, #0
 800686c:	db0f      	blt.n	800688e <_malloc_r+0x28a>
 800686e:	4430      	add	r0, r6
 8006870:	6843      	ldr	r3, [r0, #4]
 8006872:	f043 0301 	orr.w	r3, r3, #1
 8006876:	6043      	str	r3, [r0, #4]
 8006878:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800687c:	4648      	mov	r0, r9
 800687e:	60df      	str	r7, [r3, #12]
 8006880:	60bb      	str	r3, [r7, #8]
 8006882:	f000 f8eb 	bl	8006a5c <__malloc_unlock>
 8006886:	4630      	mov	r0, r6
 8006888:	b003      	add	sp, #12
 800688a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688e:	463e      	mov	r6, r7
 8006890:	e77a      	b.n	8006788 <_malloc_r+0x184>
 8006892:	f85c 0908 	ldr.w	r0, [ip], #-8
 8006896:	3b01      	subs	r3, #1
 8006898:	4584      	cmp	ip, r0
 800689a:	f43f af7e 	beq.w	800679a <_malloc_r+0x196>
 800689e:	e782      	b.n	80067a6 <_malloc_r+0x1a2>
 80068a0:	200000f8 	.word	0x200000f8
 80068a4:	20000100 	.word	0x20000100
 80068a8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80068ac:	f8db 6004 	ldr.w	r6, [fp, #4]
 80068b0:	f026 0603 	bic.w	r6, r6, #3
 80068b4:	42b4      	cmp	r4, r6
 80068b6:	d803      	bhi.n	80068c0 <_malloc_r+0x2bc>
 80068b8:	1b33      	subs	r3, r6, r4
 80068ba:	2b0f      	cmp	r3, #15
 80068bc:	f300 8095 	bgt.w	80069ea <_malloc_r+0x3e6>
 80068c0:	4a4f      	ldr	r2, [pc, #316]	; (8006a00 <_malloc_r+0x3fc>)
 80068c2:	eb0b 0306 	add.w	r3, fp, r6
 80068c6:	6817      	ldr	r7, [r2, #0]
 80068c8:	4a4e      	ldr	r2, [pc, #312]	; (8006a04 <_malloc_r+0x400>)
 80068ca:	3710      	adds	r7, #16
 80068cc:	6811      	ldr	r1, [r2, #0]
 80068ce:	4427      	add	r7, r4
 80068d0:	3101      	adds	r1, #1
 80068d2:	d005      	beq.n	80068e0 <_malloc_r+0x2dc>
 80068d4:	494c      	ldr	r1, [pc, #304]	; (8006a08 <_malloc_r+0x404>)
 80068d6:	3901      	subs	r1, #1
 80068d8:	440f      	add	r7, r1
 80068da:	3101      	adds	r1, #1
 80068dc:	4249      	negs	r1, r1
 80068de:	400f      	ands	r7, r1
 80068e0:	4639      	mov	r1, r7
 80068e2:	4648      	mov	r0, r9
 80068e4:	9201      	str	r2, [sp, #4]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	f000 fb90 	bl	800700c <_sbrk_r>
 80068ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80068f0:	4680      	mov	r8, r0
 80068f2:	d055      	beq.n	80069a0 <_malloc_r+0x39c>
 80068f4:	9b00      	ldr	r3, [sp, #0]
 80068f6:	9a01      	ldr	r2, [sp, #4]
 80068f8:	4283      	cmp	r3, r0
 80068fa:	d901      	bls.n	8006900 <_malloc_r+0x2fc>
 80068fc:	45ab      	cmp	fp, r5
 80068fe:	d14f      	bne.n	80069a0 <_malloc_r+0x39c>
 8006900:	4842      	ldr	r0, [pc, #264]	; (8006a0c <_malloc_r+0x408>)
 8006902:	4543      	cmp	r3, r8
 8006904:	6801      	ldr	r1, [r0, #0]
 8006906:	4682      	mov	sl, r0
 8006908:	eb07 0e01 	add.w	lr, r7, r1
 800690c:	f8c0 e000 	str.w	lr, [r0]
 8006910:	493f      	ldr	r1, [pc, #252]	; (8006a10 <_malloc_r+0x40c>)
 8006912:	d113      	bne.n	800693c <_malloc_r+0x338>
 8006914:	420b      	tst	r3, r1
 8006916:	d111      	bne.n	800693c <_malloc_r+0x338>
 8006918:	68ab      	ldr	r3, [r5, #8]
 800691a:	443e      	add	r6, r7
 800691c:	f046 0601 	orr.w	r6, r6, #1
 8006920:	605e      	str	r6, [r3, #4]
 8006922:	4a3c      	ldr	r2, [pc, #240]	; (8006a14 <_malloc_r+0x410>)
 8006924:	f8da 3000 	ldr.w	r3, [sl]
 8006928:	6811      	ldr	r1, [r2, #0]
 800692a:	428b      	cmp	r3, r1
 800692c:	bf88      	it	hi
 800692e:	6013      	strhi	r3, [r2, #0]
 8006930:	4a39      	ldr	r2, [pc, #228]	; (8006a18 <_malloc_r+0x414>)
 8006932:	6811      	ldr	r1, [r2, #0]
 8006934:	428b      	cmp	r3, r1
 8006936:	bf88      	it	hi
 8006938:	6013      	strhi	r3, [r2, #0]
 800693a:	e031      	b.n	80069a0 <_malloc_r+0x39c>
 800693c:	6810      	ldr	r0, [r2, #0]
 800693e:	3001      	adds	r0, #1
 8006940:	bf1b      	ittet	ne
 8006942:	eba8 0303 	subne.w	r3, r8, r3
 8006946:	4473      	addne	r3, lr
 8006948:	f8c2 8000 	streq.w	r8, [r2]
 800694c:	f8ca 3000 	strne.w	r3, [sl]
 8006950:	f018 0007 	ands.w	r0, r8, #7
 8006954:	bf1c      	itt	ne
 8006956:	f1c0 0008 	rsbne	r0, r0, #8
 800695a:	4480      	addne	r8, r0
 800695c:	4b2a      	ldr	r3, [pc, #168]	; (8006a08 <_malloc_r+0x404>)
 800695e:	4447      	add	r7, r8
 8006960:	4418      	add	r0, r3
 8006962:	400f      	ands	r7, r1
 8006964:	1bc7      	subs	r7, r0, r7
 8006966:	4639      	mov	r1, r7
 8006968:	4648      	mov	r0, r9
 800696a:	f000 fb4f 	bl	800700c <_sbrk_r>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	bf04      	itt	eq
 8006972:	4640      	moveq	r0, r8
 8006974:	2700      	moveq	r7, #0
 8006976:	f8da 3000 	ldr.w	r3, [sl]
 800697a:	eba0 0008 	sub.w	r0, r0, r8
 800697e:	443b      	add	r3, r7
 8006980:	4407      	add	r7, r0
 8006982:	f047 0701 	orr.w	r7, r7, #1
 8006986:	45ab      	cmp	fp, r5
 8006988:	f8c5 8008 	str.w	r8, [r5, #8]
 800698c:	f8ca 3000 	str.w	r3, [sl]
 8006990:	f8c8 7004 	str.w	r7, [r8, #4]
 8006994:	d0c5      	beq.n	8006922 <_malloc_r+0x31e>
 8006996:	2e0f      	cmp	r6, #15
 8006998:	d810      	bhi.n	80069bc <_malloc_r+0x3b8>
 800699a:	2301      	movs	r3, #1
 800699c:	f8c8 3004 	str.w	r3, [r8, #4]
 80069a0:	68ab      	ldr	r3, [r5, #8]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	f022 0203 	bic.w	r2, r2, #3
 80069a8:	4294      	cmp	r4, r2
 80069aa:	eba2 0304 	sub.w	r3, r2, r4
 80069ae:	d801      	bhi.n	80069b4 <_malloc_r+0x3b0>
 80069b0:	2b0f      	cmp	r3, #15
 80069b2:	dc1a      	bgt.n	80069ea <_malloc_r+0x3e6>
 80069b4:	4648      	mov	r0, r9
 80069b6:	f000 f851 	bl	8006a5c <__malloc_unlock>
 80069ba:	e630      	b.n	800661e <_malloc_r+0x1a>
 80069bc:	2205      	movs	r2, #5
 80069be:	f8db 3004 	ldr.w	r3, [fp, #4]
 80069c2:	3e0c      	subs	r6, #12
 80069c4:	f026 0607 	bic.w	r6, r6, #7
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	4333      	orrs	r3, r6
 80069ce:	f8cb 3004 	str.w	r3, [fp, #4]
 80069d2:	2e0f      	cmp	r6, #15
 80069d4:	eb0b 0306 	add.w	r3, fp, r6
 80069d8:	605a      	str	r2, [r3, #4]
 80069da:	609a      	str	r2, [r3, #8]
 80069dc:	d9a1      	bls.n	8006922 <_malloc_r+0x31e>
 80069de:	f10b 0108 	add.w	r1, fp, #8
 80069e2:	4648      	mov	r0, r9
 80069e4:	f000 fc20 	bl	8007228 <_free_r>
 80069e8:	e79b      	b.n	8006922 <_malloc_r+0x31e>
 80069ea:	68ae      	ldr	r6, [r5, #8]
 80069ec:	f044 0201 	orr.w	r2, r4, #1
 80069f0:	f043 0301 	orr.w	r3, r3, #1
 80069f4:	4434      	add	r4, r6
 80069f6:	6072      	str	r2, [r6, #4]
 80069f8:	60ac      	str	r4, [r5, #8]
 80069fa:	6063      	str	r3, [r4, #4]
 80069fc:	e634      	b.n	8006668 <_malloc_r+0x64>
 80069fe:	bf00      	nop
 8006a00:	200006c4 	.word	0x200006c4
 8006a04:	20000500 	.word	0x20000500
 8006a08:	00000080 	.word	0x00000080
 8006a0c:	20000694 	.word	0x20000694
 8006a10:	0000007f 	.word	0x0000007f
 8006a14:	200006bc 	.word	0x200006bc
 8006a18:	200006c0 	.word	0x200006c0

08006a1c <memchr>:
 8006a1c:	b510      	push	{r4, lr}
 8006a1e:	b2c9      	uxtb	r1, r1
 8006a20:	4402      	add	r2, r0
 8006a22:	4290      	cmp	r0, r2
 8006a24:	4603      	mov	r3, r0
 8006a26:	d101      	bne.n	8006a2c <memchr+0x10>
 8006a28:	2000      	movs	r0, #0
 8006a2a:	bd10      	pop	{r4, pc}
 8006a2c:	781c      	ldrb	r4, [r3, #0]
 8006a2e:	3001      	adds	r0, #1
 8006a30:	428c      	cmp	r4, r1
 8006a32:	d1f6      	bne.n	8006a22 <memchr+0x6>
 8006a34:	4618      	mov	r0, r3
 8006a36:	bd10      	pop	{r4, pc}

08006a38 <memcpy>:
 8006a38:	b510      	push	{r4, lr}
 8006a3a:	1e43      	subs	r3, r0, #1
 8006a3c:	440a      	add	r2, r1
 8006a3e:	4291      	cmp	r1, r2
 8006a40:	d100      	bne.n	8006a44 <memcpy+0xc>
 8006a42:	bd10      	pop	{r4, pc}
 8006a44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a4c:	e7f7      	b.n	8006a3e <memcpy+0x6>
	...

08006a50 <__malloc_lock>:
 8006a50:	4801      	ldr	r0, [pc, #4]	; (8006a58 <__malloc_lock+0x8>)
 8006a52:	f000 bca5 	b.w	80073a0 <__retarget_lock_acquire_recursive>
 8006a56:	bf00      	nop
 8006a58:	20000828 	.word	0x20000828

08006a5c <__malloc_unlock>:
 8006a5c:	4801      	ldr	r0, [pc, #4]	; (8006a64 <__malloc_unlock+0x8>)
 8006a5e:	f000 bca0 	b.w	80073a2 <__retarget_lock_release_recursive>
 8006a62:	bf00      	nop
 8006a64:	20000828 	.word	0x20000828

08006a68 <_Balloc>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	460e      	mov	r6, r1
 8006a70:	b93d      	cbnz	r5, 8006a82 <_Balloc+0x1a>
 8006a72:	2010      	movs	r0, #16
 8006a74:	f7ff fdbe 	bl	80065f4 <malloc>
 8006a78:	6260      	str	r0, [r4, #36]	; 0x24
 8006a7a:	6045      	str	r5, [r0, #4]
 8006a7c:	6085      	str	r5, [r0, #8]
 8006a7e:	6005      	str	r5, [r0, #0]
 8006a80:	60c5      	str	r5, [r0, #12]
 8006a82:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006a84:	68eb      	ldr	r3, [r5, #12]
 8006a86:	b183      	cbz	r3, 8006aaa <_Balloc+0x42>
 8006a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006a90:	b9b8      	cbnz	r0, 8006ac2 <_Balloc+0x5a>
 8006a92:	2101      	movs	r1, #1
 8006a94:	fa01 f506 	lsl.w	r5, r1, r6
 8006a98:	1d6a      	adds	r2, r5, #5
 8006a9a:	0092      	lsls	r2, r2, #2
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f000 fb3f 	bl	8007120 <_calloc_r>
 8006aa2:	b160      	cbz	r0, 8006abe <_Balloc+0x56>
 8006aa4:	6046      	str	r6, [r0, #4]
 8006aa6:	6085      	str	r5, [r0, #8]
 8006aa8:	e00e      	b.n	8006ac8 <_Balloc+0x60>
 8006aaa:	2221      	movs	r2, #33	; 0x21
 8006aac:	2104      	movs	r1, #4
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f000 fb36 	bl	8007120 <_calloc_r>
 8006ab4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ab6:	60e8      	str	r0, [r5, #12]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e4      	bne.n	8006a88 <_Balloc+0x20>
 8006abe:	2000      	movs	r0, #0
 8006ac0:	bd70      	pop	{r4, r5, r6, pc}
 8006ac2:	6802      	ldr	r2, [r0, #0]
 8006ac4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	6103      	str	r3, [r0, #16]
 8006acc:	60c3      	str	r3, [r0, #12]
 8006ace:	bd70      	pop	{r4, r5, r6, pc}

08006ad0 <_Bfree>:
 8006ad0:	b570      	push	{r4, r5, r6, lr}
 8006ad2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	460d      	mov	r5, r1
 8006ad8:	b93c      	cbnz	r4, 8006aea <_Bfree+0x1a>
 8006ada:	2010      	movs	r0, #16
 8006adc:	f7ff fd8a 	bl	80065f4 <malloc>
 8006ae0:	6270      	str	r0, [r6, #36]	; 0x24
 8006ae2:	6044      	str	r4, [r0, #4]
 8006ae4:	6084      	str	r4, [r0, #8]
 8006ae6:	6004      	str	r4, [r0, #0]
 8006ae8:	60c4      	str	r4, [r0, #12]
 8006aea:	b13d      	cbz	r5, 8006afc <_Bfree+0x2c>
 8006aec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006aee:	686a      	ldr	r2, [r5, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006af6:	6029      	str	r1, [r5, #0]
 8006af8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006afc:	bd70      	pop	{r4, r5, r6, pc}

08006afe <__multadd>:
 8006afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b02:	461f      	mov	r7, r3
 8006b04:	4606      	mov	r6, r0
 8006b06:	460c      	mov	r4, r1
 8006b08:	2300      	movs	r3, #0
 8006b0a:	690d      	ldr	r5, [r1, #16]
 8006b0c:	f101 0e14 	add.w	lr, r1, #20
 8006b10:	f8de 0000 	ldr.w	r0, [lr]
 8006b14:	3301      	adds	r3, #1
 8006b16:	b281      	uxth	r1, r0
 8006b18:	fb02 7101 	mla	r1, r2, r1, r7
 8006b1c:	0c00      	lsrs	r0, r0, #16
 8006b1e:	0c0f      	lsrs	r7, r1, #16
 8006b20:	fb02 7000 	mla	r0, r2, r0, r7
 8006b24:	b289      	uxth	r1, r1
 8006b26:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006b2a:	429d      	cmp	r5, r3
 8006b2c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006b30:	f84e 1b04 	str.w	r1, [lr], #4
 8006b34:	dcec      	bgt.n	8006b10 <__multadd+0x12>
 8006b36:	b1d7      	cbz	r7, 8006b6e <__multadd+0x70>
 8006b38:	68a3      	ldr	r3, [r4, #8]
 8006b3a:	429d      	cmp	r5, r3
 8006b3c:	db12      	blt.n	8006b64 <__multadd+0x66>
 8006b3e:	6861      	ldr	r1, [r4, #4]
 8006b40:	4630      	mov	r0, r6
 8006b42:	3101      	adds	r1, #1
 8006b44:	f7ff ff90 	bl	8006a68 <_Balloc>
 8006b48:	4680      	mov	r8, r0
 8006b4a:	6922      	ldr	r2, [r4, #16]
 8006b4c:	f104 010c 	add.w	r1, r4, #12
 8006b50:	3202      	adds	r2, #2
 8006b52:	0092      	lsls	r2, r2, #2
 8006b54:	300c      	adds	r0, #12
 8006b56:	f7ff ff6f 	bl	8006a38 <memcpy>
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	f7ff ffb7 	bl	8006ad0 <_Bfree>
 8006b62:	4644      	mov	r4, r8
 8006b64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b68:	3501      	adds	r5, #1
 8006b6a:	615f      	str	r7, [r3, #20]
 8006b6c:	6125      	str	r5, [r4, #16]
 8006b6e:	4620      	mov	r0, r4
 8006b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006b74 <__hi0bits>:
 8006b74:	0c02      	lsrs	r2, r0, #16
 8006b76:	0412      	lsls	r2, r2, #16
 8006b78:	4603      	mov	r3, r0
 8006b7a:	b9b2      	cbnz	r2, 8006baa <__hi0bits+0x36>
 8006b7c:	0403      	lsls	r3, r0, #16
 8006b7e:	2010      	movs	r0, #16
 8006b80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006b84:	bf04      	itt	eq
 8006b86:	021b      	lsleq	r3, r3, #8
 8006b88:	3008      	addeq	r0, #8
 8006b8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006b8e:	bf04      	itt	eq
 8006b90:	011b      	lsleq	r3, r3, #4
 8006b92:	3004      	addeq	r0, #4
 8006b94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006b98:	bf04      	itt	eq
 8006b9a:	009b      	lsleq	r3, r3, #2
 8006b9c:	3002      	addeq	r0, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	db06      	blt.n	8006bb0 <__hi0bits+0x3c>
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	d503      	bpl.n	8006bae <__hi0bits+0x3a>
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	4770      	bx	lr
 8006baa:	2000      	movs	r0, #0
 8006bac:	e7e8      	b.n	8006b80 <__hi0bits+0xc>
 8006bae:	2020      	movs	r0, #32
 8006bb0:	4770      	bx	lr

08006bb2 <__lo0bits>:
 8006bb2:	6803      	ldr	r3, [r0, #0]
 8006bb4:	4601      	mov	r1, r0
 8006bb6:	f013 0207 	ands.w	r2, r3, #7
 8006bba:	d00b      	beq.n	8006bd4 <__lo0bits+0x22>
 8006bbc:	07da      	lsls	r2, r3, #31
 8006bbe:	d423      	bmi.n	8006c08 <__lo0bits+0x56>
 8006bc0:	0798      	lsls	r0, r3, #30
 8006bc2:	bf49      	itett	mi
 8006bc4:	085b      	lsrmi	r3, r3, #1
 8006bc6:	089b      	lsrpl	r3, r3, #2
 8006bc8:	2001      	movmi	r0, #1
 8006bca:	600b      	strmi	r3, [r1, #0]
 8006bcc:	bf5c      	itt	pl
 8006bce:	600b      	strpl	r3, [r1, #0]
 8006bd0:	2002      	movpl	r0, #2
 8006bd2:	4770      	bx	lr
 8006bd4:	b298      	uxth	r0, r3
 8006bd6:	b9a8      	cbnz	r0, 8006c04 <__lo0bits+0x52>
 8006bd8:	2010      	movs	r0, #16
 8006bda:	0c1b      	lsrs	r3, r3, #16
 8006bdc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006be0:	bf04      	itt	eq
 8006be2:	0a1b      	lsreq	r3, r3, #8
 8006be4:	3008      	addeq	r0, #8
 8006be6:	071a      	lsls	r2, r3, #28
 8006be8:	bf04      	itt	eq
 8006bea:	091b      	lsreq	r3, r3, #4
 8006bec:	3004      	addeq	r0, #4
 8006bee:	079a      	lsls	r2, r3, #30
 8006bf0:	bf04      	itt	eq
 8006bf2:	089b      	lsreq	r3, r3, #2
 8006bf4:	3002      	addeq	r0, #2
 8006bf6:	07da      	lsls	r2, r3, #31
 8006bf8:	d402      	bmi.n	8006c00 <__lo0bits+0x4e>
 8006bfa:	085b      	lsrs	r3, r3, #1
 8006bfc:	d006      	beq.n	8006c0c <__lo0bits+0x5a>
 8006bfe:	3001      	adds	r0, #1
 8006c00:	600b      	str	r3, [r1, #0]
 8006c02:	4770      	bx	lr
 8006c04:	4610      	mov	r0, r2
 8006c06:	e7e9      	b.n	8006bdc <__lo0bits+0x2a>
 8006c08:	2000      	movs	r0, #0
 8006c0a:	4770      	bx	lr
 8006c0c:	2020      	movs	r0, #32
 8006c0e:	4770      	bx	lr

08006c10 <__i2b>:
 8006c10:	b510      	push	{r4, lr}
 8006c12:	460c      	mov	r4, r1
 8006c14:	2101      	movs	r1, #1
 8006c16:	f7ff ff27 	bl	8006a68 <_Balloc>
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	6144      	str	r4, [r0, #20]
 8006c1e:	6102      	str	r2, [r0, #16]
 8006c20:	bd10      	pop	{r4, pc}

08006c22 <__multiply>:
 8006c22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c26:	4614      	mov	r4, r2
 8006c28:	690a      	ldr	r2, [r1, #16]
 8006c2a:	6923      	ldr	r3, [r4, #16]
 8006c2c:	4689      	mov	r9, r1
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	bfbe      	ittt	lt
 8006c32:	460b      	movlt	r3, r1
 8006c34:	46a1      	movlt	r9, r4
 8006c36:	461c      	movlt	r4, r3
 8006c38:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006c3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006c40:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006c44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006c48:	eb07 060a 	add.w	r6, r7, sl
 8006c4c:	429e      	cmp	r6, r3
 8006c4e:	bfc8      	it	gt
 8006c50:	3101      	addgt	r1, #1
 8006c52:	f7ff ff09 	bl	8006a68 <_Balloc>
 8006c56:	f100 0514 	add.w	r5, r0, #20
 8006c5a:	462b      	mov	r3, r5
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c62:	4543      	cmp	r3, r8
 8006c64:	d316      	bcc.n	8006c94 <__multiply+0x72>
 8006c66:	f104 0214 	add.w	r2, r4, #20
 8006c6a:	f109 0114 	add.w	r1, r9, #20
 8006c6e:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006c72:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	9c01      	ldr	r4, [sp, #4]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	4294      	cmp	r4, r2
 8006c7e:	d80c      	bhi.n	8006c9a <__multiply+0x78>
 8006c80:	2e00      	cmp	r6, #0
 8006c82:	dd03      	ble.n	8006c8c <__multiply+0x6a>
 8006c84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d054      	beq.n	8006d36 <__multiply+0x114>
 8006c8c:	6106      	str	r6, [r0, #16]
 8006c8e:	b003      	add	sp, #12
 8006c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c94:	f843 2b04 	str.w	r2, [r3], #4
 8006c98:	e7e3      	b.n	8006c62 <__multiply+0x40>
 8006c9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c9e:	3204      	adds	r2, #4
 8006ca0:	f1ba 0f00 	cmp.w	sl, #0
 8006ca4:	d020      	beq.n	8006ce8 <__multiply+0xc6>
 8006ca6:	46ae      	mov	lr, r5
 8006ca8:	4689      	mov	r9, r1
 8006caa:	f04f 0c00 	mov.w	ip, #0
 8006cae:	f859 4b04 	ldr.w	r4, [r9], #4
 8006cb2:	f8be b000 	ldrh.w	fp, [lr]
 8006cb6:	b2a3      	uxth	r3, r4
 8006cb8:	fb0a b303 	mla	r3, sl, r3, fp
 8006cbc:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8006cc0:	f8de 4000 	ldr.w	r4, [lr]
 8006cc4:	4463      	add	r3, ip
 8006cc6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006cca:	fb0a c40b 	mla	r4, sl, fp, ip
 8006cce:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006cd8:	454f      	cmp	r7, r9
 8006cda:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006cde:	f84e 3b04 	str.w	r3, [lr], #4
 8006ce2:	d8e4      	bhi.n	8006cae <__multiply+0x8c>
 8006ce4:	f8ce c000 	str.w	ip, [lr]
 8006ce8:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8006cec:	f1b9 0f00 	cmp.w	r9, #0
 8006cf0:	d01f      	beq.n	8006d32 <__multiply+0x110>
 8006cf2:	46ae      	mov	lr, r5
 8006cf4:	468c      	mov	ip, r1
 8006cf6:	f04f 0a00 	mov.w	sl, #0
 8006cfa:	682b      	ldr	r3, [r5, #0]
 8006cfc:	f8bc 4000 	ldrh.w	r4, [ip]
 8006d00:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	fb09 b404 	mla	r4, r9, r4, fp
 8006d0a:	44a2      	add	sl, r4
 8006d0c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8006d10:	f84e 3b04 	str.w	r3, [lr], #4
 8006d14:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d18:	f8be 4000 	ldrh.w	r4, [lr]
 8006d1c:	0c1b      	lsrs	r3, r3, #16
 8006d1e:	fb09 4303 	mla	r3, r9, r3, r4
 8006d22:	4567      	cmp	r7, ip
 8006d24:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8006d28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d2c:	d8e6      	bhi.n	8006cfc <__multiply+0xda>
 8006d2e:	f8ce 3000 	str.w	r3, [lr]
 8006d32:	3504      	adds	r5, #4
 8006d34:	e7a0      	b.n	8006c78 <__multiply+0x56>
 8006d36:	3e01      	subs	r6, #1
 8006d38:	e7a2      	b.n	8006c80 <__multiply+0x5e>
	...

08006d3c <__pow5mult>:
 8006d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d40:	4615      	mov	r5, r2
 8006d42:	f012 0203 	ands.w	r2, r2, #3
 8006d46:	4606      	mov	r6, r0
 8006d48:	460f      	mov	r7, r1
 8006d4a:	d007      	beq.n	8006d5c <__pow5mult+0x20>
 8006d4c:	4c21      	ldr	r4, [pc, #132]	; (8006dd4 <__pow5mult+0x98>)
 8006d4e:	3a01      	subs	r2, #1
 8006d50:	2300      	movs	r3, #0
 8006d52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d56:	f7ff fed2 	bl	8006afe <__multadd>
 8006d5a:	4607      	mov	r7, r0
 8006d5c:	10ad      	asrs	r5, r5, #2
 8006d5e:	d035      	beq.n	8006dcc <__pow5mult+0x90>
 8006d60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d62:	b93c      	cbnz	r4, 8006d74 <__pow5mult+0x38>
 8006d64:	2010      	movs	r0, #16
 8006d66:	f7ff fc45 	bl	80065f4 <malloc>
 8006d6a:	6270      	str	r0, [r6, #36]	; 0x24
 8006d6c:	6044      	str	r4, [r0, #4]
 8006d6e:	6084      	str	r4, [r0, #8]
 8006d70:	6004      	str	r4, [r0, #0]
 8006d72:	60c4      	str	r4, [r0, #12]
 8006d74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d7c:	b94c      	cbnz	r4, 8006d92 <__pow5mult+0x56>
 8006d7e:	f240 2171 	movw	r1, #625	; 0x271
 8006d82:	4630      	mov	r0, r6
 8006d84:	f7ff ff44 	bl	8006c10 <__i2b>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d90:	6003      	str	r3, [r0, #0]
 8006d92:	f04f 0800 	mov.w	r8, #0
 8006d96:	07eb      	lsls	r3, r5, #31
 8006d98:	d50a      	bpl.n	8006db0 <__pow5mult+0x74>
 8006d9a:	4639      	mov	r1, r7
 8006d9c:	4622      	mov	r2, r4
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f7ff ff3f 	bl	8006c22 <__multiply>
 8006da4:	4681      	mov	r9, r0
 8006da6:	4639      	mov	r1, r7
 8006da8:	4630      	mov	r0, r6
 8006daa:	f7ff fe91 	bl	8006ad0 <_Bfree>
 8006dae:	464f      	mov	r7, r9
 8006db0:	106d      	asrs	r5, r5, #1
 8006db2:	d00b      	beq.n	8006dcc <__pow5mult+0x90>
 8006db4:	6820      	ldr	r0, [r4, #0]
 8006db6:	b938      	cbnz	r0, 8006dc8 <__pow5mult+0x8c>
 8006db8:	4622      	mov	r2, r4
 8006dba:	4621      	mov	r1, r4
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f7ff ff30 	bl	8006c22 <__multiply>
 8006dc2:	6020      	str	r0, [r4, #0]
 8006dc4:	f8c0 8000 	str.w	r8, [r0]
 8006dc8:	4604      	mov	r4, r0
 8006dca:	e7e4      	b.n	8006d96 <__pow5mult+0x5a>
 8006dcc:	4638      	mov	r0, r7
 8006dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd2:	bf00      	nop
 8006dd4:	08007928 	.word	0x08007928

08006dd8 <__lshift>:
 8006dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ddc:	460c      	mov	r4, r1
 8006dde:	4607      	mov	r7, r0
 8006de0:	4616      	mov	r6, r2
 8006de2:	6923      	ldr	r3, [r4, #16]
 8006de4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006de8:	eb0a 0903 	add.w	r9, sl, r3
 8006dec:	6849      	ldr	r1, [r1, #4]
 8006dee:	68a3      	ldr	r3, [r4, #8]
 8006df0:	f109 0501 	add.w	r5, r9, #1
 8006df4:	42ab      	cmp	r3, r5
 8006df6:	db31      	blt.n	8006e5c <__lshift+0x84>
 8006df8:	4638      	mov	r0, r7
 8006dfa:	f7ff fe35 	bl	8006a68 <_Balloc>
 8006dfe:	2200      	movs	r2, #0
 8006e00:	4680      	mov	r8, r0
 8006e02:	4611      	mov	r1, r2
 8006e04:	f100 0314 	add.w	r3, r0, #20
 8006e08:	4552      	cmp	r2, sl
 8006e0a:	db2a      	blt.n	8006e62 <__lshift+0x8a>
 8006e0c:	6920      	ldr	r0, [r4, #16]
 8006e0e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e12:	f104 0114 	add.w	r1, r4, #20
 8006e16:	f016 021f 	ands.w	r2, r6, #31
 8006e1a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8006e1e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8006e22:	d022      	beq.n	8006e6a <__lshift+0x92>
 8006e24:	2000      	movs	r0, #0
 8006e26:	f1c2 0c20 	rsb	ip, r2, #32
 8006e2a:	680e      	ldr	r6, [r1, #0]
 8006e2c:	4096      	lsls	r6, r2
 8006e2e:	4330      	orrs	r0, r6
 8006e30:	f843 0b04 	str.w	r0, [r3], #4
 8006e34:	f851 0b04 	ldr.w	r0, [r1], #4
 8006e38:	458e      	cmp	lr, r1
 8006e3a:	fa20 f00c 	lsr.w	r0, r0, ip
 8006e3e:	d8f4      	bhi.n	8006e2a <__lshift+0x52>
 8006e40:	6018      	str	r0, [r3, #0]
 8006e42:	b108      	cbz	r0, 8006e48 <__lshift+0x70>
 8006e44:	f109 0502 	add.w	r5, r9, #2
 8006e48:	3d01      	subs	r5, #1
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	f8c8 5010 	str.w	r5, [r8, #16]
 8006e50:	4621      	mov	r1, r4
 8006e52:	f7ff fe3d 	bl	8006ad0 <_Bfree>
 8006e56:	4640      	mov	r0, r8
 8006e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e5c:	3101      	adds	r1, #1
 8006e5e:	005b      	lsls	r3, r3, #1
 8006e60:	e7c8      	b.n	8006df4 <__lshift+0x1c>
 8006e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006e66:	3201      	adds	r2, #1
 8006e68:	e7ce      	b.n	8006e08 <__lshift+0x30>
 8006e6a:	3b04      	subs	r3, #4
 8006e6c:	f851 2b04 	ldr.w	r2, [r1], #4
 8006e70:	458e      	cmp	lr, r1
 8006e72:	f843 2f04 	str.w	r2, [r3, #4]!
 8006e76:	d8f9      	bhi.n	8006e6c <__lshift+0x94>
 8006e78:	e7e6      	b.n	8006e48 <__lshift+0x70>

08006e7a <__mcmp>:
 8006e7a:	6903      	ldr	r3, [r0, #16]
 8006e7c:	690a      	ldr	r2, [r1, #16]
 8006e7e:	b530      	push	{r4, r5, lr}
 8006e80:	1a9b      	subs	r3, r3, r2
 8006e82:	d10c      	bne.n	8006e9e <__mcmp+0x24>
 8006e84:	0092      	lsls	r2, r2, #2
 8006e86:	3014      	adds	r0, #20
 8006e88:	3114      	adds	r1, #20
 8006e8a:	1884      	adds	r4, r0, r2
 8006e8c:	4411      	add	r1, r2
 8006e8e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e92:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e96:	4295      	cmp	r5, r2
 8006e98:	d003      	beq.n	8006ea2 <__mcmp+0x28>
 8006e9a:	d305      	bcc.n	8006ea8 <__mcmp+0x2e>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	bd30      	pop	{r4, r5, pc}
 8006ea2:	42a0      	cmp	r0, r4
 8006ea4:	d3f3      	bcc.n	8006e8e <__mcmp+0x14>
 8006ea6:	e7fa      	b.n	8006e9e <__mcmp+0x24>
 8006ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8006eac:	e7f7      	b.n	8006e9e <__mcmp+0x24>

08006eae <__mdiff>:
 8006eae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb2:	460d      	mov	r5, r1
 8006eb4:	4607      	mov	r7, r0
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	4628      	mov	r0, r5
 8006eba:	4614      	mov	r4, r2
 8006ebc:	f7ff ffdd 	bl	8006e7a <__mcmp>
 8006ec0:	1e06      	subs	r6, r0, #0
 8006ec2:	d108      	bne.n	8006ed6 <__mdiff+0x28>
 8006ec4:	4631      	mov	r1, r6
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	f7ff fdce 	bl	8006a68 <_Balloc>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	6146      	str	r6, [r0, #20]
 8006ed0:	6103      	str	r3, [r0, #16]
 8006ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed6:	bfa4      	itt	ge
 8006ed8:	4623      	movge	r3, r4
 8006eda:	462c      	movge	r4, r5
 8006edc:	4638      	mov	r0, r7
 8006ede:	6861      	ldr	r1, [r4, #4]
 8006ee0:	bfa6      	itte	ge
 8006ee2:	461d      	movge	r5, r3
 8006ee4:	2600      	movge	r6, #0
 8006ee6:	2601      	movlt	r6, #1
 8006ee8:	f7ff fdbe 	bl	8006a68 <_Balloc>
 8006eec:	f04f 0c00 	mov.w	ip, #0
 8006ef0:	60c6      	str	r6, [r0, #12]
 8006ef2:	692b      	ldr	r3, [r5, #16]
 8006ef4:	6926      	ldr	r6, [r4, #16]
 8006ef6:	f104 0214 	add.w	r2, r4, #20
 8006efa:	f105 0914 	add.w	r9, r5, #20
 8006efe:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006f02:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006f06:	f100 0114 	add.w	r1, r0, #20
 8006f0a:	f852 ab04 	ldr.w	sl, [r2], #4
 8006f0e:	f859 5b04 	ldr.w	r5, [r9], #4
 8006f12:	fa1f f38a 	uxth.w	r3, sl
 8006f16:	4463      	add	r3, ip
 8006f18:	b2ac      	uxth	r4, r5
 8006f1a:	1b1b      	subs	r3, r3, r4
 8006f1c:	0c2c      	lsrs	r4, r5, #16
 8006f1e:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006f22:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006f2c:	45c8      	cmp	r8, r9
 8006f2e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006f32:	4696      	mov	lr, r2
 8006f34:	f841 4b04 	str.w	r4, [r1], #4
 8006f38:	d8e7      	bhi.n	8006f0a <__mdiff+0x5c>
 8006f3a:	45be      	cmp	lr, r7
 8006f3c:	d305      	bcc.n	8006f4a <__mdiff+0x9c>
 8006f3e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006f42:	b18b      	cbz	r3, 8006f68 <__mdiff+0xba>
 8006f44:	6106      	str	r6, [r0, #16]
 8006f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006f4e:	b2a2      	uxth	r2, r4
 8006f50:	4462      	add	r2, ip
 8006f52:	1413      	asrs	r3, r2, #16
 8006f54:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006f58:	b292      	uxth	r2, r2
 8006f5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f5e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006f62:	f841 2b04 	str.w	r2, [r1], #4
 8006f66:	e7e8      	b.n	8006f3a <__mdiff+0x8c>
 8006f68:	3e01      	subs	r6, #1
 8006f6a:	e7e8      	b.n	8006f3e <__mdiff+0x90>

08006f6c <__d2b>:
 8006f6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006f70:	461c      	mov	r4, r3
 8006f72:	2101      	movs	r1, #1
 8006f74:	4690      	mov	r8, r2
 8006f76:	9e08      	ldr	r6, [sp, #32]
 8006f78:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006f7a:	f7ff fd75 	bl	8006a68 <_Balloc>
 8006f7e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006f82:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006f86:	4607      	mov	r7, r0
 8006f88:	bb34      	cbnz	r4, 8006fd8 <__d2b+0x6c>
 8006f8a:	9201      	str	r2, [sp, #4]
 8006f8c:	f1b8 0f00 	cmp.w	r8, #0
 8006f90:	d027      	beq.n	8006fe2 <__d2b+0x76>
 8006f92:	a802      	add	r0, sp, #8
 8006f94:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006f98:	f7ff fe0b 	bl	8006bb2 <__lo0bits>
 8006f9c:	9900      	ldr	r1, [sp, #0]
 8006f9e:	b1f0      	cbz	r0, 8006fde <__d2b+0x72>
 8006fa0:	9a01      	ldr	r2, [sp, #4]
 8006fa2:	f1c0 0320 	rsb	r3, r0, #32
 8006fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006faa:	430b      	orrs	r3, r1
 8006fac:	40c2      	lsrs	r2, r0
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	9201      	str	r2, [sp, #4]
 8006fb2:	9b01      	ldr	r3, [sp, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	bf14      	ite	ne
 8006fb8:	2102      	movne	r1, #2
 8006fba:	2101      	moveq	r1, #1
 8006fbc:	61bb      	str	r3, [r7, #24]
 8006fbe:	6139      	str	r1, [r7, #16]
 8006fc0:	b1c4      	cbz	r4, 8006ff4 <__d2b+0x88>
 8006fc2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006fc6:	4404      	add	r4, r0
 8006fc8:	6034      	str	r4, [r6, #0]
 8006fca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fce:	6028      	str	r0, [r5, #0]
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	b002      	add	sp, #8
 8006fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006fdc:	e7d5      	b.n	8006f8a <__d2b+0x1e>
 8006fde:	6179      	str	r1, [r7, #20]
 8006fe0:	e7e7      	b.n	8006fb2 <__d2b+0x46>
 8006fe2:	a801      	add	r0, sp, #4
 8006fe4:	f7ff fde5 	bl	8006bb2 <__lo0bits>
 8006fe8:	2101      	movs	r1, #1
 8006fea:	9b01      	ldr	r3, [sp, #4]
 8006fec:	6139      	str	r1, [r7, #16]
 8006fee:	617b      	str	r3, [r7, #20]
 8006ff0:	3020      	adds	r0, #32
 8006ff2:	e7e5      	b.n	8006fc0 <__d2b+0x54>
 8006ff4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ff8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006ffc:	6030      	str	r0, [r6, #0]
 8006ffe:	6918      	ldr	r0, [r3, #16]
 8007000:	f7ff fdb8 	bl	8006b74 <__hi0bits>
 8007004:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007008:	e7e1      	b.n	8006fce <__d2b+0x62>
	...

0800700c <_sbrk_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	2300      	movs	r3, #0
 8007010:	4c05      	ldr	r4, [pc, #20]	; (8007028 <_sbrk_r+0x1c>)
 8007012:	4605      	mov	r5, r0
 8007014:	4608      	mov	r0, r1
 8007016:	6023      	str	r3, [r4, #0]
 8007018:	f000 fb88 	bl	800772c <_sbrk>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d102      	bne.n	8007026 <_sbrk_r+0x1a>
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	b103      	cbz	r3, 8007026 <_sbrk_r+0x1a>
 8007024:	602b      	str	r3, [r5, #0]
 8007026:	bd38      	pop	{r3, r4, r5, pc}
 8007028:	20000830 	.word	0x20000830

0800702c <__ssprint_r>:
 800702c:	6893      	ldr	r3, [r2, #8]
 800702e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007032:	4681      	mov	r9, r0
 8007034:	460c      	mov	r4, r1
 8007036:	4617      	mov	r7, r2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d060      	beq.n	80070fe <__ssprint_r+0xd2>
 800703c:	f04f 0b00 	mov.w	fp, #0
 8007040:	465e      	mov	r6, fp
 8007042:	f8d2 a000 	ldr.w	sl, [r2]
 8007046:	b356      	cbz	r6, 800709e <__ssprint_r+0x72>
 8007048:	68a3      	ldr	r3, [r4, #8]
 800704a:	429e      	cmp	r6, r3
 800704c:	d344      	bcc.n	80070d8 <__ssprint_r+0xac>
 800704e:	89a2      	ldrh	r2, [r4, #12]
 8007050:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007054:	d03e      	beq.n	80070d4 <__ssprint_r+0xa8>
 8007056:	2302      	movs	r3, #2
 8007058:	6825      	ldr	r5, [r4, #0]
 800705a:	6921      	ldr	r1, [r4, #16]
 800705c:	eba5 0801 	sub.w	r8, r5, r1
 8007060:	6965      	ldr	r5, [r4, #20]
 8007062:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007066:	fb95 f5f3 	sdiv	r5, r5, r3
 800706a:	f108 0301 	add.w	r3, r8, #1
 800706e:	4433      	add	r3, r6
 8007070:	429d      	cmp	r5, r3
 8007072:	bf38      	it	cc
 8007074:	461d      	movcc	r5, r3
 8007076:	0553      	lsls	r3, r2, #21
 8007078:	d546      	bpl.n	8007108 <__ssprint_r+0xdc>
 800707a:	4629      	mov	r1, r5
 800707c:	4648      	mov	r0, r9
 800707e:	f7ff fac1 	bl	8006604 <_malloc_r>
 8007082:	b998      	cbnz	r0, 80070ac <__ssprint_r+0x80>
 8007084:	230c      	movs	r3, #12
 8007086:	f8c9 3000 	str.w	r3, [r9]
 800708a:	89a3      	ldrh	r3, [r4, #12]
 800708c:	f04f 30ff 	mov.w	r0, #4294967295
 8007090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007094:	81a3      	strh	r3, [r4, #12]
 8007096:	2300      	movs	r3, #0
 8007098:	60bb      	str	r3, [r7, #8]
 800709a:	607b      	str	r3, [r7, #4]
 800709c:	e031      	b.n	8007102 <__ssprint_r+0xd6>
 800709e:	f8da b000 	ldr.w	fp, [sl]
 80070a2:	f8da 6004 	ldr.w	r6, [sl, #4]
 80070a6:	f10a 0a08 	add.w	sl, sl, #8
 80070aa:	e7cc      	b.n	8007046 <__ssprint_r+0x1a>
 80070ac:	4642      	mov	r2, r8
 80070ae:	6921      	ldr	r1, [r4, #16]
 80070b0:	9001      	str	r0, [sp, #4]
 80070b2:	f7ff fcc1 	bl	8006a38 <memcpy>
 80070b6:	89a2      	ldrh	r2, [r4, #12]
 80070b8:	9b01      	ldr	r3, [sp, #4]
 80070ba:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80070be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070c2:	81a2      	strh	r2, [r4, #12]
 80070c4:	6123      	str	r3, [r4, #16]
 80070c6:	4443      	add	r3, r8
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	4633      	mov	r3, r6
 80070cc:	6165      	str	r5, [r4, #20]
 80070ce:	eba5 0508 	sub.w	r5, r5, r8
 80070d2:	60a5      	str	r5, [r4, #8]
 80070d4:	429e      	cmp	r6, r3
 80070d6:	d200      	bcs.n	80070da <__ssprint_r+0xae>
 80070d8:	4633      	mov	r3, r6
 80070da:	461a      	mov	r2, r3
 80070dc:	4659      	mov	r1, fp
 80070de:	6820      	ldr	r0, [r4, #0]
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	f000 f971 	bl	80073c8 <memmove>
 80070e6:	68a2      	ldr	r2, [r4, #8]
 80070e8:	9b01      	ldr	r3, [sp, #4]
 80070ea:	1ad2      	subs	r2, r2, r3
 80070ec:	60a2      	str	r2, [r4, #8]
 80070ee:	6822      	ldr	r2, [r4, #0]
 80070f0:	4413      	add	r3, r2
 80070f2:	6023      	str	r3, [r4, #0]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	1b9e      	subs	r6, r3, r6
 80070f8:	60be      	str	r6, [r7, #8]
 80070fa:	2e00      	cmp	r6, #0
 80070fc:	d1cf      	bne.n	800709e <__ssprint_r+0x72>
 80070fe:	2000      	movs	r0, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	b003      	add	sp, #12
 8007104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007108:	462a      	mov	r2, r5
 800710a:	4648      	mov	r0, r9
 800710c:	f000 f97e 	bl	800740c <_realloc_r>
 8007110:	4603      	mov	r3, r0
 8007112:	2800      	cmp	r0, #0
 8007114:	d1d6      	bne.n	80070c4 <__ssprint_r+0x98>
 8007116:	6921      	ldr	r1, [r4, #16]
 8007118:	4648      	mov	r0, r9
 800711a:	f000 f885 	bl	8007228 <_free_r>
 800711e:	e7b1      	b.n	8007084 <__ssprint_r+0x58>

08007120 <_calloc_r>:
 8007120:	b510      	push	{r4, lr}
 8007122:	4351      	muls	r1, r2
 8007124:	f7ff fa6e 	bl	8006604 <_malloc_r>
 8007128:	4604      	mov	r4, r0
 800712a:	b198      	cbz	r0, 8007154 <_calloc_r+0x34>
 800712c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007130:	f022 0203 	bic.w	r2, r2, #3
 8007134:	3a04      	subs	r2, #4
 8007136:	2a24      	cmp	r2, #36	; 0x24
 8007138:	d81b      	bhi.n	8007172 <_calloc_r+0x52>
 800713a:	2a13      	cmp	r2, #19
 800713c:	d917      	bls.n	800716e <_calloc_r+0x4e>
 800713e:	2100      	movs	r1, #0
 8007140:	2a1b      	cmp	r2, #27
 8007142:	6001      	str	r1, [r0, #0]
 8007144:	6041      	str	r1, [r0, #4]
 8007146:	d807      	bhi.n	8007158 <_calloc_r+0x38>
 8007148:	f100 0308 	add.w	r3, r0, #8
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	605a      	str	r2, [r3, #4]
 8007152:	609a      	str	r2, [r3, #8]
 8007154:	4620      	mov	r0, r4
 8007156:	bd10      	pop	{r4, pc}
 8007158:	2a24      	cmp	r2, #36	; 0x24
 800715a:	6081      	str	r1, [r0, #8]
 800715c:	60c1      	str	r1, [r0, #12]
 800715e:	bf11      	iteee	ne
 8007160:	f100 0310 	addne.w	r3, r0, #16
 8007164:	6101      	streq	r1, [r0, #16]
 8007166:	f100 0318 	addeq.w	r3, r0, #24
 800716a:	6141      	streq	r1, [r0, #20]
 800716c:	e7ee      	b.n	800714c <_calloc_r+0x2c>
 800716e:	4603      	mov	r3, r0
 8007170:	e7ec      	b.n	800714c <_calloc_r+0x2c>
 8007172:	2100      	movs	r1, #0
 8007174:	f000 f942 	bl	80073fc <memset>
 8007178:	e7ec      	b.n	8007154 <_calloc_r+0x34>
	...

0800717c <_malloc_trim_r>:
 800717c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007180:	4689      	mov	r9, r1
 8007182:	4f25      	ldr	r7, [pc, #148]	; (8007218 <_malloc_trim_r+0x9c>)
 8007184:	4606      	mov	r6, r0
 8007186:	f7ff fc63 	bl	8006a50 <__malloc_lock>
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8007224 <_malloc_trim_r+0xa8>
 8007190:	685d      	ldr	r5, [r3, #4]
 8007192:	f1a8 0411 	sub.w	r4, r8, #17
 8007196:	f025 0503 	bic.w	r5, r5, #3
 800719a:	eba4 0409 	sub.w	r4, r4, r9
 800719e:	442c      	add	r4, r5
 80071a0:	fbb4 f4f8 	udiv	r4, r4, r8
 80071a4:	3c01      	subs	r4, #1
 80071a6:	fb08 f404 	mul.w	r4, r8, r4
 80071aa:	4544      	cmp	r4, r8
 80071ac:	da05      	bge.n	80071ba <_malloc_trim_r+0x3e>
 80071ae:	4630      	mov	r0, r6
 80071b0:	f7ff fc54 	bl	8006a5c <__malloc_unlock>
 80071b4:	2000      	movs	r0, #0
 80071b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ba:	2100      	movs	r1, #0
 80071bc:	4630      	mov	r0, r6
 80071be:	f7ff ff25 	bl	800700c <_sbrk_r>
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	442b      	add	r3, r5
 80071c6:	4298      	cmp	r0, r3
 80071c8:	d1f1      	bne.n	80071ae <_malloc_trim_r+0x32>
 80071ca:	4261      	negs	r1, r4
 80071cc:	4630      	mov	r0, r6
 80071ce:	f7ff ff1d 	bl	800700c <_sbrk_r>
 80071d2:	3001      	adds	r0, #1
 80071d4:	d110      	bne.n	80071f8 <_malloc_trim_r+0x7c>
 80071d6:	2100      	movs	r1, #0
 80071d8:	4630      	mov	r0, r6
 80071da:	f7ff ff17 	bl	800700c <_sbrk_r>
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	1a83      	subs	r3, r0, r2
 80071e2:	2b0f      	cmp	r3, #15
 80071e4:	dde3      	ble.n	80071ae <_malloc_trim_r+0x32>
 80071e6:	490d      	ldr	r1, [pc, #52]	; (800721c <_malloc_trim_r+0xa0>)
 80071e8:	f043 0301 	orr.w	r3, r3, #1
 80071ec:	6809      	ldr	r1, [r1, #0]
 80071ee:	6053      	str	r3, [r2, #4]
 80071f0:	1a40      	subs	r0, r0, r1
 80071f2:	490b      	ldr	r1, [pc, #44]	; (8007220 <_malloc_trim_r+0xa4>)
 80071f4:	6008      	str	r0, [r1, #0]
 80071f6:	e7da      	b.n	80071ae <_malloc_trim_r+0x32>
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4a09      	ldr	r2, [pc, #36]	; (8007220 <_malloc_trim_r+0xa4>)
 80071fc:	1b2d      	subs	r5, r5, r4
 80071fe:	f045 0501 	orr.w	r5, r5, #1
 8007202:	605d      	str	r5, [r3, #4]
 8007204:	6813      	ldr	r3, [r2, #0]
 8007206:	4630      	mov	r0, r6
 8007208:	1b1c      	subs	r4, r3, r4
 800720a:	6014      	str	r4, [r2, #0]
 800720c:	f7ff fc26 	bl	8006a5c <__malloc_unlock>
 8007210:	2001      	movs	r0, #1
 8007212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007216:	bf00      	nop
 8007218:	200000f8 	.word	0x200000f8
 800721c:	20000500 	.word	0x20000500
 8007220:	20000694 	.word	0x20000694
 8007224:	00000080 	.word	0x00000080

08007228 <_free_r>:
 8007228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800722c:	4604      	mov	r4, r0
 800722e:	4688      	mov	r8, r1
 8007230:	2900      	cmp	r1, #0
 8007232:	f000 80ab 	beq.w	800738c <_free_r+0x164>
 8007236:	f7ff fc0b 	bl	8006a50 <__malloc_lock>
 800723a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800723e:	4d54      	ldr	r5, [pc, #336]	; (8007390 <_free_r+0x168>)
 8007240:	f022 0001 	bic.w	r0, r2, #1
 8007244:	f1a8 0308 	sub.w	r3, r8, #8
 8007248:	181f      	adds	r7, r3, r0
 800724a:	68a9      	ldr	r1, [r5, #8]
 800724c:	687e      	ldr	r6, [r7, #4]
 800724e:	428f      	cmp	r7, r1
 8007250:	f026 0603 	bic.w	r6, r6, #3
 8007254:	f002 0201 	and.w	r2, r2, #1
 8007258:	d11b      	bne.n	8007292 <_free_r+0x6a>
 800725a:	4430      	add	r0, r6
 800725c:	b93a      	cbnz	r2, 800726e <_free_r+0x46>
 800725e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8007262:	1a9b      	subs	r3, r3, r2
 8007264:	6899      	ldr	r1, [r3, #8]
 8007266:	4410      	add	r0, r2
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	60ca      	str	r2, [r1, #12]
 800726c:	6091      	str	r1, [r2, #8]
 800726e:	f040 0201 	orr.w	r2, r0, #1
 8007272:	605a      	str	r2, [r3, #4]
 8007274:	60ab      	str	r3, [r5, #8]
 8007276:	4b47      	ldr	r3, [pc, #284]	; (8007394 <_free_r+0x16c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4298      	cmp	r0, r3
 800727c:	d304      	bcc.n	8007288 <_free_r+0x60>
 800727e:	4b46      	ldr	r3, [pc, #280]	; (8007398 <_free_r+0x170>)
 8007280:	4620      	mov	r0, r4
 8007282:	6819      	ldr	r1, [r3, #0]
 8007284:	f7ff ff7a 	bl	800717c <_malloc_trim_r>
 8007288:	4620      	mov	r0, r4
 800728a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800728e:	f7ff bbe5 	b.w	8006a5c <__malloc_unlock>
 8007292:	607e      	str	r6, [r7, #4]
 8007294:	2a00      	cmp	r2, #0
 8007296:	d139      	bne.n	800730c <_free_r+0xe4>
 8007298:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800729c:	f105 0e08 	add.w	lr, r5, #8
 80072a0:	1a5b      	subs	r3, r3, r1
 80072a2:	4408      	add	r0, r1
 80072a4:	6899      	ldr	r1, [r3, #8]
 80072a6:	4571      	cmp	r1, lr
 80072a8:	d032      	beq.n	8007310 <_free_r+0xe8>
 80072aa:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80072ae:	f8c1 e00c 	str.w	lr, [r1, #12]
 80072b2:	f8ce 1008 	str.w	r1, [lr, #8]
 80072b6:	19b9      	adds	r1, r7, r6
 80072b8:	6849      	ldr	r1, [r1, #4]
 80072ba:	07c9      	lsls	r1, r1, #31
 80072bc:	d40a      	bmi.n	80072d4 <_free_r+0xac>
 80072be:	4430      	add	r0, r6
 80072c0:	68b9      	ldr	r1, [r7, #8]
 80072c2:	bb3a      	cbnz	r2, 8007314 <_free_r+0xec>
 80072c4:	4e35      	ldr	r6, [pc, #212]	; (800739c <_free_r+0x174>)
 80072c6:	42b1      	cmp	r1, r6
 80072c8:	d124      	bne.n	8007314 <_free_r+0xec>
 80072ca:	2201      	movs	r2, #1
 80072cc:	616b      	str	r3, [r5, #20]
 80072ce:	612b      	str	r3, [r5, #16]
 80072d0:	60d9      	str	r1, [r3, #12]
 80072d2:	6099      	str	r1, [r3, #8]
 80072d4:	f040 0101 	orr.w	r1, r0, #1
 80072d8:	6059      	str	r1, [r3, #4]
 80072da:	5018      	str	r0, [r3, r0]
 80072dc:	2a00      	cmp	r2, #0
 80072de:	d1d3      	bne.n	8007288 <_free_r+0x60>
 80072e0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80072e4:	d21a      	bcs.n	800731c <_free_r+0xf4>
 80072e6:	2201      	movs	r2, #1
 80072e8:	08c0      	lsrs	r0, r0, #3
 80072ea:	1081      	asrs	r1, r0, #2
 80072ec:	408a      	lsls	r2, r1
 80072ee:	6869      	ldr	r1, [r5, #4]
 80072f0:	3001      	adds	r0, #1
 80072f2:	430a      	orrs	r2, r1
 80072f4:	606a      	str	r2, [r5, #4]
 80072f6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80072fa:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80072fe:	3a08      	subs	r2, #8
 8007300:	60da      	str	r2, [r3, #12]
 8007302:	6099      	str	r1, [r3, #8]
 8007304:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8007308:	60cb      	str	r3, [r1, #12]
 800730a:	e7bd      	b.n	8007288 <_free_r+0x60>
 800730c:	2200      	movs	r2, #0
 800730e:	e7d2      	b.n	80072b6 <_free_r+0x8e>
 8007310:	2201      	movs	r2, #1
 8007312:	e7d0      	b.n	80072b6 <_free_r+0x8e>
 8007314:	68fe      	ldr	r6, [r7, #12]
 8007316:	60ce      	str	r6, [r1, #12]
 8007318:	60b1      	str	r1, [r6, #8]
 800731a:	e7db      	b.n	80072d4 <_free_r+0xac>
 800731c:	0a42      	lsrs	r2, r0, #9
 800731e:	2a04      	cmp	r2, #4
 8007320:	d813      	bhi.n	800734a <_free_r+0x122>
 8007322:	0982      	lsrs	r2, r0, #6
 8007324:	3238      	adds	r2, #56	; 0x38
 8007326:	1c51      	adds	r1, r2, #1
 8007328:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800732c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8007330:	428e      	cmp	r6, r1
 8007332:	d124      	bne.n	800737e <_free_r+0x156>
 8007334:	2001      	movs	r0, #1
 8007336:	1092      	asrs	r2, r2, #2
 8007338:	fa00 f202 	lsl.w	r2, r0, r2
 800733c:	6868      	ldr	r0, [r5, #4]
 800733e:	4302      	orrs	r2, r0
 8007340:	606a      	str	r2, [r5, #4]
 8007342:	60de      	str	r6, [r3, #12]
 8007344:	6099      	str	r1, [r3, #8]
 8007346:	60b3      	str	r3, [r6, #8]
 8007348:	e7de      	b.n	8007308 <_free_r+0xe0>
 800734a:	2a14      	cmp	r2, #20
 800734c:	d801      	bhi.n	8007352 <_free_r+0x12a>
 800734e:	325b      	adds	r2, #91	; 0x5b
 8007350:	e7e9      	b.n	8007326 <_free_r+0xfe>
 8007352:	2a54      	cmp	r2, #84	; 0x54
 8007354:	d802      	bhi.n	800735c <_free_r+0x134>
 8007356:	0b02      	lsrs	r2, r0, #12
 8007358:	326e      	adds	r2, #110	; 0x6e
 800735a:	e7e4      	b.n	8007326 <_free_r+0xfe>
 800735c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007360:	d802      	bhi.n	8007368 <_free_r+0x140>
 8007362:	0bc2      	lsrs	r2, r0, #15
 8007364:	3277      	adds	r2, #119	; 0x77
 8007366:	e7de      	b.n	8007326 <_free_r+0xfe>
 8007368:	f240 5154 	movw	r1, #1364	; 0x554
 800736c:	428a      	cmp	r2, r1
 800736e:	bf9a      	itte	ls
 8007370:	0c82      	lsrls	r2, r0, #18
 8007372:	327c      	addls	r2, #124	; 0x7c
 8007374:	227e      	movhi	r2, #126	; 0x7e
 8007376:	e7d6      	b.n	8007326 <_free_r+0xfe>
 8007378:	6889      	ldr	r1, [r1, #8]
 800737a:	428e      	cmp	r6, r1
 800737c:	d004      	beq.n	8007388 <_free_r+0x160>
 800737e:	684a      	ldr	r2, [r1, #4]
 8007380:	f022 0203 	bic.w	r2, r2, #3
 8007384:	4290      	cmp	r0, r2
 8007386:	d3f7      	bcc.n	8007378 <_free_r+0x150>
 8007388:	68ce      	ldr	r6, [r1, #12]
 800738a:	e7da      	b.n	8007342 <_free_r+0x11a>
 800738c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007390:	200000f8 	.word	0x200000f8
 8007394:	20000504 	.word	0x20000504
 8007398:	200006c4 	.word	0x200006c4
 800739c:	20000100 	.word	0x20000100

080073a0 <__retarget_lock_acquire_recursive>:
 80073a0:	4770      	bx	lr

080073a2 <__retarget_lock_release_recursive>:
 80073a2:	4770      	bx	lr

080073a4 <__ascii_mbtowc>:
 80073a4:	b082      	sub	sp, #8
 80073a6:	b901      	cbnz	r1, 80073aa <__ascii_mbtowc+0x6>
 80073a8:	a901      	add	r1, sp, #4
 80073aa:	b142      	cbz	r2, 80073be <__ascii_mbtowc+0x1a>
 80073ac:	b14b      	cbz	r3, 80073c2 <__ascii_mbtowc+0x1e>
 80073ae:	7813      	ldrb	r3, [r2, #0]
 80073b0:	600b      	str	r3, [r1, #0]
 80073b2:	7812      	ldrb	r2, [r2, #0]
 80073b4:	1c10      	adds	r0, r2, #0
 80073b6:	bf18      	it	ne
 80073b8:	2001      	movne	r0, #1
 80073ba:	b002      	add	sp, #8
 80073bc:	4770      	bx	lr
 80073be:	4610      	mov	r0, r2
 80073c0:	e7fb      	b.n	80073ba <__ascii_mbtowc+0x16>
 80073c2:	f06f 0001 	mvn.w	r0, #1
 80073c6:	e7f8      	b.n	80073ba <__ascii_mbtowc+0x16>

080073c8 <memmove>:
 80073c8:	4288      	cmp	r0, r1
 80073ca:	b510      	push	{r4, lr}
 80073cc:	eb01 0302 	add.w	r3, r1, r2
 80073d0:	d803      	bhi.n	80073da <memmove+0x12>
 80073d2:	1e42      	subs	r2, r0, #1
 80073d4:	4299      	cmp	r1, r3
 80073d6:	d10c      	bne.n	80073f2 <memmove+0x2a>
 80073d8:	bd10      	pop	{r4, pc}
 80073da:	4298      	cmp	r0, r3
 80073dc:	d2f9      	bcs.n	80073d2 <memmove+0xa>
 80073de:	1881      	adds	r1, r0, r2
 80073e0:	1ad2      	subs	r2, r2, r3
 80073e2:	42d3      	cmn	r3, r2
 80073e4:	d100      	bne.n	80073e8 <memmove+0x20>
 80073e6:	bd10      	pop	{r4, pc}
 80073e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80073f0:	e7f7      	b.n	80073e2 <memmove+0x1a>
 80073f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80073fa:	e7eb      	b.n	80073d4 <memmove+0xc>

080073fc <memset>:
 80073fc:	4603      	mov	r3, r0
 80073fe:	4402      	add	r2, r0
 8007400:	4293      	cmp	r3, r2
 8007402:	d100      	bne.n	8007406 <memset+0xa>
 8007404:	4770      	bx	lr
 8007406:	f803 1b01 	strb.w	r1, [r3], #1
 800740a:	e7f9      	b.n	8007400 <memset+0x4>

0800740c <_realloc_r>:
 800740c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	4682      	mov	sl, r0
 8007412:	460c      	mov	r4, r1
 8007414:	b929      	cbnz	r1, 8007422 <_realloc_r+0x16>
 8007416:	4611      	mov	r1, r2
 8007418:	b003      	add	sp, #12
 800741a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741e:	f7ff b8f1 	b.w	8006604 <_malloc_r>
 8007422:	9201      	str	r2, [sp, #4]
 8007424:	f7ff fb14 	bl	8006a50 <__malloc_lock>
 8007428:	9a01      	ldr	r2, [sp, #4]
 800742a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800742e:	f102 080b 	add.w	r8, r2, #11
 8007432:	f1b8 0f16 	cmp.w	r8, #22
 8007436:	f1a4 0908 	sub.w	r9, r4, #8
 800743a:	f025 0603 	bic.w	r6, r5, #3
 800743e:	d90a      	bls.n	8007456 <_realloc_r+0x4a>
 8007440:	f038 0807 	bics.w	r8, r8, #7
 8007444:	d509      	bpl.n	800745a <_realloc_r+0x4e>
 8007446:	230c      	movs	r3, #12
 8007448:	2700      	movs	r7, #0
 800744a:	f8ca 3000 	str.w	r3, [sl]
 800744e:	4638      	mov	r0, r7
 8007450:	b003      	add	sp, #12
 8007452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007456:	f04f 0810 	mov.w	r8, #16
 800745a:	4590      	cmp	r8, r2
 800745c:	d3f3      	bcc.n	8007446 <_realloc_r+0x3a>
 800745e:	45b0      	cmp	r8, r6
 8007460:	f340 8148 	ble.w	80076f4 <_realloc_r+0x2e8>
 8007464:	4ba9      	ldr	r3, [pc, #676]	; (800770c <_realloc_r+0x300>)
 8007466:	eb09 0106 	add.w	r1, r9, r6
 800746a:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800746e:	469b      	mov	fp, r3
 8007470:	4571      	cmp	r1, lr
 8007472:	684b      	ldr	r3, [r1, #4]
 8007474:	d005      	beq.n	8007482 <_realloc_r+0x76>
 8007476:	f023 0001 	bic.w	r0, r3, #1
 800747a:	4408      	add	r0, r1
 800747c:	6840      	ldr	r0, [r0, #4]
 800747e:	07c7      	lsls	r7, r0, #31
 8007480:	d447      	bmi.n	8007512 <_realloc_r+0x106>
 8007482:	f023 0303 	bic.w	r3, r3, #3
 8007486:	4571      	cmp	r1, lr
 8007488:	eb06 0703 	add.w	r7, r6, r3
 800748c:	d119      	bne.n	80074c2 <_realloc_r+0xb6>
 800748e:	f108 0010 	add.w	r0, r8, #16
 8007492:	4287      	cmp	r7, r0
 8007494:	db3f      	blt.n	8007516 <_realloc_r+0x10a>
 8007496:	eba7 0708 	sub.w	r7, r7, r8
 800749a:	eb09 0308 	add.w	r3, r9, r8
 800749e:	f047 0701 	orr.w	r7, r7, #1
 80074a2:	f8cb 3008 	str.w	r3, [fp, #8]
 80074a6:	605f      	str	r7, [r3, #4]
 80074a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80074ac:	4650      	mov	r0, sl
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	ea43 0308 	orr.w	r3, r3, r8
 80074b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80074ba:	f7ff facf 	bl	8006a5c <__malloc_unlock>
 80074be:	4627      	mov	r7, r4
 80074c0:	e7c5      	b.n	800744e <_realloc_r+0x42>
 80074c2:	45b8      	cmp	r8, r7
 80074c4:	dc27      	bgt.n	8007516 <_realloc_r+0x10a>
 80074c6:	68cb      	ldr	r3, [r1, #12]
 80074c8:	688a      	ldr	r2, [r1, #8]
 80074ca:	60d3      	str	r3, [r2, #12]
 80074cc:	609a      	str	r2, [r3, #8]
 80074ce:	eba7 0008 	sub.w	r0, r7, r8
 80074d2:	280f      	cmp	r0, #15
 80074d4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80074d8:	eb09 0207 	add.w	r2, r9, r7
 80074dc:	f240 810c 	bls.w	80076f8 <_realloc_r+0x2ec>
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	eb09 0108 	add.w	r1, r9, r8
 80074e8:	ea43 0308 	orr.w	r3, r3, r8
 80074ec:	f040 0001 	orr.w	r0, r0, #1
 80074f0:	f8c9 3004 	str.w	r3, [r9, #4]
 80074f4:	6048      	str	r0, [r1, #4]
 80074f6:	6853      	ldr	r3, [r2, #4]
 80074f8:	3108      	adds	r1, #8
 80074fa:	f043 0301 	orr.w	r3, r3, #1
 80074fe:	6053      	str	r3, [r2, #4]
 8007500:	4650      	mov	r0, sl
 8007502:	f7ff fe91 	bl	8007228 <_free_r>
 8007506:	4650      	mov	r0, sl
 8007508:	f7ff faa8 	bl	8006a5c <__malloc_unlock>
 800750c:	f109 0708 	add.w	r7, r9, #8
 8007510:	e79d      	b.n	800744e <_realloc_r+0x42>
 8007512:	2300      	movs	r3, #0
 8007514:	4619      	mov	r1, r3
 8007516:	07e8      	lsls	r0, r5, #31
 8007518:	f100 8085 	bmi.w	8007626 <_realloc_r+0x21a>
 800751c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8007520:	eba9 0505 	sub.w	r5, r9, r5
 8007524:	6868      	ldr	r0, [r5, #4]
 8007526:	f020 0003 	bic.w	r0, r0, #3
 800752a:	4430      	add	r0, r6
 800752c:	2900      	cmp	r1, #0
 800752e:	d077      	beq.n	8007620 <_realloc_r+0x214>
 8007530:	4571      	cmp	r1, lr
 8007532:	d151      	bne.n	80075d8 <_realloc_r+0x1cc>
 8007534:	4403      	add	r3, r0
 8007536:	f108 0110 	add.w	r1, r8, #16
 800753a:	428b      	cmp	r3, r1
 800753c:	db70      	blt.n	8007620 <_realloc_r+0x214>
 800753e:	462f      	mov	r7, r5
 8007540:	68ea      	ldr	r2, [r5, #12]
 8007542:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8007546:	60ca      	str	r2, [r1, #12]
 8007548:	6091      	str	r1, [r2, #8]
 800754a:	1f32      	subs	r2, r6, #4
 800754c:	2a24      	cmp	r2, #36	; 0x24
 800754e:	d83c      	bhi.n	80075ca <_realloc_r+0x1be>
 8007550:	2a13      	cmp	r2, #19
 8007552:	d937      	bls.n	80075c4 <_realloc_r+0x1b8>
 8007554:	6821      	ldr	r1, [r4, #0]
 8007556:	2a1b      	cmp	r2, #27
 8007558:	60a9      	str	r1, [r5, #8]
 800755a:	6861      	ldr	r1, [r4, #4]
 800755c:	60e9      	str	r1, [r5, #12]
 800755e:	d81c      	bhi.n	800759a <_realloc_r+0x18e>
 8007560:	f105 0210 	add.w	r2, r5, #16
 8007564:	f104 0108 	add.w	r1, r4, #8
 8007568:	6808      	ldr	r0, [r1, #0]
 800756a:	6010      	str	r0, [r2, #0]
 800756c:	6848      	ldr	r0, [r1, #4]
 800756e:	6050      	str	r0, [r2, #4]
 8007570:	6889      	ldr	r1, [r1, #8]
 8007572:	6091      	str	r1, [r2, #8]
 8007574:	eba3 0308 	sub.w	r3, r3, r8
 8007578:	eb05 0208 	add.w	r2, r5, r8
 800757c:	f043 0301 	orr.w	r3, r3, #1
 8007580:	f8cb 2008 	str.w	r2, [fp, #8]
 8007584:	6053      	str	r3, [r2, #4]
 8007586:	686b      	ldr	r3, [r5, #4]
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	ea43 0308 	orr.w	r3, r3, r8
 8007590:	606b      	str	r3, [r5, #4]
 8007592:	4650      	mov	r0, sl
 8007594:	f7ff fa62 	bl	8006a5c <__malloc_unlock>
 8007598:	e759      	b.n	800744e <_realloc_r+0x42>
 800759a:	68a1      	ldr	r1, [r4, #8]
 800759c:	2a24      	cmp	r2, #36	; 0x24
 800759e:	6129      	str	r1, [r5, #16]
 80075a0:	68e1      	ldr	r1, [r4, #12]
 80075a2:	bf18      	it	ne
 80075a4:	f105 0218 	addne.w	r2, r5, #24
 80075a8:	6169      	str	r1, [r5, #20]
 80075aa:	bf09      	itett	eq
 80075ac:	6922      	ldreq	r2, [r4, #16]
 80075ae:	f104 0110 	addne.w	r1, r4, #16
 80075b2:	61aa      	streq	r2, [r5, #24]
 80075b4:	6960      	ldreq	r0, [r4, #20]
 80075b6:	bf02      	ittt	eq
 80075b8:	f105 0220 	addeq.w	r2, r5, #32
 80075bc:	f104 0118 	addeq.w	r1, r4, #24
 80075c0:	61e8      	streq	r0, [r5, #28]
 80075c2:	e7d1      	b.n	8007568 <_realloc_r+0x15c>
 80075c4:	463a      	mov	r2, r7
 80075c6:	4621      	mov	r1, r4
 80075c8:	e7ce      	b.n	8007568 <_realloc_r+0x15c>
 80075ca:	4621      	mov	r1, r4
 80075cc:	4638      	mov	r0, r7
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	f7ff fefa 	bl	80073c8 <memmove>
 80075d4:	9b01      	ldr	r3, [sp, #4]
 80075d6:	e7cd      	b.n	8007574 <_realloc_r+0x168>
 80075d8:	18c7      	adds	r7, r0, r3
 80075da:	45b8      	cmp	r8, r7
 80075dc:	dc20      	bgt.n	8007620 <_realloc_r+0x214>
 80075de:	68cb      	ldr	r3, [r1, #12]
 80075e0:	688a      	ldr	r2, [r1, #8]
 80075e2:	60d3      	str	r3, [r2, #12]
 80075e4:	609a      	str	r2, [r3, #8]
 80075e6:	4628      	mov	r0, r5
 80075e8:	68eb      	ldr	r3, [r5, #12]
 80075ea:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80075ee:	60d3      	str	r3, [r2, #12]
 80075f0:	609a      	str	r2, [r3, #8]
 80075f2:	1f32      	subs	r2, r6, #4
 80075f4:	2a24      	cmp	r2, #36	; 0x24
 80075f6:	d843      	bhi.n	8007680 <_realloc_r+0x274>
 80075f8:	2a13      	cmp	r2, #19
 80075fa:	d93f      	bls.n	800767c <_realloc_r+0x270>
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	2a1b      	cmp	r2, #27
 8007600:	60ab      	str	r3, [r5, #8]
 8007602:	6863      	ldr	r3, [r4, #4]
 8007604:	60eb      	str	r3, [r5, #12]
 8007606:	d824      	bhi.n	8007652 <_realloc_r+0x246>
 8007608:	f105 0010 	add.w	r0, r5, #16
 800760c:	f104 0308 	add.w	r3, r4, #8
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	6002      	str	r2, [r0, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	6042      	str	r2, [r0, #4]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	6083      	str	r3, [r0, #8]
 800761c:	46a9      	mov	r9, r5
 800761e:	e756      	b.n	80074ce <_realloc_r+0xc2>
 8007620:	4580      	cmp	r8, r0
 8007622:	4607      	mov	r7, r0
 8007624:	dddf      	ble.n	80075e6 <_realloc_r+0x1da>
 8007626:	4611      	mov	r1, r2
 8007628:	4650      	mov	r0, sl
 800762a:	f7fe ffeb 	bl	8006604 <_malloc_r>
 800762e:	4607      	mov	r7, r0
 8007630:	2800      	cmp	r0, #0
 8007632:	d0ae      	beq.n	8007592 <_realloc_r+0x186>
 8007634:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007638:	f1a0 0208 	sub.w	r2, r0, #8
 800763c:	f023 0301 	bic.w	r3, r3, #1
 8007640:	444b      	add	r3, r9
 8007642:	429a      	cmp	r2, r3
 8007644:	d120      	bne.n	8007688 <_realloc_r+0x27c>
 8007646:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800764a:	f027 0703 	bic.w	r7, r7, #3
 800764e:	4437      	add	r7, r6
 8007650:	e73d      	b.n	80074ce <_realloc_r+0xc2>
 8007652:	68a3      	ldr	r3, [r4, #8]
 8007654:	2a24      	cmp	r2, #36	; 0x24
 8007656:	612b      	str	r3, [r5, #16]
 8007658:	68e3      	ldr	r3, [r4, #12]
 800765a:	bf18      	it	ne
 800765c:	f105 0018 	addne.w	r0, r5, #24
 8007660:	616b      	str	r3, [r5, #20]
 8007662:	bf09      	itett	eq
 8007664:	6923      	ldreq	r3, [r4, #16]
 8007666:	f104 0310 	addne.w	r3, r4, #16
 800766a:	61ab      	streq	r3, [r5, #24]
 800766c:	6962      	ldreq	r2, [r4, #20]
 800766e:	bf02      	ittt	eq
 8007670:	f105 0020 	addeq.w	r0, r5, #32
 8007674:	f104 0318 	addeq.w	r3, r4, #24
 8007678:	61ea      	streq	r2, [r5, #28]
 800767a:	e7c9      	b.n	8007610 <_realloc_r+0x204>
 800767c:	4623      	mov	r3, r4
 800767e:	e7c7      	b.n	8007610 <_realloc_r+0x204>
 8007680:	4621      	mov	r1, r4
 8007682:	f7ff fea1 	bl	80073c8 <memmove>
 8007686:	e7c9      	b.n	800761c <_realloc_r+0x210>
 8007688:	1f32      	subs	r2, r6, #4
 800768a:	2a24      	cmp	r2, #36	; 0x24
 800768c:	d82e      	bhi.n	80076ec <_realloc_r+0x2e0>
 800768e:	2a13      	cmp	r2, #19
 8007690:	d929      	bls.n	80076e6 <_realloc_r+0x2da>
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	2a1b      	cmp	r2, #27
 8007696:	6003      	str	r3, [r0, #0]
 8007698:	6863      	ldr	r3, [r4, #4]
 800769a:	6043      	str	r3, [r0, #4]
 800769c:	d80e      	bhi.n	80076bc <_realloc_r+0x2b0>
 800769e:	f100 0308 	add.w	r3, r0, #8
 80076a2:	f104 0208 	add.w	r2, r4, #8
 80076a6:	6811      	ldr	r1, [r2, #0]
 80076a8:	6019      	str	r1, [r3, #0]
 80076aa:	6851      	ldr	r1, [r2, #4]
 80076ac:	6059      	str	r1, [r3, #4]
 80076ae:	6892      	ldr	r2, [r2, #8]
 80076b0:	609a      	str	r2, [r3, #8]
 80076b2:	4621      	mov	r1, r4
 80076b4:	4650      	mov	r0, sl
 80076b6:	f7ff fdb7 	bl	8007228 <_free_r>
 80076ba:	e76a      	b.n	8007592 <_realloc_r+0x186>
 80076bc:	68a3      	ldr	r3, [r4, #8]
 80076be:	2a24      	cmp	r2, #36	; 0x24
 80076c0:	6083      	str	r3, [r0, #8]
 80076c2:	68e3      	ldr	r3, [r4, #12]
 80076c4:	bf18      	it	ne
 80076c6:	f104 0210 	addne.w	r2, r4, #16
 80076ca:	60c3      	str	r3, [r0, #12]
 80076cc:	bf09      	itett	eq
 80076ce:	6923      	ldreq	r3, [r4, #16]
 80076d0:	f100 0310 	addne.w	r3, r0, #16
 80076d4:	6103      	streq	r3, [r0, #16]
 80076d6:	6961      	ldreq	r1, [r4, #20]
 80076d8:	bf02      	ittt	eq
 80076da:	f100 0318 	addeq.w	r3, r0, #24
 80076de:	f104 0218 	addeq.w	r2, r4, #24
 80076e2:	6141      	streq	r1, [r0, #20]
 80076e4:	e7df      	b.n	80076a6 <_realloc_r+0x29a>
 80076e6:	4603      	mov	r3, r0
 80076e8:	4622      	mov	r2, r4
 80076ea:	e7dc      	b.n	80076a6 <_realloc_r+0x29a>
 80076ec:	4621      	mov	r1, r4
 80076ee:	f7ff fe6b 	bl	80073c8 <memmove>
 80076f2:	e7de      	b.n	80076b2 <_realloc_r+0x2a6>
 80076f4:	4637      	mov	r7, r6
 80076f6:	e6ea      	b.n	80074ce <_realloc_r+0xc2>
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	431f      	orrs	r7, r3
 80076fe:	f8c9 7004 	str.w	r7, [r9, #4]
 8007702:	6853      	ldr	r3, [r2, #4]
 8007704:	f043 0301 	orr.w	r3, r3, #1
 8007708:	6053      	str	r3, [r2, #4]
 800770a:	e6fc      	b.n	8007506 <_realloc_r+0xfa>
 800770c:	200000f8 	.word	0x200000f8

08007710 <__ascii_wctomb>:
 8007710:	b149      	cbz	r1, 8007726 <__ascii_wctomb+0x16>
 8007712:	2aff      	cmp	r2, #255	; 0xff
 8007714:	bf8b      	itete	hi
 8007716:	238a      	movhi	r3, #138	; 0x8a
 8007718:	700a      	strbls	r2, [r1, #0]
 800771a:	6003      	strhi	r3, [r0, #0]
 800771c:	2001      	movls	r0, #1
 800771e:	bf88      	it	hi
 8007720:	f04f 30ff 	movhi.w	r0, #4294967295
 8007724:	4770      	bx	lr
 8007726:	4608      	mov	r0, r1
 8007728:	4770      	bx	lr
	...

0800772c <_sbrk>:
 800772c:	4b04      	ldr	r3, [pc, #16]	; (8007740 <_sbrk+0x14>)
 800772e:	4602      	mov	r2, r0
 8007730:	6819      	ldr	r1, [r3, #0]
 8007732:	b909      	cbnz	r1, 8007738 <_sbrk+0xc>
 8007734:	4903      	ldr	r1, [pc, #12]	; (8007744 <_sbrk+0x18>)
 8007736:	6019      	str	r1, [r3, #0]
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	4402      	add	r2, r0
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	4770      	bx	lr
 8007740:	200006c8 	.word	0x200006c8
 8007744:	20000834 	.word	0x20000834

08007748 <_init>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	bf00      	nop
 800774c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800774e:	bc08      	pop	{r3}
 8007750:	469e      	mov	lr, r3
 8007752:	4770      	bx	lr

08007754 <_fini>:
 8007754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007756:	bf00      	nop
 8007758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775a:	bc08      	pop	{r3}
 800775c:	469e      	mov	lr, r3
 800775e:	4770      	bx	lr
